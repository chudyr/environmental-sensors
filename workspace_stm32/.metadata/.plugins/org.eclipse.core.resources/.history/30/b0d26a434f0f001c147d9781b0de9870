/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c.h"
#include "tim.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

#include "rc_ssd1309.h"
#include "rc_graphic.h"
#include "menu.h"
#include <stdio.h>

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

volatile uint8_t btn_enc = 0;
volatile uint8_t btn_counter;

volatile uint8_t CO2_irq_event;    //CO2 sensor irq
volatile uint8_t button_action_flag;
volatile uint8_t block_btn;


void prepare_CO2_sensor(void);
void prepare_PM_sensor(void);
void prepare_INA_sensor(void);




extern uint8_t StateMachine(uint8_t state, uint8_t stimuli);


/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  uint8_t nextstate;
  uint8_t state;
  uint8_t (*pStateFunc)(uint8_t);


   // Initial state variables
  state = nextstate = ST_MAIN_SCREEN;
  pStateFunc = Empty;

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_I2C2_Init();
  MX_TIM7_Init();
  /* USER CODE BEGIN 2 */
 // HAL_TIM_Base_Start_IT(&htim7);
  //HAL_TIM_OnePulse_Start_IT(&htim7,TIM_OPMODE_SINGLE);


    //prepare_CO2_sensor();
    //prepare_PM_sensor();
  prepare_INA_sensor();

  rc_ssd1306_init();
  rc_ssd1309_display_clear();
  rc_ssd1309_display();
  btn_enc = 0;


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (pStateFunc)
      {
          // When in this state, we must call the state function
          nextstate = (*pStateFunc) (btn_enc);
          //input = KEY_NULL;
      }
      if (btn_enc != KEY_NULL)
      {
          // Plain menu, clock the state machine
          nextstate = StateMachine(state, btn_enc);

          //input = KEY_NULL;
      }

      if (nextstate != state)
      {
          state = nextstate;
          for (uint8_t i=0; menu_state[i].state; i++)
          {
              if (menu_state[i].state == state)
              {
                  //statetext =  menu_state[i].pText;
                  pStateFunc = menu_state[i].pFunc;
                  break;
              }
          }
      }

 // 	  HAL_TIM_Base_Start_IT(&htim7);
 // 	  HAL_TIM_OnePulse_Start_IT(&htim7,TIM_CHANNEL_ALL);
 // 	  HAL_Delay(2000);


  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if (GPIO_Pin == CO2_RDY_Pin)   //Check if callback is from CO2 sensor
	{
		HAL_GPIO_WritePin(LED_1_GPIO_Port,LED_1_Pin,GPIO_PIN_SET);  //turn on RED led
		CO2_irq_event++; //set flag
	}

	if (GPIO_Pin == ENCODER_SW_Pin)   //Check if callback is from CO2 sensor
	{
		HAL_Delay(30);
		if(HAL_GPIO_ReadPin(ENCODER_SW_GPIO_Port,ENCODER_SW_Pin)==GPIO_PIN_RESET)
		{
			btn_enc = KEY_PLUS;
		}


	}


}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	//if (htim == &htim7)
	button_action_flag=0;
	block_btn=0;

		btn_counter++;
	//}


  //This code is never reach
}




void prepare_CO2_sensor(void)
{
	HAL_GPIO_WritePin(PWR_ON_CO2_GPIO_Port,PWR_ON_CO2_Pin,GPIO_PIN_RESET); // switch on power supply for CO2 sensor
}






/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
