
Smog_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008980  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae4  08008a40  08008a40  00018a40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009524  08009524  00020604  2**0
                  CONTENTS
  4 .ARM          00000000  08009524  08009524  00020604  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009524  08009524  00020604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009524  08009524  00019524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009528  08009528  00019528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000604  20000000  0800952c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000604  08009b30  00020604  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000728  08009b30  00020728  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020604  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b44  00000000  00000000  0002062c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002963  00000000  00000000  00031170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  00033ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c90  00000000  00000000  000348c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012de6  00000000  00000000  00035550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011cc7  00000000  00000000  00048336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006ad14  00000000  00000000  00059ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c4d11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042e0  00000000  00000000  000c4d64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000604 	.word	0x20000604
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08008a24 	.word	0x08008a24

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000608 	.word	0x20000608
 8000100:	08008a24 	.word	0x08008a24

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	1c10      	adds	r0, r2, #0
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	1c19      	adds	r1, r3, #0
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f995 	bl	8001768 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f8df 	bl	800160c <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f987 	bl	8001768 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f97d 	bl	8001768 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f901 	bl	8001684 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f8f7 	bl	8001684 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_fdiv>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	464f      	mov	r7, r9
 80004a8:	4646      	mov	r6, r8
 80004aa:	46d6      	mov	lr, sl
 80004ac:	0245      	lsls	r5, r0, #9
 80004ae:	b5c0      	push	{r6, r7, lr}
 80004b0:	0047      	lsls	r7, r0, #1
 80004b2:	1c0c      	adds	r4, r1, #0
 80004b4:	0a6d      	lsrs	r5, r5, #9
 80004b6:	0e3f      	lsrs	r7, r7, #24
 80004b8:	0fc6      	lsrs	r6, r0, #31
 80004ba:	2f00      	cmp	r7, #0
 80004bc:	d066      	beq.n	800058c <__aeabi_fdiv+0xe8>
 80004be:	2fff      	cmp	r7, #255	; 0xff
 80004c0:	d06c      	beq.n	800059c <__aeabi_fdiv+0xf8>
 80004c2:	2300      	movs	r3, #0
 80004c4:	00ea      	lsls	r2, r5, #3
 80004c6:	2580      	movs	r5, #128	; 0x80
 80004c8:	4699      	mov	r9, r3
 80004ca:	469a      	mov	sl, r3
 80004cc:	04ed      	lsls	r5, r5, #19
 80004ce:	4315      	orrs	r5, r2
 80004d0:	3f7f      	subs	r7, #127	; 0x7f
 80004d2:	0260      	lsls	r0, r4, #9
 80004d4:	0061      	lsls	r1, r4, #1
 80004d6:	0a43      	lsrs	r3, r0, #9
 80004d8:	4698      	mov	r8, r3
 80004da:	0e09      	lsrs	r1, r1, #24
 80004dc:	0fe4      	lsrs	r4, r4, #31
 80004de:	2900      	cmp	r1, #0
 80004e0:	d048      	beq.n	8000574 <__aeabi_fdiv+0xd0>
 80004e2:	29ff      	cmp	r1, #255	; 0xff
 80004e4:	d010      	beq.n	8000508 <__aeabi_fdiv+0x64>
 80004e6:	2280      	movs	r2, #128	; 0x80
 80004e8:	00d8      	lsls	r0, r3, #3
 80004ea:	04d2      	lsls	r2, r2, #19
 80004ec:	4302      	orrs	r2, r0
 80004ee:	4690      	mov	r8, r2
 80004f0:	2000      	movs	r0, #0
 80004f2:	397f      	subs	r1, #127	; 0x7f
 80004f4:	464a      	mov	r2, r9
 80004f6:	0033      	movs	r3, r6
 80004f8:	1a7f      	subs	r7, r7, r1
 80004fa:	4302      	orrs	r2, r0
 80004fc:	496c      	ldr	r1, [pc, #432]	; (80006b0 <__aeabi_fdiv+0x20c>)
 80004fe:	0092      	lsls	r2, r2, #2
 8000500:	588a      	ldr	r2, [r1, r2]
 8000502:	4063      	eors	r3, r4
 8000504:	b2db      	uxtb	r3, r3
 8000506:	4697      	mov	pc, r2
 8000508:	2b00      	cmp	r3, #0
 800050a:	d16d      	bne.n	80005e8 <__aeabi_fdiv+0x144>
 800050c:	2002      	movs	r0, #2
 800050e:	3fff      	subs	r7, #255	; 0xff
 8000510:	e033      	b.n	800057a <__aeabi_fdiv+0xd6>
 8000512:	2300      	movs	r3, #0
 8000514:	4698      	mov	r8, r3
 8000516:	0026      	movs	r6, r4
 8000518:	4645      	mov	r5, r8
 800051a:	4682      	mov	sl, r0
 800051c:	4653      	mov	r3, sl
 800051e:	2b02      	cmp	r3, #2
 8000520:	d100      	bne.n	8000524 <__aeabi_fdiv+0x80>
 8000522:	e07f      	b.n	8000624 <__aeabi_fdiv+0x180>
 8000524:	2b03      	cmp	r3, #3
 8000526:	d100      	bne.n	800052a <__aeabi_fdiv+0x86>
 8000528:	e094      	b.n	8000654 <__aeabi_fdiv+0x1b0>
 800052a:	2b01      	cmp	r3, #1
 800052c:	d017      	beq.n	800055e <__aeabi_fdiv+0xba>
 800052e:	0038      	movs	r0, r7
 8000530:	307f      	adds	r0, #127	; 0x7f
 8000532:	2800      	cmp	r0, #0
 8000534:	dd5f      	ble.n	80005f6 <__aeabi_fdiv+0x152>
 8000536:	076b      	lsls	r3, r5, #29
 8000538:	d004      	beq.n	8000544 <__aeabi_fdiv+0xa0>
 800053a:	230f      	movs	r3, #15
 800053c:	402b      	ands	r3, r5
 800053e:	2b04      	cmp	r3, #4
 8000540:	d000      	beq.n	8000544 <__aeabi_fdiv+0xa0>
 8000542:	3504      	adds	r5, #4
 8000544:	012b      	lsls	r3, r5, #4
 8000546:	d503      	bpl.n	8000550 <__aeabi_fdiv+0xac>
 8000548:	0038      	movs	r0, r7
 800054a:	4b5a      	ldr	r3, [pc, #360]	; (80006b4 <__aeabi_fdiv+0x210>)
 800054c:	3080      	adds	r0, #128	; 0x80
 800054e:	401d      	ands	r5, r3
 8000550:	28fe      	cmp	r0, #254	; 0xfe
 8000552:	dc67      	bgt.n	8000624 <__aeabi_fdiv+0x180>
 8000554:	01ad      	lsls	r5, r5, #6
 8000556:	0a6d      	lsrs	r5, r5, #9
 8000558:	b2c0      	uxtb	r0, r0
 800055a:	e002      	b.n	8000562 <__aeabi_fdiv+0xbe>
 800055c:	001e      	movs	r6, r3
 800055e:	2000      	movs	r0, #0
 8000560:	2500      	movs	r5, #0
 8000562:	05c0      	lsls	r0, r0, #23
 8000564:	4328      	orrs	r0, r5
 8000566:	07f6      	lsls	r6, r6, #31
 8000568:	4330      	orrs	r0, r6
 800056a:	bce0      	pop	{r5, r6, r7}
 800056c:	46ba      	mov	sl, r7
 800056e:	46b1      	mov	r9, r6
 8000570:	46a8      	mov	r8, r5
 8000572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000574:	2b00      	cmp	r3, #0
 8000576:	d12b      	bne.n	80005d0 <__aeabi_fdiv+0x12c>
 8000578:	2001      	movs	r0, #1
 800057a:	464a      	mov	r2, r9
 800057c:	0033      	movs	r3, r6
 800057e:	494e      	ldr	r1, [pc, #312]	; (80006b8 <__aeabi_fdiv+0x214>)
 8000580:	4302      	orrs	r2, r0
 8000582:	0092      	lsls	r2, r2, #2
 8000584:	588a      	ldr	r2, [r1, r2]
 8000586:	4063      	eors	r3, r4
 8000588:	b2db      	uxtb	r3, r3
 800058a:	4697      	mov	pc, r2
 800058c:	2d00      	cmp	r5, #0
 800058e:	d113      	bne.n	80005b8 <__aeabi_fdiv+0x114>
 8000590:	2304      	movs	r3, #4
 8000592:	4699      	mov	r9, r3
 8000594:	3b03      	subs	r3, #3
 8000596:	2700      	movs	r7, #0
 8000598:	469a      	mov	sl, r3
 800059a:	e79a      	b.n	80004d2 <__aeabi_fdiv+0x2e>
 800059c:	2d00      	cmp	r5, #0
 800059e:	d105      	bne.n	80005ac <__aeabi_fdiv+0x108>
 80005a0:	2308      	movs	r3, #8
 80005a2:	4699      	mov	r9, r3
 80005a4:	3b06      	subs	r3, #6
 80005a6:	27ff      	movs	r7, #255	; 0xff
 80005a8:	469a      	mov	sl, r3
 80005aa:	e792      	b.n	80004d2 <__aeabi_fdiv+0x2e>
 80005ac:	230c      	movs	r3, #12
 80005ae:	4699      	mov	r9, r3
 80005b0:	3b09      	subs	r3, #9
 80005b2:	27ff      	movs	r7, #255	; 0xff
 80005b4:	469a      	mov	sl, r3
 80005b6:	e78c      	b.n	80004d2 <__aeabi_fdiv+0x2e>
 80005b8:	0028      	movs	r0, r5
 80005ba:	f002 f835 	bl	8002628 <__clzsi2>
 80005be:	2776      	movs	r7, #118	; 0x76
 80005c0:	1f43      	subs	r3, r0, #5
 80005c2:	409d      	lsls	r5, r3
 80005c4:	2300      	movs	r3, #0
 80005c6:	427f      	negs	r7, r7
 80005c8:	4699      	mov	r9, r3
 80005ca:	469a      	mov	sl, r3
 80005cc:	1a3f      	subs	r7, r7, r0
 80005ce:	e780      	b.n	80004d2 <__aeabi_fdiv+0x2e>
 80005d0:	0018      	movs	r0, r3
 80005d2:	f002 f829 	bl	8002628 <__clzsi2>
 80005d6:	4642      	mov	r2, r8
 80005d8:	1f43      	subs	r3, r0, #5
 80005da:	2176      	movs	r1, #118	; 0x76
 80005dc:	409a      	lsls	r2, r3
 80005de:	4249      	negs	r1, r1
 80005e0:	1a09      	subs	r1, r1, r0
 80005e2:	4690      	mov	r8, r2
 80005e4:	2000      	movs	r0, #0
 80005e6:	e785      	b.n	80004f4 <__aeabi_fdiv+0x50>
 80005e8:	21ff      	movs	r1, #255	; 0xff
 80005ea:	2003      	movs	r0, #3
 80005ec:	e782      	b.n	80004f4 <__aeabi_fdiv+0x50>
 80005ee:	001e      	movs	r6, r3
 80005f0:	20ff      	movs	r0, #255	; 0xff
 80005f2:	2500      	movs	r5, #0
 80005f4:	e7b5      	b.n	8000562 <__aeabi_fdiv+0xbe>
 80005f6:	2301      	movs	r3, #1
 80005f8:	1a1b      	subs	r3, r3, r0
 80005fa:	2b1b      	cmp	r3, #27
 80005fc:	dcaf      	bgt.n	800055e <__aeabi_fdiv+0xba>
 80005fe:	379e      	adds	r7, #158	; 0x9e
 8000600:	0029      	movs	r1, r5
 8000602:	40bd      	lsls	r5, r7
 8000604:	40d9      	lsrs	r1, r3
 8000606:	1e6a      	subs	r2, r5, #1
 8000608:	4195      	sbcs	r5, r2
 800060a:	430d      	orrs	r5, r1
 800060c:	076b      	lsls	r3, r5, #29
 800060e:	d004      	beq.n	800061a <__aeabi_fdiv+0x176>
 8000610:	230f      	movs	r3, #15
 8000612:	402b      	ands	r3, r5
 8000614:	2b04      	cmp	r3, #4
 8000616:	d000      	beq.n	800061a <__aeabi_fdiv+0x176>
 8000618:	3504      	adds	r5, #4
 800061a:	016b      	lsls	r3, r5, #5
 800061c:	d544      	bpl.n	80006a8 <__aeabi_fdiv+0x204>
 800061e:	2001      	movs	r0, #1
 8000620:	2500      	movs	r5, #0
 8000622:	e79e      	b.n	8000562 <__aeabi_fdiv+0xbe>
 8000624:	20ff      	movs	r0, #255	; 0xff
 8000626:	2500      	movs	r5, #0
 8000628:	e79b      	b.n	8000562 <__aeabi_fdiv+0xbe>
 800062a:	2580      	movs	r5, #128	; 0x80
 800062c:	2600      	movs	r6, #0
 800062e:	20ff      	movs	r0, #255	; 0xff
 8000630:	03ed      	lsls	r5, r5, #15
 8000632:	e796      	b.n	8000562 <__aeabi_fdiv+0xbe>
 8000634:	2300      	movs	r3, #0
 8000636:	4698      	mov	r8, r3
 8000638:	2080      	movs	r0, #128	; 0x80
 800063a:	03c0      	lsls	r0, r0, #15
 800063c:	4205      	tst	r5, r0
 800063e:	d009      	beq.n	8000654 <__aeabi_fdiv+0x1b0>
 8000640:	4643      	mov	r3, r8
 8000642:	4203      	tst	r3, r0
 8000644:	d106      	bne.n	8000654 <__aeabi_fdiv+0x1b0>
 8000646:	4645      	mov	r5, r8
 8000648:	4305      	orrs	r5, r0
 800064a:	026d      	lsls	r5, r5, #9
 800064c:	0026      	movs	r6, r4
 800064e:	20ff      	movs	r0, #255	; 0xff
 8000650:	0a6d      	lsrs	r5, r5, #9
 8000652:	e786      	b.n	8000562 <__aeabi_fdiv+0xbe>
 8000654:	2080      	movs	r0, #128	; 0x80
 8000656:	03c0      	lsls	r0, r0, #15
 8000658:	4305      	orrs	r5, r0
 800065a:	026d      	lsls	r5, r5, #9
 800065c:	20ff      	movs	r0, #255	; 0xff
 800065e:	0a6d      	lsrs	r5, r5, #9
 8000660:	e77f      	b.n	8000562 <__aeabi_fdiv+0xbe>
 8000662:	4641      	mov	r1, r8
 8000664:	016a      	lsls	r2, r5, #5
 8000666:	0148      	lsls	r0, r1, #5
 8000668:	4282      	cmp	r2, r0
 800066a:	d219      	bcs.n	80006a0 <__aeabi_fdiv+0x1fc>
 800066c:	211b      	movs	r1, #27
 800066e:	2500      	movs	r5, #0
 8000670:	3f01      	subs	r7, #1
 8000672:	2601      	movs	r6, #1
 8000674:	0014      	movs	r4, r2
 8000676:	006d      	lsls	r5, r5, #1
 8000678:	0052      	lsls	r2, r2, #1
 800067a:	2c00      	cmp	r4, #0
 800067c:	db01      	blt.n	8000682 <__aeabi_fdiv+0x1de>
 800067e:	4290      	cmp	r0, r2
 8000680:	d801      	bhi.n	8000686 <__aeabi_fdiv+0x1e2>
 8000682:	1a12      	subs	r2, r2, r0
 8000684:	4335      	orrs	r5, r6
 8000686:	3901      	subs	r1, #1
 8000688:	2900      	cmp	r1, #0
 800068a:	d1f3      	bne.n	8000674 <__aeabi_fdiv+0x1d0>
 800068c:	1e50      	subs	r0, r2, #1
 800068e:	4182      	sbcs	r2, r0
 8000690:	0038      	movs	r0, r7
 8000692:	307f      	adds	r0, #127	; 0x7f
 8000694:	001e      	movs	r6, r3
 8000696:	4315      	orrs	r5, r2
 8000698:	2800      	cmp	r0, #0
 800069a:	dd00      	ble.n	800069e <__aeabi_fdiv+0x1fa>
 800069c:	e74b      	b.n	8000536 <__aeabi_fdiv+0x92>
 800069e:	e7aa      	b.n	80005f6 <__aeabi_fdiv+0x152>
 80006a0:	211a      	movs	r1, #26
 80006a2:	2501      	movs	r5, #1
 80006a4:	1a12      	subs	r2, r2, r0
 80006a6:	e7e4      	b.n	8000672 <__aeabi_fdiv+0x1ce>
 80006a8:	01ad      	lsls	r5, r5, #6
 80006aa:	2000      	movs	r0, #0
 80006ac:	0a6d      	lsrs	r5, r5, #9
 80006ae:	e758      	b.n	8000562 <__aeabi_fdiv+0xbe>
 80006b0:	08008af4 	.word	0x08008af4
 80006b4:	f7ffffff 	.word	0xf7ffffff
 80006b8:	08008b34 	.word	0x08008b34

080006bc <__aeabi_fmul>:
 80006bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006be:	4657      	mov	r7, sl
 80006c0:	464e      	mov	r6, r9
 80006c2:	4645      	mov	r5, r8
 80006c4:	46de      	mov	lr, fp
 80006c6:	0244      	lsls	r4, r0, #9
 80006c8:	b5e0      	push	{r5, r6, r7, lr}
 80006ca:	0045      	lsls	r5, r0, #1
 80006cc:	1c0f      	adds	r7, r1, #0
 80006ce:	0a64      	lsrs	r4, r4, #9
 80006d0:	0e2d      	lsrs	r5, r5, #24
 80006d2:	0fc6      	lsrs	r6, r0, #31
 80006d4:	2d00      	cmp	r5, #0
 80006d6:	d047      	beq.n	8000768 <__aeabi_fmul+0xac>
 80006d8:	2dff      	cmp	r5, #255	; 0xff
 80006da:	d04d      	beq.n	8000778 <__aeabi_fmul+0xbc>
 80006dc:	2300      	movs	r3, #0
 80006de:	2080      	movs	r0, #128	; 0x80
 80006e0:	469a      	mov	sl, r3
 80006e2:	469b      	mov	fp, r3
 80006e4:	00e4      	lsls	r4, r4, #3
 80006e6:	04c0      	lsls	r0, r0, #19
 80006e8:	4304      	orrs	r4, r0
 80006ea:	3d7f      	subs	r5, #127	; 0x7f
 80006ec:	0278      	lsls	r0, r7, #9
 80006ee:	0a43      	lsrs	r3, r0, #9
 80006f0:	4699      	mov	r9, r3
 80006f2:	007a      	lsls	r2, r7, #1
 80006f4:	0ffb      	lsrs	r3, r7, #31
 80006f6:	4698      	mov	r8, r3
 80006f8:	0e12      	lsrs	r2, r2, #24
 80006fa:	464b      	mov	r3, r9
 80006fc:	d044      	beq.n	8000788 <__aeabi_fmul+0xcc>
 80006fe:	2aff      	cmp	r2, #255	; 0xff
 8000700:	d011      	beq.n	8000726 <__aeabi_fmul+0x6a>
 8000702:	00d8      	lsls	r0, r3, #3
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	04db      	lsls	r3, r3, #19
 8000708:	4303      	orrs	r3, r0
 800070a:	4699      	mov	r9, r3
 800070c:	2000      	movs	r0, #0
 800070e:	3a7f      	subs	r2, #127	; 0x7f
 8000710:	18ad      	adds	r5, r5, r2
 8000712:	4647      	mov	r7, r8
 8000714:	4653      	mov	r3, sl
 8000716:	4077      	eors	r7, r6
 8000718:	1c69      	adds	r1, r5, #1
 800071a:	2b0f      	cmp	r3, #15
 800071c:	d83f      	bhi.n	800079e <__aeabi_fmul+0xe2>
 800071e:	4a72      	ldr	r2, [pc, #456]	; (80008e8 <__aeabi_fmul+0x22c>)
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	58d3      	ldr	r3, [r2, r3]
 8000724:	469f      	mov	pc, r3
 8000726:	35ff      	adds	r5, #255	; 0xff
 8000728:	2b00      	cmp	r3, #0
 800072a:	d000      	beq.n	800072e <__aeabi_fmul+0x72>
 800072c:	e079      	b.n	8000822 <__aeabi_fmul+0x166>
 800072e:	4652      	mov	r2, sl
 8000730:	2302      	movs	r3, #2
 8000732:	431a      	orrs	r2, r3
 8000734:	4692      	mov	sl, r2
 8000736:	2002      	movs	r0, #2
 8000738:	e7eb      	b.n	8000712 <__aeabi_fmul+0x56>
 800073a:	4647      	mov	r7, r8
 800073c:	464c      	mov	r4, r9
 800073e:	4683      	mov	fp, r0
 8000740:	465b      	mov	r3, fp
 8000742:	2b02      	cmp	r3, #2
 8000744:	d028      	beq.n	8000798 <__aeabi_fmul+0xdc>
 8000746:	2b03      	cmp	r3, #3
 8000748:	d100      	bne.n	800074c <__aeabi_fmul+0x90>
 800074a:	e0c6      	b.n	80008da <__aeabi_fmul+0x21e>
 800074c:	2b01      	cmp	r3, #1
 800074e:	d14f      	bne.n	80007f0 <__aeabi_fmul+0x134>
 8000750:	2000      	movs	r0, #0
 8000752:	2400      	movs	r4, #0
 8000754:	05c0      	lsls	r0, r0, #23
 8000756:	07ff      	lsls	r7, r7, #31
 8000758:	4320      	orrs	r0, r4
 800075a:	4338      	orrs	r0, r7
 800075c:	bcf0      	pop	{r4, r5, r6, r7}
 800075e:	46bb      	mov	fp, r7
 8000760:	46b2      	mov	sl, r6
 8000762:	46a9      	mov	r9, r5
 8000764:	46a0      	mov	r8, r4
 8000766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000768:	2c00      	cmp	r4, #0
 800076a:	d171      	bne.n	8000850 <__aeabi_fmul+0x194>
 800076c:	2304      	movs	r3, #4
 800076e:	469a      	mov	sl, r3
 8000770:	3b03      	subs	r3, #3
 8000772:	2500      	movs	r5, #0
 8000774:	469b      	mov	fp, r3
 8000776:	e7b9      	b.n	80006ec <__aeabi_fmul+0x30>
 8000778:	2c00      	cmp	r4, #0
 800077a:	d163      	bne.n	8000844 <__aeabi_fmul+0x188>
 800077c:	2308      	movs	r3, #8
 800077e:	469a      	mov	sl, r3
 8000780:	3b06      	subs	r3, #6
 8000782:	25ff      	movs	r5, #255	; 0xff
 8000784:	469b      	mov	fp, r3
 8000786:	e7b1      	b.n	80006ec <__aeabi_fmul+0x30>
 8000788:	2b00      	cmp	r3, #0
 800078a:	d150      	bne.n	800082e <__aeabi_fmul+0x172>
 800078c:	4652      	mov	r2, sl
 800078e:	3301      	adds	r3, #1
 8000790:	431a      	orrs	r2, r3
 8000792:	4692      	mov	sl, r2
 8000794:	2001      	movs	r0, #1
 8000796:	e7bc      	b.n	8000712 <__aeabi_fmul+0x56>
 8000798:	20ff      	movs	r0, #255	; 0xff
 800079a:	2400      	movs	r4, #0
 800079c:	e7da      	b.n	8000754 <__aeabi_fmul+0x98>
 800079e:	4648      	mov	r0, r9
 80007a0:	0c26      	lsrs	r6, r4, #16
 80007a2:	0424      	lsls	r4, r4, #16
 80007a4:	0c22      	lsrs	r2, r4, #16
 80007a6:	0404      	lsls	r4, r0, #16
 80007a8:	0c24      	lsrs	r4, r4, #16
 80007aa:	464b      	mov	r3, r9
 80007ac:	0020      	movs	r0, r4
 80007ae:	0c1b      	lsrs	r3, r3, #16
 80007b0:	4350      	muls	r0, r2
 80007b2:	4374      	muls	r4, r6
 80007b4:	435a      	muls	r2, r3
 80007b6:	435e      	muls	r6, r3
 80007b8:	1912      	adds	r2, r2, r4
 80007ba:	0c03      	lsrs	r3, r0, #16
 80007bc:	189b      	adds	r3, r3, r2
 80007be:	429c      	cmp	r4, r3
 80007c0:	d903      	bls.n	80007ca <__aeabi_fmul+0x10e>
 80007c2:	2280      	movs	r2, #128	; 0x80
 80007c4:	0252      	lsls	r2, r2, #9
 80007c6:	4694      	mov	ip, r2
 80007c8:	4466      	add	r6, ip
 80007ca:	0400      	lsls	r0, r0, #16
 80007cc:	041a      	lsls	r2, r3, #16
 80007ce:	0c00      	lsrs	r0, r0, #16
 80007d0:	1812      	adds	r2, r2, r0
 80007d2:	0194      	lsls	r4, r2, #6
 80007d4:	1e60      	subs	r0, r4, #1
 80007d6:	4184      	sbcs	r4, r0
 80007d8:	0c1b      	lsrs	r3, r3, #16
 80007da:	0e92      	lsrs	r2, r2, #26
 80007dc:	199b      	adds	r3, r3, r6
 80007de:	4314      	orrs	r4, r2
 80007e0:	019b      	lsls	r3, r3, #6
 80007e2:	431c      	orrs	r4, r3
 80007e4:	011b      	lsls	r3, r3, #4
 80007e6:	d572      	bpl.n	80008ce <__aeabi_fmul+0x212>
 80007e8:	2001      	movs	r0, #1
 80007ea:	0863      	lsrs	r3, r4, #1
 80007ec:	4004      	ands	r4, r0
 80007ee:	431c      	orrs	r4, r3
 80007f0:	0008      	movs	r0, r1
 80007f2:	307f      	adds	r0, #127	; 0x7f
 80007f4:	2800      	cmp	r0, #0
 80007f6:	dd3c      	ble.n	8000872 <__aeabi_fmul+0x1b6>
 80007f8:	0763      	lsls	r3, r4, #29
 80007fa:	d004      	beq.n	8000806 <__aeabi_fmul+0x14a>
 80007fc:	230f      	movs	r3, #15
 80007fe:	4023      	ands	r3, r4
 8000800:	2b04      	cmp	r3, #4
 8000802:	d000      	beq.n	8000806 <__aeabi_fmul+0x14a>
 8000804:	3404      	adds	r4, #4
 8000806:	0123      	lsls	r3, r4, #4
 8000808:	d503      	bpl.n	8000812 <__aeabi_fmul+0x156>
 800080a:	3180      	adds	r1, #128	; 0x80
 800080c:	0008      	movs	r0, r1
 800080e:	4b37      	ldr	r3, [pc, #220]	; (80008ec <__aeabi_fmul+0x230>)
 8000810:	401c      	ands	r4, r3
 8000812:	28fe      	cmp	r0, #254	; 0xfe
 8000814:	dcc0      	bgt.n	8000798 <__aeabi_fmul+0xdc>
 8000816:	01a4      	lsls	r4, r4, #6
 8000818:	0a64      	lsrs	r4, r4, #9
 800081a:	b2c0      	uxtb	r0, r0
 800081c:	e79a      	b.n	8000754 <__aeabi_fmul+0x98>
 800081e:	0037      	movs	r7, r6
 8000820:	e78e      	b.n	8000740 <__aeabi_fmul+0x84>
 8000822:	4652      	mov	r2, sl
 8000824:	2303      	movs	r3, #3
 8000826:	431a      	orrs	r2, r3
 8000828:	4692      	mov	sl, r2
 800082a:	2003      	movs	r0, #3
 800082c:	e771      	b.n	8000712 <__aeabi_fmul+0x56>
 800082e:	4648      	mov	r0, r9
 8000830:	f001 fefa 	bl	8002628 <__clzsi2>
 8000834:	464a      	mov	r2, r9
 8000836:	1f43      	subs	r3, r0, #5
 8000838:	409a      	lsls	r2, r3
 800083a:	1a2d      	subs	r5, r5, r0
 800083c:	4691      	mov	r9, r2
 800083e:	2000      	movs	r0, #0
 8000840:	3d76      	subs	r5, #118	; 0x76
 8000842:	e766      	b.n	8000712 <__aeabi_fmul+0x56>
 8000844:	230c      	movs	r3, #12
 8000846:	469a      	mov	sl, r3
 8000848:	3b09      	subs	r3, #9
 800084a:	25ff      	movs	r5, #255	; 0xff
 800084c:	469b      	mov	fp, r3
 800084e:	e74d      	b.n	80006ec <__aeabi_fmul+0x30>
 8000850:	0020      	movs	r0, r4
 8000852:	f001 fee9 	bl	8002628 <__clzsi2>
 8000856:	2576      	movs	r5, #118	; 0x76
 8000858:	1f43      	subs	r3, r0, #5
 800085a:	409c      	lsls	r4, r3
 800085c:	2300      	movs	r3, #0
 800085e:	426d      	negs	r5, r5
 8000860:	469a      	mov	sl, r3
 8000862:	469b      	mov	fp, r3
 8000864:	1a2d      	subs	r5, r5, r0
 8000866:	e741      	b.n	80006ec <__aeabi_fmul+0x30>
 8000868:	2480      	movs	r4, #128	; 0x80
 800086a:	2700      	movs	r7, #0
 800086c:	20ff      	movs	r0, #255	; 0xff
 800086e:	03e4      	lsls	r4, r4, #15
 8000870:	e770      	b.n	8000754 <__aeabi_fmul+0x98>
 8000872:	2301      	movs	r3, #1
 8000874:	1a1b      	subs	r3, r3, r0
 8000876:	2b1b      	cmp	r3, #27
 8000878:	dd00      	ble.n	800087c <__aeabi_fmul+0x1c0>
 800087a:	e769      	b.n	8000750 <__aeabi_fmul+0x94>
 800087c:	319e      	adds	r1, #158	; 0x9e
 800087e:	0020      	movs	r0, r4
 8000880:	408c      	lsls	r4, r1
 8000882:	40d8      	lsrs	r0, r3
 8000884:	1e63      	subs	r3, r4, #1
 8000886:	419c      	sbcs	r4, r3
 8000888:	4304      	orrs	r4, r0
 800088a:	0763      	lsls	r3, r4, #29
 800088c:	d004      	beq.n	8000898 <__aeabi_fmul+0x1dc>
 800088e:	230f      	movs	r3, #15
 8000890:	4023      	ands	r3, r4
 8000892:	2b04      	cmp	r3, #4
 8000894:	d000      	beq.n	8000898 <__aeabi_fmul+0x1dc>
 8000896:	3404      	adds	r4, #4
 8000898:	0163      	lsls	r3, r4, #5
 800089a:	d51a      	bpl.n	80008d2 <__aeabi_fmul+0x216>
 800089c:	2001      	movs	r0, #1
 800089e:	2400      	movs	r4, #0
 80008a0:	e758      	b.n	8000754 <__aeabi_fmul+0x98>
 80008a2:	2080      	movs	r0, #128	; 0x80
 80008a4:	03c0      	lsls	r0, r0, #15
 80008a6:	4204      	tst	r4, r0
 80008a8:	d009      	beq.n	80008be <__aeabi_fmul+0x202>
 80008aa:	464b      	mov	r3, r9
 80008ac:	4203      	tst	r3, r0
 80008ae:	d106      	bne.n	80008be <__aeabi_fmul+0x202>
 80008b0:	464c      	mov	r4, r9
 80008b2:	4304      	orrs	r4, r0
 80008b4:	0264      	lsls	r4, r4, #9
 80008b6:	4647      	mov	r7, r8
 80008b8:	20ff      	movs	r0, #255	; 0xff
 80008ba:	0a64      	lsrs	r4, r4, #9
 80008bc:	e74a      	b.n	8000754 <__aeabi_fmul+0x98>
 80008be:	2080      	movs	r0, #128	; 0x80
 80008c0:	03c0      	lsls	r0, r0, #15
 80008c2:	4304      	orrs	r4, r0
 80008c4:	0264      	lsls	r4, r4, #9
 80008c6:	0037      	movs	r7, r6
 80008c8:	20ff      	movs	r0, #255	; 0xff
 80008ca:	0a64      	lsrs	r4, r4, #9
 80008cc:	e742      	b.n	8000754 <__aeabi_fmul+0x98>
 80008ce:	0029      	movs	r1, r5
 80008d0:	e78e      	b.n	80007f0 <__aeabi_fmul+0x134>
 80008d2:	01a4      	lsls	r4, r4, #6
 80008d4:	2000      	movs	r0, #0
 80008d6:	0a64      	lsrs	r4, r4, #9
 80008d8:	e73c      	b.n	8000754 <__aeabi_fmul+0x98>
 80008da:	2080      	movs	r0, #128	; 0x80
 80008dc:	03c0      	lsls	r0, r0, #15
 80008de:	4304      	orrs	r4, r0
 80008e0:	0264      	lsls	r4, r4, #9
 80008e2:	20ff      	movs	r0, #255	; 0xff
 80008e4:	0a64      	lsrs	r4, r4, #9
 80008e6:	e735      	b.n	8000754 <__aeabi_fmul+0x98>
 80008e8:	08008b74 	.word	0x08008b74
 80008ec:	f7ffffff 	.word	0xf7ffffff

080008f0 <__aeabi_ui2f>:
 80008f0:	b570      	push	{r4, r5, r6, lr}
 80008f2:	1e05      	subs	r5, r0, #0
 80008f4:	d00e      	beq.n	8000914 <__aeabi_ui2f+0x24>
 80008f6:	f001 fe97 	bl	8002628 <__clzsi2>
 80008fa:	239e      	movs	r3, #158	; 0x9e
 80008fc:	0004      	movs	r4, r0
 80008fe:	1a1b      	subs	r3, r3, r0
 8000900:	2b96      	cmp	r3, #150	; 0x96
 8000902:	dc0c      	bgt.n	800091e <__aeabi_ui2f+0x2e>
 8000904:	2808      	cmp	r0, #8
 8000906:	dd01      	ble.n	800090c <__aeabi_ui2f+0x1c>
 8000908:	3c08      	subs	r4, #8
 800090a:	40a5      	lsls	r5, r4
 800090c:	026d      	lsls	r5, r5, #9
 800090e:	0a6d      	lsrs	r5, r5, #9
 8000910:	b2d8      	uxtb	r0, r3
 8000912:	e001      	b.n	8000918 <__aeabi_ui2f+0x28>
 8000914:	2000      	movs	r0, #0
 8000916:	2500      	movs	r5, #0
 8000918:	05c0      	lsls	r0, r0, #23
 800091a:	4328      	orrs	r0, r5
 800091c:	bd70      	pop	{r4, r5, r6, pc}
 800091e:	2b99      	cmp	r3, #153	; 0x99
 8000920:	dd09      	ble.n	8000936 <__aeabi_ui2f+0x46>
 8000922:	0002      	movs	r2, r0
 8000924:	0029      	movs	r1, r5
 8000926:	321b      	adds	r2, #27
 8000928:	4091      	lsls	r1, r2
 800092a:	1e4a      	subs	r2, r1, #1
 800092c:	4191      	sbcs	r1, r2
 800092e:	2205      	movs	r2, #5
 8000930:	1a12      	subs	r2, r2, r0
 8000932:	40d5      	lsrs	r5, r2
 8000934:	430d      	orrs	r5, r1
 8000936:	2c05      	cmp	r4, #5
 8000938:	dd01      	ble.n	800093e <__aeabi_ui2f+0x4e>
 800093a:	1f62      	subs	r2, r4, #5
 800093c:	4095      	lsls	r5, r2
 800093e:	0029      	movs	r1, r5
 8000940:	4e08      	ldr	r6, [pc, #32]	; (8000964 <__aeabi_ui2f+0x74>)
 8000942:	4031      	ands	r1, r6
 8000944:	076a      	lsls	r2, r5, #29
 8000946:	d009      	beq.n	800095c <__aeabi_ui2f+0x6c>
 8000948:	200f      	movs	r0, #15
 800094a:	4028      	ands	r0, r5
 800094c:	2804      	cmp	r0, #4
 800094e:	d005      	beq.n	800095c <__aeabi_ui2f+0x6c>
 8000950:	3104      	adds	r1, #4
 8000952:	014a      	lsls	r2, r1, #5
 8000954:	d502      	bpl.n	800095c <__aeabi_ui2f+0x6c>
 8000956:	239f      	movs	r3, #159	; 0x9f
 8000958:	4031      	ands	r1, r6
 800095a:	1b1b      	subs	r3, r3, r4
 800095c:	0189      	lsls	r1, r1, #6
 800095e:	0a4d      	lsrs	r5, r1, #9
 8000960:	b2d8      	uxtb	r0, r3
 8000962:	e7d9      	b.n	8000918 <__aeabi_ui2f+0x28>
 8000964:	fbffffff 	.word	0xfbffffff

08000968 <__aeabi_dadd>:
 8000968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800096a:	464f      	mov	r7, r9
 800096c:	46d6      	mov	lr, sl
 800096e:	4646      	mov	r6, r8
 8000970:	000d      	movs	r5, r1
 8000972:	0001      	movs	r1, r0
 8000974:	0018      	movs	r0, r3
 8000976:	b5c0      	push	{r6, r7, lr}
 8000978:	0017      	movs	r7, r2
 800097a:	032b      	lsls	r3, r5, #12
 800097c:	0a5a      	lsrs	r2, r3, #9
 800097e:	0f4b      	lsrs	r3, r1, #29
 8000980:	4313      	orrs	r3, r2
 8000982:	00ca      	lsls	r2, r1, #3
 8000984:	4691      	mov	r9, r2
 8000986:	0302      	lsls	r2, r0, #12
 8000988:	006e      	lsls	r6, r5, #1
 800098a:	0041      	lsls	r1, r0, #1
 800098c:	0a52      	lsrs	r2, r2, #9
 800098e:	0fec      	lsrs	r4, r5, #31
 8000990:	0f7d      	lsrs	r5, r7, #29
 8000992:	4315      	orrs	r5, r2
 8000994:	0d76      	lsrs	r6, r6, #21
 8000996:	0d49      	lsrs	r1, r1, #21
 8000998:	0fc0      	lsrs	r0, r0, #31
 800099a:	4682      	mov	sl, r0
 800099c:	46ac      	mov	ip, r5
 800099e:	00ff      	lsls	r7, r7, #3
 80009a0:	1a72      	subs	r2, r6, r1
 80009a2:	4284      	cmp	r4, r0
 80009a4:	d100      	bne.n	80009a8 <__aeabi_dadd+0x40>
 80009a6:	e098      	b.n	8000ada <__aeabi_dadd+0x172>
 80009a8:	2a00      	cmp	r2, #0
 80009aa:	dc00      	bgt.n	80009ae <__aeabi_dadd+0x46>
 80009ac:	e081      	b.n	8000ab2 <__aeabi_dadd+0x14a>
 80009ae:	2900      	cmp	r1, #0
 80009b0:	d100      	bne.n	80009b4 <__aeabi_dadd+0x4c>
 80009b2:	e0b6      	b.n	8000b22 <__aeabi_dadd+0x1ba>
 80009b4:	49c9      	ldr	r1, [pc, #804]	; (8000cdc <__aeabi_dadd+0x374>)
 80009b6:	428e      	cmp	r6, r1
 80009b8:	d100      	bne.n	80009bc <__aeabi_dadd+0x54>
 80009ba:	e172      	b.n	8000ca2 <__aeabi_dadd+0x33a>
 80009bc:	2180      	movs	r1, #128	; 0x80
 80009be:	0028      	movs	r0, r5
 80009c0:	0409      	lsls	r1, r1, #16
 80009c2:	4308      	orrs	r0, r1
 80009c4:	4684      	mov	ip, r0
 80009c6:	2a38      	cmp	r2, #56	; 0x38
 80009c8:	dd00      	ble.n	80009cc <__aeabi_dadd+0x64>
 80009ca:	e15e      	b.n	8000c8a <__aeabi_dadd+0x322>
 80009cc:	2a1f      	cmp	r2, #31
 80009ce:	dd00      	ble.n	80009d2 <__aeabi_dadd+0x6a>
 80009d0:	e1ee      	b.n	8000db0 <__aeabi_dadd+0x448>
 80009d2:	2020      	movs	r0, #32
 80009d4:	0039      	movs	r1, r7
 80009d6:	4665      	mov	r5, ip
 80009d8:	1a80      	subs	r0, r0, r2
 80009da:	4087      	lsls	r7, r0
 80009dc:	40d1      	lsrs	r1, r2
 80009de:	4085      	lsls	r5, r0
 80009e0:	430d      	orrs	r5, r1
 80009e2:	0039      	movs	r1, r7
 80009e4:	1e4f      	subs	r7, r1, #1
 80009e6:	41b9      	sbcs	r1, r7
 80009e8:	4667      	mov	r7, ip
 80009ea:	40d7      	lsrs	r7, r2
 80009ec:	4329      	orrs	r1, r5
 80009ee:	1bdb      	subs	r3, r3, r7
 80009f0:	464a      	mov	r2, r9
 80009f2:	1a55      	subs	r5, r2, r1
 80009f4:	45a9      	cmp	r9, r5
 80009f6:	4189      	sbcs	r1, r1
 80009f8:	4249      	negs	r1, r1
 80009fa:	1a5b      	subs	r3, r3, r1
 80009fc:	4698      	mov	r8, r3
 80009fe:	4643      	mov	r3, r8
 8000a00:	021b      	lsls	r3, r3, #8
 8000a02:	d400      	bmi.n	8000a06 <__aeabi_dadd+0x9e>
 8000a04:	e0cc      	b.n	8000ba0 <__aeabi_dadd+0x238>
 8000a06:	4643      	mov	r3, r8
 8000a08:	025b      	lsls	r3, r3, #9
 8000a0a:	0a5b      	lsrs	r3, r3, #9
 8000a0c:	4698      	mov	r8, r3
 8000a0e:	4643      	mov	r3, r8
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d100      	bne.n	8000a16 <__aeabi_dadd+0xae>
 8000a14:	e12c      	b.n	8000c70 <__aeabi_dadd+0x308>
 8000a16:	4640      	mov	r0, r8
 8000a18:	f001 fe06 	bl	8002628 <__clzsi2>
 8000a1c:	0001      	movs	r1, r0
 8000a1e:	3908      	subs	r1, #8
 8000a20:	2220      	movs	r2, #32
 8000a22:	0028      	movs	r0, r5
 8000a24:	4643      	mov	r3, r8
 8000a26:	1a52      	subs	r2, r2, r1
 8000a28:	408b      	lsls	r3, r1
 8000a2a:	40d0      	lsrs	r0, r2
 8000a2c:	408d      	lsls	r5, r1
 8000a2e:	4303      	orrs	r3, r0
 8000a30:	428e      	cmp	r6, r1
 8000a32:	dd00      	ble.n	8000a36 <__aeabi_dadd+0xce>
 8000a34:	e117      	b.n	8000c66 <__aeabi_dadd+0x2fe>
 8000a36:	1b8e      	subs	r6, r1, r6
 8000a38:	1c72      	adds	r2, r6, #1
 8000a3a:	2a1f      	cmp	r2, #31
 8000a3c:	dd00      	ble.n	8000a40 <__aeabi_dadd+0xd8>
 8000a3e:	e1a7      	b.n	8000d90 <__aeabi_dadd+0x428>
 8000a40:	2120      	movs	r1, #32
 8000a42:	0018      	movs	r0, r3
 8000a44:	002e      	movs	r6, r5
 8000a46:	1a89      	subs	r1, r1, r2
 8000a48:	408d      	lsls	r5, r1
 8000a4a:	4088      	lsls	r0, r1
 8000a4c:	40d6      	lsrs	r6, r2
 8000a4e:	40d3      	lsrs	r3, r2
 8000a50:	1e69      	subs	r1, r5, #1
 8000a52:	418d      	sbcs	r5, r1
 8000a54:	4330      	orrs	r0, r6
 8000a56:	4698      	mov	r8, r3
 8000a58:	2600      	movs	r6, #0
 8000a5a:	4305      	orrs	r5, r0
 8000a5c:	076b      	lsls	r3, r5, #29
 8000a5e:	d009      	beq.n	8000a74 <__aeabi_dadd+0x10c>
 8000a60:	230f      	movs	r3, #15
 8000a62:	402b      	ands	r3, r5
 8000a64:	2b04      	cmp	r3, #4
 8000a66:	d005      	beq.n	8000a74 <__aeabi_dadd+0x10c>
 8000a68:	1d2b      	adds	r3, r5, #4
 8000a6a:	42ab      	cmp	r3, r5
 8000a6c:	41ad      	sbcs	r5, r5
 8000a6e:	426d      	negs	r5, r5
 8000a70:	44a8      	add	r8, r5
 8000a72:	001d      	movs	r5, r3
 8000a74:	4643      	mov	r3, r8
 8000a76:	021b      	lsls	r3, r3, #8
 8000a78:	d400      	bmi.n	8000a7c <__aeabi_dadd+0x114>
 8000a7a:	e094      	b.n	8000ba6 <__aeabi_dadd+0x23e>
 8000a7c:	4b97      	ldr	r3, [pc, #604]	; (8000cdc <__aeabi_dadd+0x374>)
 8000a7e:	1c72      	adds	r2, r6, #1
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d100      	bne.n	8000a86 <__aeabi_dadd+0x11e>
 8000a84:	e09d      	b.n	8000bc2 <__aeabi_dadd+0x25a>
 8000a86:	4641      	mov	r1, r8
 8000a88:	4b95      	ldr	r3, [pc, #596]	; (8000ce0 <__aeabi_dadd+0x378>)
 8000a8a:	08ed      	lsrs	r5, r5, #3
 8000a8c:	4019      	ands	r1, r3
 8000a8e:	000b      	movs	r3, r1
 8000a90:	0552      	lsls	r2, r2, #21
 8000a92:	0749      	lsls	r1, r1, #29
 8000a94:	025b      	lsls	r3, r3, #9
 8000a96:	4329      	orrs	r1, r5
 8000a98:	0b1b      	lsrs	r3, r3, #12
 8000a9a:	0d52      	lsrs	r2, r2, #21
 8000a9c:	0512      	lsls	r2, r2, #20
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	07e4      	lsls	r4, r4, #31
 8000aa2:	4323      	orrs	r3, r4
 8000aa4:	0008      	movs	r0, r1
 8000aa6:	0019      	movs	r1, r3
 8000aa8:	bce0      	pop	{r5, r6, r7}
 8000aaa:	46ba      	mov	sl, r7
 8000aac:	46b1      	mov	r9, r6
 8000aae:	46a8      	mov	r8, r5
 8000ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ab2:	2a00      	cmp	r2, #0
 8000ab4:	d043      	beq.n	8000b3e <__aeabi_dadd+0x1d6>
 8000ab6:	1b8a      	subs	r2, r1, r6
 8000ab8:	2e00      	cmp	r6, #0
 8000aba:	d000      	beq.n	8000abe <__aeabi_dadd+0x156>
 8000abc:	e12a      	b.n	8000d14 <__aeabi_dadd+0x3ac>
 8000abe:	464c      	mov	r4, r9
 8000ac0:	431c      	orrs	r4, r3
 8000ac2:	d100      	bne.n	8000ac6 <__aeabi_dadd+0x15e>
 8000ac4:	e1d1      	b.n	8000e6a <__aeabi_dadd+0x502>
 8000ac6:	1e54      	subs	r4, r2, #1
 8000ac8:	2a01      	cmp	r2, #1
 8000aca:	d100      	bne.n	8000ace <__aeabi_dadd+0x166>
 8000acc:	e21f      	b.n	8000f0e <__aeabi_dadd+0x5a6>
 8000ace:	4d83      	ldr	r5, [pc, #524]	; (8000cdc <__aeabi_dadd+0x374>)
 8000ad0:	42aa      	cmp	r2, r5
 8000ad2:	d100      	bne.n	8000ad6 <__aeabi_dadd+0x16e>
 8000ad4:	e272      	b.n	8000fbc <__aeabi_dadd+0x654>
 8000ad6:	0022      	movs	r2, r4
 8000ad8:	e123      	b.n	8000d22 <__aeabi_dadd+0x3ba>
 8000ada:	2a00      	cmp	r2, #0
 8000adc:	dc00      	bgt.n	8000ae0 <__aeabi_dadd+0x178>
 8000ade:	e098      	b.n	8000c12 <__aeabi_dadd+0x2aa>
 8000ae0:	2900      	cmp	r1, #0
 8000ae2:	d042      	beq.n	8000b6a <__aeabi_dadd+0x202>
 8000ae4:	497d      	ldr	r1, [pc, #500]	; (8000cdc <__aeabi_dadd+0x374>)
 8000ae6:	428e      	cmp	r6, r1
 8000ae8:	d100      	bne.n	8000aec <__aeabi_dadd+0x184>
 8000aea:	e0da      	b.n	8000ca2 <__aeabi_dadd+0x33a>
 8000aec:	2180      	movs	r1, #128	; 0x80
 8000aee:	0028      	movs	r0, r5
 8000af0:	0409      	lsls	r1, r1, #16
 8000af2:	4308      	orrs	r0, r1
 8000af4:	4684      	mov	ip, r0
 8000af6:	2a38      	cmp	r2, #56	; 0x38
 8000af8:	dd00      	ble.n	8000afc <__aeabi_dadd+0x194>
 8000afa:	e129      	b.n	8000d50 <__aeabi_dadd+0x3e8>
 8000afc:	2a1f      	cmp	r2, #31
 8000afe:	dc00      	bgt.n	8000b02 <__aeabi_dadd+0x19a>
 8000b00:	e187      	b.n	8000e12 <__aeabi_dadd+0x4aa>
 8000b02:	0011      	movs	r1, r2
 8000b04:	4665      	mov	r5, ip
 8000b06:	3920      	subs	r1, #32
 8000b08:	40cd      	lsrs	r5, r1
 8000b0a:	2a20      	cmp	r2, #32
 8000b0c:	d004      	beq.n	8000b18 <__aeabi_dadd+0x1b0>
 8000b0e:	2040      	movs	r0, #64	; 0x40
 8000b10:	4661      	mov	r1, ip
 8000b12:	1a82      	subs	r2, r0, r2
 8000b14:	4091      	lsls	r1, r2
 8000b16:	430f      	orrs	r7, r1
 8000b18:	0039      	movs	r1, r7
 8000b1a:	1e4f      	subs	r7, r1, #1
 8000b1c:	41b9      	sbcs	r1, r7
 8000b1e:	430d      	orrs	r5, r1
 8000b20:	e11b      	b.n	8000d5a <__aeabi_dadd+0x3f2>
 8000b22:	0029      	movs	r1, r5
 8000b24:	4339      	orrs	r1, r7
 8000b26:	d100      	bne.n	8000b2a <__aeabi_dadd+0x1c2>
 8000b28:	e0b5      	b.n	8000c96 <__aeabi_dadd+0x32e>
 8000b2a:	1e51      	subs	r1, r2, #1
 8000b2c:	2a01      	cmp	r2, #1
 8000b2e:	d100      	bne.n	8000b32 <__aeabi_dadd+0x1ca>
 8000b30:	e1ab      	b.n	8000e8a <__aeabi_dadd+0x522>
 8000b32:	486a      	ldr	r0, [pc, #424]	; (8000cdc <__aeabi_dadd+0x374>)
 8000b34:	4282      	cmp	r2, r0
 8000b36:	d100      	bne.n	8000b3a <__aeabi_dadd+0x1d2>
 8000b38:	e1b2      	b.n	8000ea0 <__aeabi_dadd+0x538>
 8000b3a:	000a      	movs	r2, r1
 8000b3c:	e743      	b.n	80009c6 <__aeabi_dadd+0x5e>
 8000b3e:	4969      	ldr	r1, [pc, #420]	; (8000ce4 <__aeabi_dadd+0x37c>)
 8000b40:	1c75      	adds	r5, r6, #1
 8000b42:	420d      	tst	r5, r1
 8000b44:	d000      	beq.n	8000b48 <__aeabi_dadd+0x1e0>
 8000b46:	e0cf      	b.n	8000ce8 <__aeabi_dadd+0x380>
 8000b48:	2e00      	cmp	r6, #0
 8000b4a:	d000      	beq.n	8000b4e <__aeabi_dadd+0x1e6>
 8000b4c:	e193      	b.n	8000e76 <__aeabi_dadd+0x50e>
 8000b4e:	4649      	mov	r1, r9
 8000b50:	4319      	orrs	r1, r3
 8000b52:	d100      	bne.n	8000b56 <__aeabi_dadd+0x1ee>
 8000b54:	e1d1      	b.n	8000efa <__aeabi_dadd+0x592>
 8000b56:	4661      	mov	r1, ip
 8000b58:	4339      	orrs	r1, r7
 8000b5a:	d000      	beq.n	8000b5e <__aeabi_dadd+0x1f6>
 8000b5c:	e1e3      	b.n	8000f26 <__aeabi_dadd+0x5be>
 8000b5e:	4649      	mov	r1, r9
 8000b60:	0758      	lsls	r0, r3, #29
 8000b62:	08c9      	lsrs	r1, r1, #3
 8000b64:	4301      	orrs	r1, r0
 8000b66:	08db      	lsrs	r3, r3, #3
 8000b68:	e026      	b.n	8000bb8 <__aeabi_dadd+0x250>
 8000b6a:	0029      	movs	r1, r5
 8000b6c:	4339      	orrs	r1, r7
 8000b6e:	d100      	bne.n	8000b72 <__aeabi_dadd+0x20a>
 8000b70:	e091      	b.n	8000c96 <__aeabi_dadd+0x32e>
 8000b72:	1e51      	subs	r1, r2, #1
 8000b74:	2a01      	cmp	r2, #1
 8000b76:	d005      	beq.n	8000b84 <__aeabi_dadd+0x21c>
 8000b78:	4858      	ldr	r0, [pc, #352]	; (8000cdc <__aeabi_dadd+0x374>)
 8000b7a:	4282      	cmp	r2, r0
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_dadd+0x218>
 8000b7e:	e18f      	b.n	8000ea0 <__aeabi_dadd+0x538>
 8000b80:	000a      	movs	r2, r1
 8000b82:	e7b8      	b.n	8000af6 <__aeabi_dadd+0x18e>
 8000b84:	003d      	movs	r5, r7
 8000b86:	444d      	add	r5, r9
 8000b88:	454d      	cmp	r5, r9
 8000b8a:	4189      	sbcs	r1, r1
 8000b8c:	4463      	add	r3, ip
 8000b8e:	4698      	mov	r8, r3
 8000b90:	4249      	negs	r1, r1
 8000b92:	4488      	add	r8, r1
 8000b94:	4643      	mov	r3, r8
 8000b96:	2602      	movs	r6, #2
 8000b98:	021b      	lsls	r3, r3, #8
 8000b9a:	d500      	bpl.n	8000b9e <__aeabi_dadd+0x236>
 8000b9c:	e0eb      	b.n	8000d76 <__aeabi_dadd+0x40e>
 8000b9e:	3e01      	subs	r6, #1
 8000ba0:	076b      	lsls	r3, r5, #29
 8000ba2:	d000      	beq.n	8000ba6 <__aeabi_dadd+0x23e>
 8000ba4:	e75c      	b.n	8000a60 <__aeabi_dadd+0xf8>
 8000ba6:	4643      	mov	r3, r8
 8000ba8:	08e9      	lsrs	r1, r5, #3
 8000baa:	075a      	lsls	r2, r3, #29
 8000bac:	4311      	orrs	r1, r2
 8000bae:	0032      	movs	r2, r6
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	484a      	ldr	r0, [pc, #296]	; (8000cdc <__aeabi_dadd+0x374>)
 8000bb4:	4282      	cmp	r2, r0
 8000bb6:	d021      	beq.n	8000bfc <__aeabi_dadd+0x294>
 8000bb8:	031b      	lsls	r3, r3, #12
 8000bba:	0552      	lsls	r2, r2, #21
 8000bbc:	0b1b      	lsrs	r3, r3, #12
 8000bbe:	0d52      	lsrs	r2, r2, #21
 8000bc0:	e76c      	b.n	8000a9c <__aeabi_dadd+0x134>
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	e769      	b.n	8000a9c <__aeabi_dadd+0x134>
 8000bc8:	002a      	movs	r2, r5
 8000bca:	433a      	orrs	r2, r7
 8000bcc:	d069      	beq.n	8000ca2 <__aeabi_dadd+0x33a>
 8000bce:	464a      	mov	r2, r9
 8000bd0:	0758      	lsls	r0, r3, #29
 8000bd2:	08d1      	lsrs	r1, r2, #3
 8000bd4:	08da      	lsrs	r2, r3, #3
 8000bd6:	2380      	movs	r3, #128	; 0x80
 8000bd8:	031b      	lsls	r3, r3, #12
 8000bda:	4308      	orrs	r0, r1
 8000bdc:	421a      	tst	r2, r3
 8000bde:	d007      	beq.n	8000bf0 <__aeabi_dadd+0x288>
 8000be0:	0029      	movs	r1, r5
 8000be2:	08ed      	lsrs	r5, r5, #3
 8000be4:	421d      	tst	r5, r3
 8000be6:	d103      	bne.n	8000bf0 <__aeabi_dadd+0x288>
 8000be8:	002a      	movs	r2, r5
 8000bea:	08ff      	lsrs	r7, r7, #3
 8000bec:	0748      	lsls	r0, r1, #29
 8000bee:	4338      	orrs	r0, r7
 8000bf0:	0f43      	lsrs	r3, r0, #29
 8000bf2:	00c1      	lsls	r1, r0, #3
 8000bf4:	075b      	lsls	r3, r3, #29
 8000bf6:	08c9      	lsrs	r1, r1, #3
 8000bf8:	4319      	orrs	r1, r3
 8000bfa:	0013      	movs	r3, r2
 8000bfc:	000a      	movs	r2, r1
 8000bfe:	431a      	orrs	r2, r3
 8000c00:	d100      	bne.n	8000c04 <__aeabi_dadd+0x29c>
 8000c02:	e213      	b.n	800102c <__aeabi_dadd+0x6c4>
 8000c04:	2280      	movs	r2, #128	; 0x80
 8000c06:	0312      	lsls	r2, r2, #12
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	031b      	lsls	r3, r3, #12
 8000c0c:	4a33      	ldr	r2, [pc, #204]	; (8000cdc <__aeabi_dadd+0x374>)
 8000c0e:	0b1b      	lsrs	r3, r3, #12
 8000c10:	e744      	b.n	8000a9c <__aeabi_dadd+0x134>
 8000c12:	2a00      	cmp	r2, #0
 8000c14:	d04b      	beq.n	8000cae <__aeabi_dadd+0x346>
 8000c16:	1b8a      	subs	r2, r1, r6
 8000c18:	2e00      	cmp	r6, #0
 8000c1a:	d100      	bne.n	8000c1e <__aeabi_dadd+0x2b6>
 8000c1c:	e0e7      	b.n	8000dee <__aeabi_dadd+0x486>
 8000c1e:	482f      	ldr	r0, [pc, #188]	; (8000cdc <__aeabi_dadd+0x374>)
 8000c20:	4281      	cmp	r1, r0
 8000c22:	d100      	bne.n	8000c26 <__aeabi_dadd+0x2be>
 8000c24:	e195      	b.n	8000f52 <__aeabi_dadd+0x5ea>
 8000c26:	2080      	movs	r0, #128	; 0x80
 8000c28:	0400      	lsls	r0, r0, #16
 8000c2a:	4303      	orrs	r3, r0
 8000c2c:	2a38      	cmp	r2, #56	; 0x38
 8000c2e:	dd00      	ble.n	8000c32 <__aeabi_dadd+0x2ca>
 8000c30:	e143      	b.n	8000eba <__aeabi_dadd+0x552>
 8000c32:	2a1f      	cmp	r2, #31
 8000c34:	dd00      	ble.n	8000c38 <__aeabi_dadd+0x2d0>
 8000c36:	e1db      	b.n	8000ff0 <__aeabi_dadd+0x688>
 8000c38:	2020      	movs	r0, #32
 8000c3a:	001d      	movs	r5, r3
 8000c3c:	464e      	mov	r6, r9
 8000c3e:	1a80      	subs	r0, r0, r2
 8000c40:	4085      	lsls	r5, r0
 8000c42:	40d6      	lsrs	r6, r2
 8000c44:	4335      	orrs	r5, r6
 8000c46:	464e      	mov	r6, r9
 8000c48:	4086      	lsls	r6, r0
 8000c4a:	0030      	movs	r0, r6
 8000c4c:	40d3      	lsrs	r3, r2
 8000c4e:	1e46      	subs	r6, r0, #1
 8000c50:	41b0      	sbcs	r0, r6
 8000c52:	449c      	add	ip, r3
 8000c54:	4305      	orrs	r5, r0
 8000c56:	19ed      	adds	r5, r5, r7
 8000c58:	42bd      	cmp	r5, r7
 8000c5a:	419b      	sbcs	r3, r3
 8000c5c:	425b      	negs	r3, r3
 8000c5e:	4463      	add	r3, ip
 8000c60:	4698      	mov	r8, r3
 8000c62:	000e      	movs	r6, r1
 8000c64:	e07f      	b.n	8000d66 <__aeabi_dadd+0x3fe>
 8000c66:	4a1e      	ldr	r2, [pc, #120]	; (8000ce0 <__aeabi_dadd+0x378>)
 8000c68:	1a76      	subs	r6, r6, r1
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	4698      	mov	r8, r3
 8000c6e:	e6f5      	b.n	8000a5c <__aeabi_dadd+0xf4>
 8000c70:	0028      	movs	r0, r5
 8000c72:	f001 fcd9 	bl	8002628 <__clzsi2>
 8000c76:	0001      	movs	r1, r0
 8000c78:	3118      	adds	r1, #24
 8000c7a:	291f      	cmp	r1, #31
 8000c7c:	dc00      	bgt.n	8000c80 <__aeabi_dadd+0x318>
 8000c7e:	e6cf      	b.n	8000a20 <__aeabi_dadd+0xb8>
 8000c80:	002b      	movs	r3, r5
 8000c82:	3808      	subs	r0, #8
 8000c84:	4083      	lsls	r3, r0
 8000c86:	2500      	movs	r5, #0
 8000c88:	e6d2      	b.n	8000a30 <__aeabi_dadd+0xc8>
 8000c8a:	4662      	mov	r2, ip
 8000c8c:	433a      	orrs	r2, r7
 8000c8e:	0011      	movs	r1, r2
 8000c90:	1e4f      	subs	r7, r1, #1
 8000c92:	41b9      	sbcs	r1, r7
 8000c94:	e6ac      	b.n	80009f0 <__aeabi_dadd+0x88>
 8000c96:	4649      	mov	r1, r9
 8000c98:	0758      	lsls	r0, r3, #29
 8000c9a:	08c9      	lsrs	r1, r1, #3
 8000c9c:	4301      	orrs	r1, r0
 8000c9e:	08db      	lsrs	r3, r3, #3
 8000ca0:	e787      	b.n	8000bb2 <__aeabi_dadd+0x24a>
 8000ca2:	4649      	mov	r1, r9
 8000ca4:	075a      	lsls	r2, r3, #29
 8000ca6:	08c9      	lsrs	r1, r1, #3
 8000ca8:	4311      	orrs	r1, r2
 8000caa:	08db      	lsrs	r3, r3, #3
 8000cac:	e7a6      	b.n	8000bfc <__aeabi_dadd+0x294>
 8000cae:	490d      	ldr	r1, [pc, #52]	; (8000ce4 <__aeabi_dadd+0x37c>)
 8000cb0:	1c70      	adds	r0, r6, #1
 8000cb2:	4208      	tst	r0, r1
 8000cb4:	d000      	beq.n	8000cb8 <__aeabi_dadd+0x350>
 8000cb6:	e0bb      	b.n	8000e30 <__aeabi_dadd+0x4c8>
 8000cb8:	2e00      	cmp	r6, #0
 8000cba:	d000      	beq.n	8000cbe <__aeabi_dadd+0x356>
 8000cbc:	e114      	b.n	8000ee8 <__aeabi_dadd+0x580>
 8000cbe:	4649      	mov	r1, r9
 8000cc0:	4319      	orrs	r1, r3
 8000cc2:	d100      	bne.n	8000cc6 <__aeabi_dadd+0x35e>
 8000cc4:	e175      	b.n	8000fb2 <__aeabi_dadd+0x64a>
 8000cc6:	0029      	movs	r1, r5
 8000cc8:	4339      	orrs	r1, r7
 8000cca:	d000      	beq.n	8000cce <__aeabi_dadd+0x366>
 8000ccc:	e17e      	b.n	8000fcc <__aeabi_dadd+0x664>
 8000cce:	4649      	mov	r1, r9
 8000cd0:	0758      	lsls	r0, r3, #29
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	4301      	orrs	r1, r0
 8000cd6:	08db      	lsrs	r3, r3, #3
 8000cd8:	e76e      	b.n	8000bb8 <__aeabi_dadd+0x250>
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	000007ff 	.word	0x000007ff
 8000ce0:	ff7fffff 	.word	0xff7fffff
 8000ce4:	000007fe 	.word	0x000007fe
 8000ce8:	4649      	mov	r1, r9
 8000cea:	1bcd      	subs	r5, r1, r7
 8000cec:	4661      	mov	r1, ip
 8000cee:	1a58      	subs	r0, r3, r1
 8000cf0:	45a9      	cmp	r9, r5
 8000cf2:	4189      	sbcs	r1, r1
 8000cf4:	4249      	negs	r1, r1
 8000cf6:	4688      	mov	r8, r1
 8000cf8:	0001      	movs	r1, r0
 8000cfa:	4640      	mov	r0, r8
 8000cfc:	1a09      	subs	r1, r1, r0
 8000cfe:	4688      	mov	r8, r1
 8000d00:	0209      	lsls	r1, r1, #8
 8000d02:	d500      	bpl.n	8000d06 <__aeabi_dadd+0x39e>
 8000d04:	e0a6      	b.n	8000e54 <__aeabi_dadd+0x4ec>
 8000d06:	4641      	mov	r1, r8
 8000d08:	4329      	orrs	r1, r5
 8000d0a:	d000      	beq.n	8000d0e <__aeabi_dadd+0x3a6>
 8000d0c:	e67f      	b.n	8000a0e <__aeabi_dadd+0xa6>
 8000d0e:	2300      	movs	r3, #0
 8000d10:	2400      	movs	r4, #0
 8000d12:	e751      	b.n	8000bb8 <__aeabi_dadd+0x250>
 8000d14:	4cc7      	ldr	r4, [pc, #796]	; (8001034 <__aeabi_dadd+0x6cc>)
 8000d16:	42a1      	cmp	r1, r4
 8000d18:	d100      	bne.n	8000d1c <__aeabi_dadd+0x3b4>
 8000d1a:	e0c7      	b.n	8000eac <__aeabi_dadd+0x544>
 8000d1c:	2480      	movs	r4, #128	; 0x80
 8000d1e:	0424      	lsls	r4, r4, #16
 8000d20:	4323      	orrs	r3, r4
 8000d22:	2a38      	cmp	r2, #56	; 0x38
 8000d24:	dc54      	bgt.n	8000dd0 <__aeabi_dadd+0x468>
 8000d26:	2a1f      	cmp	r2, #31
 8000d28:	dd00      	ble.n	8000d2c <__aeabi_dadd+0x3c4>
 8000d2a:	e0cc      	b.n	8000ec6 <__aeabi_dadd+0x55e>
 8000d2c:	2420      	movs	r4, #32
 8000d2e:	4648      	mov	r0, r9
 8000d30:	1aa4      	subs	r4, r4, r2
 8000d32:	001d      	movs	r5, r3
 8000d34:	464e      	mov	r6, r9
 8000d36:	40a0      	lsls	r0, r4
 8000d38:	40d6      	lsrs	r6, r2
 8000d3a:	40a5      	lsls	r5, r4
 8000d3c:	0004      	movs	r4, r0
 8000d3e:	40d3      	lsrs	r3, r2
 8000d40:	4662      	mov	r2, ip
 8000d42:	4335      	orrs	r5, r6
 8000d44:	1e66      	subs	r6, r4, #1
 8000d46:	41b4      	sbcs	r4, r6
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	469c      	mov	ip, r3
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	e044      	b.n	8000dda <__aeabi_dadd+0x472>
 8000d50:	4662      	mov	r2, ip
 8000d52:	433a      	orrs	r2, r7
 8000d54:	0015      	movs	r5, r2
 8000d56:	1e6f      	subs	r7, r5, #1
 8000d58:	41bd      	sbcs	r5, r7
 8000d5a:	444d      	add	r5, r9
 8000d5c:	454d      	cmp	r5, r9
 8000d5e:	4189      	sbcs	r1, r1
 8000d60:	4249      	negs	r1, r1
 8000d62:	4688      	mov	r8, r1
 8000d64:	4498      	add	r8, r3
 8000d66:	4643      	mov	r3, r8
 8000d68:	021b      	lsls	r3, r3, #8
 8000d6a:	d400      	bmi.n	8000d6e <__aeabi_dadd+0x406>
 8000d6c:	e718      	b.n	8000ba0 <__aeabi_dadd+0x238>
 8000d6e:	4bb1      	ldr	r3, [pc, #708]	; (8001034 <__aeabi_dadd+0x6cc>)
 8000d70:	3601      	adds	r6, #1
 8000d72:	429e      	cmp	r6, r3
 8000d74:	d049      	beq.n	8000e0a <__aeabi_dadd+0x4a2>
 8000d76:	4642      	mov	r2, r8
 8000d78:	4baf      	ldr	r3, [pc, #700]	; (8001038 <__aeabi_dadd+0x6d0>)
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	401a      	ands	r2, r3
 8000d7e:	0013      	movs	r3, r2
 8000d80:	086a      	lsrs	r2, r5, #1
 8000d82:	400d      	ands	r5, r1
 8000d84:	4315      	orrs	r5, r2
 8000d86:	07d9      	lsls	r1, r3, #31
 8000d88:	085b      	lsrs	r3, r3, #1
 8000d8a:	4698      	mov	r8, r3
 8000d8c:	430d      	orrs	r5, r1
 8000d8e:	e665      	b.n	8000a5c <__aeabi_dadd+0xf4>
 8000d90:	0018      	movs	r0, r3
 8000d92:	3e1f      	subs	r6, #31
 8000d94:	40f0      	lsrs	r0, r6
 8000d96:	2a20      	cmp	r2, #32
 8000d98:	d003      	beq.n	8000da2 <__aeabi_dadd+0x43a>
 8000d9a:	2140      	movs	r1, #64	; 0x40
 8000d9c:	1a8a      	subs	r2, r1, r2
 8000d9e:	4093      	lsls	r3, r2
 8000da0:	431d      	orrs	r5, r3
 8000da2:	1e69      	subs	r1, r5, #1
 8000da4:	418d      	sbcs	r5, r1
 8000da6:	2300      	movs	r3, #0
 8000da8:	2600      	movs	r6, #0
 8000daa:	4698      	mov	r8, r3
 8000dac:	4305      	orrs	r5, r0
 8000dae:	e6f7      	b.n	8000ba0 <__aeabi_dadd+0x238>
 8000db0:	0011      	movs	r1, r2
 8000db2:	4665      	mov	r5, ip
 8000db4:	3920      	subs	r1, #32
 8000db6:	40cd      	lsrs	r5, r1
 8000db8:	2a20      	cmp	r2, #32
 8000dba:	d004      	beq.n	8000dc6 <__aeabi_dadd+0x45e>
 8000dbc:	2040      	movs	r0, #64	; 0x40
 8000dbe:	4661      	mov	r1, ip
 8000dc0:	1a82      	subs	r2, r0, r2
 8000dc2:	4091      	lsls	r1, r2
 8000dc4:	430f      	orrs	r7, r1
 8000dc6:	0039      	movs	r1, r7
 8000dc8:	1e4f      	subs	r7, r1, #1
 8000dca:	41b9      	sbcs	r1, r7
 8000dcc:	4329      	orrs	r1, r5
 8000dce:	e60f      	b.n	80009f0 <__aeabi_dadd+0x88>
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	001d      	movs	r5, r3
 8000dd6:	1e6b      	subs	r3, r5, #1
 8000dd8:	419d      	sbcs	r5, r3
 8000dda:	1b7d      	subs	r5, r7, r5
 8000ddc:	42af      	cmp	r7, r5
 8000dde:	419b      	sbcs	r3, r3
 8000de0:	4662      	mov	r2, ip
 8000de2:	425b      	negs	r3, r3
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	4698      	mov	r8, r3
 8000de8:	4654      	mov	r4, sl
 8000dea:	000e      	movs	r6, r1
 8000dec:	e607      	b.n	80009fe <__aeabi_dadd+0x96>
 8000dee:	4648      	mov	r0, r9
 8000df0:	4318      	orrs	r0, r3
 8000df2:	d100      	bne.n	8000df6 <__aeabi_dadd+0x48e>
 8000df4:	e0b3      	b.n	8000f5e <__aeabi_dadd+0x5f6>
 8000df6:	1e50      	subs	r0, r2, #1
 8000df8:	2a01      	cmp	r2, #1
 8000dfa:	d100      	bne.n	8000dfe <__aeabi_dadd+0x496>
 8000dfc:	e10d      	b.n	800101a <__aeabi_dadd+0x6b2>
 8000dfe:	4d8d      	ldr	r5, [pc, #564]	; (8001034 <__aeabi_dadd+0x6cc>)
 8000e00:	42aa      	cmp	r2, r5
 8000e02:	d100      	bne.n	8000e06 <__aeabi_dadd+0x49e>
 8000e04:	e0a5      	b.n	8000f52 <__aeabi_dadd+0x5ea>
 8000e06:	0002      	movs	r2, r0
 8000e08:	e710      	b.n	8000c2c <__aeabi_dadd+0x2c4>
 8000e0a:	0032      	movs	r2, r6
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	2100      	movs	r1, #0
 8000e10:	e644      	b.n	8000a9c <__aeabi_dadd+0x134>
 8000e12:	2120      	movs	r1, #32
 8000e14:	0038      	movs	r0, r7
 8000e16:	1a89      	subs	r1, r1, r2
 8000e18:	4665      	mov	r5, ip
 8000e1a:	408f      	lsls	r7, r1
 8000e1c:	408d      	lsls	r5, r1
 8000e1e:	40d0      	lsrs	r0, r2
 8000e20:	1e79      	subs	r1, r7, #1
 8000e22:	418f      	sbcs	r7, r1
 8000e24:	4305      	orrs	r5, r0
 8000e26:	433d      	orrs	r5, r7
 8000e28:	4667      	mov	r7, ip
 8000e2a:	40d7      	lsrs	r7, r2
 8000e2c:	19db      	adds	r3, r3, r7
 8000e2e:	e794      	b.n	8000d5a <__aeabi_dadd+0x3f2>
 8000e30:	4a80      	ldr	r2, [pc, #512]	; (8001034 <__aeabi_dadd+0x6cc>)
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d100      	bne.n	8000e38 <__aeabi_dadd+0x4d0>
 8000e36:	e0ec      	b.n	8001012 <__aeabi_dadd+0x6aa>
 8000e38:	0039      	movs	r1, r7
 8000e3a:	4449      	add	r1, r9
 8000e3c:	4549      	cmp	r1, r9
 8000e3e:	4192      	sbcs	r2, r2
 8000e40:	4463      	add	r3, ip
 8000e42:	4252      	negs	r2, r2
 8000e44:	189b      	adds	r3, r3, r2
 8000e46:	07dd      	lsls	r5, r3, #31
 8000e48:	0849      	lsrs	r1, r1, #1
 8000e4a:	085b      	lsrs	r3, r3, #1
 8000e4c:	4698      	mov	r8, r3
 8000e4e:	0006      	movs	r6, r0
 8000e50:	430d      	orrs	r5, r1
 8000e52:	e6a5      	b.n	8000ba0 <__aeabi_dadd+0x238>
 8000e54:	464a      	mov	r2, r9
 8000e56:	1abd      	subs	r5, r7, r2
 8000e58:	42af      	cmp	r7, r5
 8000e5a:	4189      	sbcs	r1, r1
 8000e5c:	4662      	mov	r2, ip
 8000e5e:	4249      	negs	r1, r1
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	1a5b      	subs	r3, r3, r1
 8000e64:	4698      	mov	r8, r3
 8000e66:	4654      	mov	r4, sl
 8000e68:	e5d1      	b.n	8000a0e <__aeabi_dadd+0xa6>
 8000e6a:	076c      	lsls	r4, r5, #29
 8000e6c:	08f9      	lsrs	r1, r7, #3
 8000e6e:	4321      	orrs	r1, r4
 8000e70:	08eb      	lsrs	r3, r5, #3
 8000e72:	0004      	movs	r4, r0
 8000e74:	e69d      	b.n	8000bb2 <__aeabi_dadd+0x24a>
 8000e76:	464a      	mov	r2, r9
 8000e78:	431a      	orrs	r2, r3
 8000e7a:	d175      	bne.n	8000f68 <__aeabi_dadd+0x600>
 8000e7c:	4661      	mov	r1, ip
 8000e7e:	4339      	orrs	r1, r7
 8000e80:	d114      	bne.n	8000eac <__aeabi_dadd+0x544>
 8000e82:	2380      	movs	r3, #128	; 0x80
 8000e84:	2400      	movs	r4, #0
 8000e86:	031b      	lsls	r3, r3, #12
 8000e88:	e6bc      	b.n	8000c04 <__aeabi_dadd+0x29c>
 8000e8a:	464a      	mov	r2, r9
 8000e8c:	1bd5      	subs	r5, r2, r7
 8000e8e:	45a9      	cmp	r9, r5
 8000e90:	4189      	sbcs	r1, r1
 8000e92:	4662      	mov	r2, ip
 8000e94:	4249      	negs	r1, r1
 8000e96:	1a9b      	subs	r3, r3, r2
 8000e98:	1a5b      	subs	r3, r3, r1
 8000e9a:	4698      	mov	r8, r3
 8000e9c:	2601      	movs	r6, #1
 8000e9e:	e5ae      	b.n	80009fe <__aeabi_dadd+0x96>
 8000ea0:	464a      	mov	r2, r9
 8000ea2:	08d1      	lsrs	r1, r2, #3
 8000ea4:	075a      	lsls	r2, r3, #29
 8000ea6:	4311      	orrs	r1, r2
 8000ea8:	08db      	lsrs	r3, r3, #3
 8000eaa:	e6a7      	b.n	8000bfc <__aeabi_dadd+0x294>
 8000eac:	4663      	mov	r3, ip
 8000eae:	08f9      	lsrs	r1, r7, #3
 8000eb0:	075a      	lsls	r2, r3, #29
 8000eb2:	4654      	mov	r4, sl
 8000eb4:	4311      	orrs	r1, r2
 8000eb6:	08db      	lsrs	r3, r3, #3
 8000eb8:	e6a0      	b.n	8000bfc <__aeabi_dadd+0x294>
 8000eba:	464a      	mov	r2, r9
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	001d      	movs	r5, r3
 8000ec0:	1e6b      	subs	r3, r5, #1
 8000ec2:	419d      	sbcs	r5, r3
 8000ec4:	e6c7      	b.n	8000c56 <__aeabi_dadd+0x2ee>
 8000ec6:	0014      	movs	r4, r2
 8000ec8:	001e      	movs	r6, r3
 8000eca:	3c20      	subs	r4, #32
 8000ecc:	40e6      	lsrs	r6, r4
 8000ece:	2a20      	cmp	r2, #32
 8000ed0:	d005      	beq.n	8000ede <__aeabi_dadd+0x576>
 8000ed2:	2440      	movs	r4, #64	; 0x40
 8000ed4:	1aa2      	subs	r2, r4, r2
 8000ed6:	4093      	lsls	r3, r2
 8000ed8:	464a      	mov	r2, r9
 8000eda:	431a      	orrs	r2, r3
 8000edc:	4691      	mov	r9, r2
 8000ede:	464d      	mov	r5, r9
 8000ee0:	1e6b      	subs	r3, r5, #1
 8000ee2:	419d      	sbcs	r5, r3
 8000ee4:	4335      	orrs	r5, r6
 8000ee6:	e778      	b.n	8000dda <__aeabi_dadd+0x472>
 8000ee8:	464a      	mov	r2, r9
 8000eea:	431a      	orrs	r2, r3
 8000eec:	d000      	beq.n	8000ef0 <__aeabi_dadd+0x588>
 8000eee:	e66b      	b.n	8000bc8 <__aeabi_dadd+0x260>
 8000ef0:	076b      	lsls	r3, r5, #29
 8000ef2:	08f9      	lsrs	r1, r7, #3
 8000ef4:	4319      	orrs	r1, r3
 8000ef6:	08eb      	lsrs	r3, r5, #3
 8000ef8:	e680      	b.n	8000bfc <__aeabi_dadd+0x294>
 8000efa:	4661      	mov	r1, ip
 8000efc:	4339      	orrs	r1, r7
 8000efe:	d054      	beq.n	8000faa <__aeabi_dadd+0x642>
 8000f00:	4663      	mov	r3, ip
 8000f02:	08f9      	lsrs	r1, r7, #3
 8000f04:	075c      	lsls	r4, r3, #29
 8000f06:	4321      	orrs	r1, r4
 8000f08:	08db      	lsrs	r3, r3, #3
 8000f0a:	0004      	movs	r4, r0
 8000f0c:	e654      	b.n	8000bb8 <__aeabi_dadd+0x250>
 8000f0e:	464a      	mov	r2, r9
 8000f10:	1abd      	subs	r5, r7, r2
 8000f12:	42af      	cmp	r7, r5
 8000f14:	4189      	sbcs	r1, r1
 8000f16:	4662      	mov	r2, ip
 8000f18:	4249      	negs	r1, r1
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	1a5b      	subs	r3, r3, r1
 8000f1e:	4698      	mov	r8, r3
 8000f20:	0004      	movs	r4, r0
 8000f22:	2601      	movs	r6, #1
 8000f24:	e56b      	b.n	80009fe <__aeabi_dadd+0x96>
 8000f26:	464a      	mov	r2, r9
 8000f28:	1bd5      	subs	r5, r2, r7
 8000f2a:	45a9      	cmp	r9, r5
 8000f2c:	4189      	sbcs	r1, r1
 8000f2e:	4662      	mov	r2, ip
 8000f30:	4249      	negs	r1, r1
 8000f32:	1a9a      	subs	r2, r3, r2
 8000f34:	1a52      	subs	r2, r2, r1
 8000f36:	4690      	mov	r8, r2
 8000f38:	0212      	lsls	r2, r2, #8
 8000f3a:	d532      	bpl.n	8000fa2 <__aeabi_dadd+0x63a>
 8000f3c:	464a      	mov	r2, r9
 8000f3e:	1abd      	subs	r5, r7, r2
 8000f40:	42af      	cmp	r7, r5
 8000f42:	4189      	sbcs	r1, r1
 8000f44:	4662      	mov	r2, ip
 8000f46:	4249      	negs	r1, r1
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	1a5b      	subs	r3, r3, r1
 8000f4c:	4698      	mov	r8, r3
 8000f4e:	0004      	movs	r4, r0
 8000f50:	e584      	b.n	8000a5c <__aeabi_dadd+0xf4>
 8000f52:	4663      	mov	r3, ip
 8000f54:	08f9      	lsrs	r1, r7, #3
 8000f56:	075a      	lsls	r2, r3, #29
 8000f58:	4311      	orrs	r1, r2
 8000f5a:	08db      	lsrs	r3, r3, #3
 8000f5c:	e64e      	b.n	8000bfc <__aeabi_dadd+0x294>
 8000f5e:	08f9      	lsrs	r1, r7, #3
 8000f60:	0768      	lsls	r0, r5, #29
 8000f62:	4301      	orrs	r1, r0
 8000f64:	08eb      	lsrs	r3, r5, #3
 8000f66:	e624      	b.n	8000bb2 <__aeabi_dadd+0x24a>
 8000f68:	4662      	mov	r2, ip
 8000f6a:	433a      	orrs	r2, r7
 8000f6c:	d100      	bne.n	8000f70 <__aeabi_dadd+0x608>
 8000f6e:	e698      	b.n	8000ca2 <__aeabi_dadd+0x33a>
 8000f70:	464a      	mov	r2, r9
 8000f72:	08d1      	lsrs	r1, r2, #3
 8000f74:	075a      	lsls	r2, r3, #29
 8000f76:	4311      	orrs	r1, r2
 8000f78:	08da      	lsrs	r2, r3, #3
 8000f7a:	2380      	movs	r3, #128	; 0x80
 8000f7c:	031b      	lsls	r3, r3, #12
 8000f7e:	421a      	tst	r2, r3
 8000f80:	d008      	beq.n	8000f94 <__aeabi_dadd+0x62c>
 8000f82:	4660      	mov	r0, ip
 8000f84:	08c5      	lsrs	r5, r0, #3
 8000f86:	421d      	tst	r5, r3
 8000f88:	d104      	bne.n	8000f94 <__aeabi_dadd+0x62c>
 8000f8a:	4654      	mov	r4, sl
 8000f8c:	002a      	movs	r2, r5
 8000f8e:	08f9      	lsrs	r1, r7, #3
 8000f90:	0743      	lsls	r3, r0, #29
 8000f92:	4319      	orrs	r1, r3
 8000f94:	0f4b      	lsrs	r3, r1, #29
 8000f96:	00c9      	lsls	r1, r1, #3
 8000f98:	075b      	lsls	r3, r3, #29
 8000f9a:	08c9      	lsrs	r1, r1, #3
 8000f9c:	4319      	orrs	r1, r3
 8000f9e:	0013      	movs	r3, r2
 8000fa0:	e62c      	b.n	8000bfc <__aeabi_dadd+0x294>
 8000fa2:	4641      	mov	r1, r8
 8000fa4:	4329      	orrs	r1, r5
 8000fa6:	d000      	beq.n	8000faa <__aeabi_dadd+0x642>
 8000fa8:	e5fa      	b.n	8000ba0 <__aeabi_dadd+0x238>
 8000faa:	2300      	movs	r3, #0
 8000fac:	000a      	movs	r2, r1
 8000fae:	2400      	movs	r4, #0
 8000fb0:	e602      	b.n	8000bb8 <__aeabi_dadd+0x250>
 8000fb2:	076b      	lsls	r3, r5, #29
 8000fb4:	08f9      	lsrs	r1, r7, #3
 8000fb6:	4319      	orrs	r1, r3
 8000fb8:	08eb      	lsrs	r3, r5, #3
 8000fba:	e5fd      	b.n	8000bb8 <__aeabi_dadd+0x250>
 8000fbc:	4663      	mov	r3, ip
 8000fbe:	08f9      	lsrs	r1, r7, #3
 8000fc0:	075b      	lsls	r3, r3, #29
 8000fc2:	4319      	orrs	r1, r3
 8000fc4:	4663      	mov	r3, ip
 8000fc6:	0004      	movs	r4, r0
 8000fc8:	08db      	lsrs	r3, r3, #3
 8000fca:	e617      	b.n	8000bfc <__aeabi_dadd+0x294>
 8000fcc:	003d      	movs	r5, r7
 8000fce:	444d      	add	r5, r9
 8000fd0:	4463      	add	r3, ip
 8000fd2:	454d      	cmp	r5, r9
 8000fd4:	4189      	sbcs	r1, r1
 8000fd6:	4698      	mov	r8, r3
 8000fd8:	4249      	negs	r1, r1
 8000fda:	4488      	add	r8, r1
 8000fdc:	4643      	mov	r3, r8
 8000fde:	021b      	lsls	r3, r3, #8
 8000fe0:	d400      	bmi.n	8000fe4 <__aeabi_dadd+0x67c>
 8000fe2:	e5dd      	b.n	8000ba0 <__aeabi_dadd+0x238>
 8000fe4:	4642      	mov	r2, r8
 8000fe6:	4b14      	ldr	r3, [pc, #80]	; (8001038 <__aeabi_dadd+0x6d0>)
 8000fe8:	2601      	movs	r6, #1
 8000fea:	401a      	ands	r2, r3
 8000fec:	4690      	mov	r8, r2
 8000fee:	e5d7      	b.n	8000ba0 <__aeabi_dadd+0x238>
 8000ff0:	0010      	movs	r0, r2
 8000ff2:	001e      	movs	r6, r3
 8000ff4:	3820      	subs	r0, #32
 8000ff6:	40c6      	lsrs	r6, r0
 8000ff8:	2a20      	cmp	r2, #32
 8000ffa:	d005      	beq.n	8001008 <__aeabi_dadd+0x6a0>
 8000ffc:	2040      	movs	r0, #64	; 0x40
 8000ffe:	1a82      	subs	r2, r0, r2
 8001000:	4093      	lsls	r3, r2
 8001002:	464a      	mov	r2, r9
 8001004:	431a      	orrs	r2, r3
 8001006:	4691      	mov	r9, r2
 8001008:	464d      	mov	r5, r9
 800100a:	1e6b      	subs	r3, r5, #1
 800100c:	419d      	sbcs	r5, r3
 800100e:	4335      	orrs	r5, r6
 8001010:	e621      	b.n	8000c56 <__aeabi_dadd+0x2ee>
 8001012:	0002      	movs	r2, r0
 8001014:	2300      	movs	r3, #0
 8001016:	2100      	movs	r1, #0
 8001018:	e540      	b.n	8000a9c <__aeabi_dadd+0x134>
 800101a:	464a      	mov	r2, r9
 800101c:	19d5      	adds	r5, r2, r7
 800101e:	42bd      	cmp	r5, r7
 8001020:	4189      	sbcs	r1, r1
 8001022:	4463      	add	r3, ip
 8001024:	4698      	mov	r8, r3
 8001026:	4249      	negs	r1, r1
 8001028:	4488      	add	r8, r1
 800102a:	e5b3      	b.n	8000b94 <__aeabi_dadd+0x22c>
 800102c:	2100      	movs	r1, #0
 800102e:	4a01      	ldr	r2, [pc, #4]	; (8001034 <__aeabi_dadd+0x6cc>)
 8001030:	000b      	movs	r3, r1
 8001032:	e533      	b.n	8000a9c <__aeabi_dadd+0x134>
 8001034:	000007ff 	.word	0x000007ff
 8001038:	ff7fffff 	.word	0xff7fffff

0800103c <__aeabi_ddiv>:
 800103c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800103e:	4657      	mov	r7, sl
 8001040:	464e      	mov	r6, r9
 8001042:	4645      	mov	r5, r8
 8001044:	46de      	mov	lr, fp
 8001046:	b5e0      	push	{r5, r6, r7, lr}
 8001048:	4681      	mov	r9, r0
 800104a:	0005      	movs	r5, r0
 800104c:	030c      	lsls	r4, r1, #12
 800104e:	0048      	lsls	r0, r1, #1
 8001050:	4692      	mov	sl, r2
 8001052:	001f      	movs	r7, r3
 8001054:	b085      	sub	sp, #20
 8001056:	0b24      	lsrs	r4, r4, #12
 8001058:	0d40      	lsrs	r0, r0, #21
 800105a:	0fce      	lsrs	r6, r1, #31
 800105c:	2800      	cmp	r0, #0
 800105e:	d059      	beq.n	8001114 <__aeabi_ddiv+0xd8>
 8001060:	4b87      	ldr	r3, [pc, #540]	; (8001280 <__aeabi_ddiv+0x244>)
 8001062:	4298      	cmp	r0, r3
 8001064:	d100      	bne.n	8001068 <__aeabi_ddiv+0x2c>
 8001066:	e098      	b.n	800119a <__aeabi_ddiv+0x15e>
 8001068:	0f6b      	lsrs	r3, r5, #29
 800106a:	00e4      	lsls	r4, r4, #3
 800106c:	431c      	orrs	r4, r3
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	041b      	lsls	r3, r3, #16
 8001072:	4323      	orrs	r3, r4
 8001074:	4698      	mov	r8, r3
 8001076:	4b83      	ldr	r3, [pc, #524]	; (8001284 <__aeabi_ddiv+0x248>)
 8001078:	00ed      	lsls	r5, r5, #3
 800107a:	469b      	mov	fp, r3
 800107c:	2300      	movs	r3, #0
 800107e:	4699      	mov	r9, r3
 8001080:	4483      	add	fp, r0
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	033c      	lsls	r4, r7, #12
 8001086:	007b      	lsls	r3, r7, #1
 8001088:	4650      	mov	r0, sl
 800108a:	0b24      	lsrs	r4, r4, #12
 800108c:	0d5b      	lsrs	r3, r3, #21
 800108e:	0fff      	lsrs	r7, r7, #31
 8001090:	2b00      	cmp	r3, #0
 8001092:	d067      	beq.n	8001164 <__aeabi_ddiv+0x128>
 8001094:	4a7a      	ldr	r2, [pc, #488]	; (8001280 <__aeabi_ddiv+0x244>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d018      	beq.n	80010cc <__aeabi_ddiv+0x90>
 800109a:	497a      	ldr	r1, [pc, #488]	; (8001284 <__aeabi_ddiv+0x248>)
 800109c:	0f42      	lsrs	r2, r0, #29
 800109e:	468c      	mov	ip, r1
 80010a0:	00e4      	lsls	r4, r4, #3
 80010a2:	4659      	mov	r1, fp
 80010a4:	4314      	orrs	r4, r2
 80010a6:	2280      	movs	r2, #128	; 0x80
 80010a8:	4463      	add	r3, ip
 80010aa:	0412      	lsls	r2, r2, #16
 80010ac:	1acb      	subs	r3, r1, r3
 80010ae:	4314      	orrs	r4, r2
 80010b0:	469b      	mov	fp, r3
 80010b2:	00c2      	lsls	r2, r0, #3
 80010b4:	2000      	movs	r0, #0
 80010b6:	0033      	movs	r3, r6
 80010b8:	407b      	eors	r3, r7
 80010ba:	469a      	mov	sl, r3
 80010bc:	464b      	mov	r3, r9
 80010be:	2b0f      	cmp	r3, #15
 80010c0:	d900      	bls.n	80010c4 <__aeabi_ddiv+0x88>
 80010c2:	e0ef      	b.n	80012a4 <__aeabi_ddiv+0x268>
 80010c4:	4970      	ldr	r1, [pc, #448]	; (8001288 <__aeabi_ddiv+0x24c>)
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	58cb      	ldr	r3, [r1, r3]
 80010ca:	469f      	mov	pc, r3
 80010cc:	4b6f      	ldr	r3, [pc, #444]	; (800128c <__aeabi_ddiv+0x250>)
 80010ce:	4652      	mov	r2, sl
 80010d0:	469c      	mov	ip, r3
 80010d2:	4322      	orrs	r2, r4
 80010d4:	44e3      	add	fp, ip
 80010d6:	2a00      	cmp	r2, #0
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0xa0>
 80010da:	e095      	b.n	8001208 <__aeabi_ddiv+0x1cc>
 80010dc:	4649      	mov	r1, r9
 80010de:	2302      	movs	r3, #2
 80010e0:	4319      	orrs	r1, r3
 80010e2:	4689      	mov	r9, r1
 80010e4:	2400      	movs	r4, #0
 80010e6:	2002      	movs	r0, #2
 80010e8:	e7e5      	b.n	80010b6 <__aeabi_ddiv+0x7a>
 80010ea:	2300      	movs	r3, #0
 80010ec:	2400      	movs	r4, #0
 80010ee:	2500      	movs	r5, #0
 80010f0:	4652      	mov	r2, sl
 80010f2:	051b      	lsls	r3, r3, #20
 80010f4:	4323      	orrs	r3, r4
 80010f6:	07d2      	lsls	r2, r2, #31
 80010f8:	4313      	orrs	r3, r2
 80010fa:	0028      	movs	r0, r5
 80010fc:	0019      	movs	r1, r3
 80010fe:	b005      	add	sp, #20
 8001100:	bcf0      	pop	{r4, r5, r6, r7}
 8001102:	46bb      	mov	fp, r7
 8001104:	46b2      	mov	sl, r6
 8001106:	46a9      	mov	r9, r5
 8001108:	46a0      	mov	r8, r4
 800110a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800110c:	2400      	movs	r4, #0
 800110e:	2500      	movs	r5, #0
 8001110:	4b5b      	ldr	r3, [pc, #364]	; (8001280 <__aeabi_ddiv+0x244>)
 8001112:	e7ed      	b.n	80010f0 <__aeabi_ddiv+0xb4>
 8001114:	464b      	mov	r3, r9
 8001116:	4323      	orrs	r3, r4
 8001118:	4698      	mov	r8, r3
 800111a:	d100      	bne.n	800111e <__aeabi_ddiv+0xe2>
 800111c:	e089      	b.n	8001232 <__aeabi_ddiv+0x1f6>
 800111e:	2c00      	cmp	r4, #0
 8001120:	d100      	bne.n	8001124 <__aeabi_ddiv+0xe8>
 8001122:	e1e0      	b.n	80014e6 <__aeabi_ddiv+0x4aa>
 8001124:	0020      	movs	r0, r4
 8001126:	f001 fa7f 	bl	8002628 <__clzsi2>
 800112a:	0001      	movs	r1, r0
 800112c:	0002      	movs	r2, r0
 800112e:	390b      	subs	r1, #11
 8001130:	231d      	movs	r3, #29
 8001132:	1a5b      	subs	r3, r3, r1
 8001134:	4649      	mov	r1, r9
 8001136:	0010      	movs	r0, r2
 8001138:	40d9      	lsrs	r1, r3
 800113a:	3808      	subs	r0, #8
 800113c:	4084      	lsls	r4, r0
 800113e:	000b      	movs	r3, r1
 8001140:	464d      	mov	r5, r9
 8001142:	4323      	orrs	r3, r4
 8001144:	4698      	mov	r8, r3
 8001146:	4085      	lsls	r5, r0
 8001148:	4851      	ldr	r0, [pc, #324]	; (8001290 <__aeabi_ddiv+0x254>)
 800114a:	033c      	lsls	r4, r7, #12
 800114c:	1a83      	subs	r3, r0, r2
 800114e:	469b      	mov	fp, r3
 8001150:	2300      	movs	r3, #0
 8001152:	4699      	mov	r9, r3
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	007b      	lsls	r3, r7, #1
 8001158:	4650      	mov	r0, sl
 800115a:	0b24      	lsrs	r4, r4, #12
 800115c:	0d5b      	lsrs	r3, r3, #21
 800115e:	0fff      	lsrs	r7, r7, #31
 8001160:	2b00      	cmp	r3, #0
 8001162:	d197      	bne.n	8001094 <__aeabi_ddiv+0x58>
 8001164:	4652      	mov	r2, sl
 8001166:	4322      	orrs	r2, r4
 8001168:	d055      	beq.n	8001216 <__aeabi_ddiv+0x1da>
 800116a:	2c00      	cmp	r4, #0
 800116c:	d100      	bne.n	8001170 <__aeabi_ddiv+0x134>
 800116e:	e1ca      	b.n	8001506 <__aeabi_ddiv+0x4ca>
 8001170:	0020      	movs	r0, r4
 8001172:	f001 fa59 	bl	8002628 <__clzsi2>
 8001176:	0002      	movs	r2, r0
 8001178:	3a0b      	subs	r2, #11
 800117a:	231d      	movs	r3, #29
 800117c:	0001      	movs	r1, r0
 800117e:	1a9b      	subs	r3, r3, r2
 8001180:	4652      	mov	r2, sl
 8001182:	3908      	subs	r1, #8
 8001184:	40da      	lsrs	r2, r3
 8001186:	408c      	lsls	r4, r1
 8001188:	4314      	orrs	r4, r2
 800118a:	4652      	mov	r2, sl
 800118c:	408a      	lsls	r2, r1
 800118e:	4b41      	ldr	r3, [pc, #260]	; (8001294 <__aeabi_ddiv+0x258>)
 8001190:	4458      	add	r0, fp
 8001192:	469b      	mov	fp, r3
 8001194:	4483      	add	fp, r0
 8001196:	2000      	movs	r0, #0
 8001198:	e78d      	b.n	80010b6 <__aeabi_ddiv+0x7a>
 800119a:	464b      	mov	r3, r9
 800119c:	4323      	orrs	r3, r4
 800119e:	4698      	mov	r8, r3
 80011a0:	d140      	bne.n	8001224 <__aeabi_ddiv+0x1e8>
 80011a2:	2308      	movs	r3, #8
 80011a4:	4699      	mov	r9, r3
 80011a6:	3b06      	subs	r3, #6
 80011a8:	2500      	movs	r5, #0
 80011aa:	4683      	mov	fp, r0
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	e769      	b.n	8001084 <__aeabi_ddiv+0x48>
 80011b0:	46b2      	mov	sl, r6
 80011b2:	9b00      	ldr	r3, [sp, #0]
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d0a9      	beq.n	800110c <__aeabi_ddiv+0xd0>
 80011b8:	2b03      	cmp	r3, #3
 80011ba:	d100      	bne.n	80011be <__aeabi_ddiv+0x182>
 80011bc:	e211      	b.n	80015e2 <__aeabi_ddiv+0x5a6>
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d093      	beq.n	80010ea <__aeabi_ddiv+0xae>
 80011c2:	4a35      	ldr	r2, [pc, #212]	; (8001298 <__aeabi_ddiv+0x25c>)
 80011c4:	445a      	add	r2, fp
 80011c6:	2a00      	cmp	r2, #0
 80011c8:	dc00      	bgt.n	80011cc <__aeabi_ddiv+0x190>
 80011ca:	e13c      	b.n	8001446 <__aeabi_ddiv+0x40a>
 80011cc:	076b      	lsls	r3, r5, #29
 80011ce:	d000      	beq.n	80011d2 <__aeabi_ddiv+0x196>
 80011d0:	e1a7      	b.n	8001522 <__aeabi_ddiv+0x4e6>
 80011d2:	08ed      	lsrs	r5, r5, #3
 80011d4:	4643      	mov	r3, r8
 80011d6:	01db      	lsls	r3, r3, #7
 80011d8:	d506      	bpl.n	80011e8 <__aeabi_ddiv+0x1ac>
 80011da:	4642      	mov	r2, r8
 80011dc:	4b2f      	ldr	r3, [pc, #188]	; (800129c <__aeabi_ddiv+0x260>)
 80011de:	401a      	ands	r2, r3
 80011e0:	4690      	mov	r8, r2
 80011e2:	2280      	movs	r2, #128	; 0x80
 80011e4:	00d2      	lsls	r2, r2, #3
 80011e6:	445a      	add	r2, fp
 80011e8:	4b2d      	ldr	r3, [pc, #180]	; (80012a0 <__aeabi_ddiv+0x264>)
 80011ea:	429a      	cmp	r2, r3
 80011ec:	dc8e      	bgt.n	800110c <__aeabi_ddiv+0xd0>
 80011ee:	4643      	mov	r3, r8
 80011f0:	0552      	lsls	r2, r2, #21
 80011f2:	0758      	lsls	r0, r3, #29
 80011f4:	025c      	lsls	r4, r3, #9
 80011f6:	4305      	orrs	r5, r0
 80011f8:	0b24      	lsrs	r4, r4, #12
 80011fa:	0d53      	lsrs	r3, r2, #21
 80011fc:	e778      	b.n	80010f0 <__aeabi_ddiv+0xb4>
 80011fe:	46ba      	mov	sl, r7
 8001200:	46a0      	mov	r8, r4
 8001202:	0015      	movs	r5, r2
 8001204:	9000      	str	r0, [sp, #0]
 8001206:	e7d4      	b.n	80011b2 <__aeabi_ddiv+0x176>
 8001208:	464a      	mov	r2, r9
 800120a:	2303      	movs	r3, #3
 800120c:	431a      	orrs	r2, r3
 800120e:	4691      	mov	r9, r2
 8001210:	2003      	movs	r0, #3
 8001212:	4652      	mov	r2, sl
 8001214:	e74f      	b.n	80010b6 <__aeabi_ddiv+0x7a>
 8001216:	4649      	mov	r1, r9
 8001218:	2301      	movs	r3, #1
 800121a:	4319      	orrs	r1, r3
 800121c:	4689      	mov	r9, r1
 800121e:	2400      	movs	r4, #0
 8001220:	2001      	movs	r0, #1
 8001222:	e748      	b.n	80010b6 <__aeabi_ddiv+0x7a>
 8001224:	230c      	movs	r3, #12
 8001226:	4699      	mov	r9, r3
 8001228:	3b09      	subs	r3, #9
 800122a:	46a0      	mov	r8, r4
 800122c:	4683      	mov	fp, r0
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	e728      	b.n	8001084 <__aeabi_ddiv+0x48>
 8001232:	2304      	movs	r3, #4
 8001234:	4699      	mov	r9, r3
 8001236:	2300      	movs	r3, #0
 8001238:	469b      	mov	fp, r3
 800123a:	3301      	adds	r3, #1
 800123c:	2500      	movs	r5, #0
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	e720      	b.n	8001084 <__aeabi_ddiv+0x48>
 8001242:	2300      	movs	r3, #0
 8001244:	2480      	movs	r4, #128	; 0x80
 8001246:	469a      	mov	sl, r3
 8001248:	2500      	movs	r5, #0
 800124a:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <__aeabi_ddiv+0x244>)
 800124c:	0324      	lsls	r4, r4, #12
 800124e:	e74f      	b.n	80010f0 <__aeabi_ddiv+0xb4>
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	4641      	mov	r1, r8
 8001254:	031b      	lsls	r3, r3, #12
 8001256:	4219      	tst	r1, r3
 8001258:	d008      	beq.n	800126c <__aeabi_ddiv+0x230>
 800125a:	421c      	tst	r4, r3
 800125c:	d106      	bne.n	800126c <__aeabi_ddiv+0x230>
 800125e:	431c      	orrs	r4, r3
 8001260:	0324      	lsls	r4, r4, #12
 8001262:	46ba      	mov	sl, r7
 8001264:	0015      	movs	r5, r2
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <__aeabi_ddiv+0x244>)
 8001268:	0b24      	lsrs	r4, r4, #12
 800126a:	e741      	b.n	80010f0 <__aeabi_ddiv+0xb4>
 800126c:	2480      	movs	r4, #128	; 0x80
 800126e:	4643      	mov	r3, r8
 8001270:	0324      	lsls	r4, r4, #12
 8001272:	431c      	orrs	r4, r3
 8001274:	0324      	lsls	r4, r4, #12
 8001276:	46b2      	mov	sl, r6
 8001278:	4b01      	ldr	r3, [pc, #4]	; (8001280 <__aeabi_ddiv+0x244>)
 800127a:	0b24      	lsrs	r4, r4, #12
 800127c:	e738      	b.n	80010f0 <__aeabi_ddiv+0xb4>
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	000007ff 	.word	0x000007ff
 8001284:	fffffc01 	.word	0xfffffc01
 8001288:	08008bb4 	.word	0x08008bb4
 800128c:	fffff801 	.word	0xfffff801
 8001290:	fffffc0d 	.word	0xfffffc0d
 8001294:	000003f3 	.word	0x000003f3
 8001298:	000003ff 	.word	0x000003ff
 800129c:	feffffff 	.word	0xfeffffff
 80012a0:	000007fe 	.word	0x000007fe
 80012a4:	4544      	cmp	r4, r8
 80012a6:	d200      	bcs.n	80012aa <__aeabi_ddiv+0x26e>
 80012a8:	e116      	b.n	80014d8 <__aeabi_ddiv+0x49c>
 80012aa:	d100      	bne.n	80012ae <__aeabi_ddiv+0x272>
 80012ac:	e111      	b.n	80014d2 <__aeabi_ddiv+0x496>
 80012ae:	2301      	movs	r3, #1
 80012b0:	425b      	negs	r3, r3
 80012b2:	469c      	mov	ip, r3
 80012b4:	002e      	movs	r6, r5
 80012b6:	4640      	mov	r0, r8
 80012b8:	2500      	movs	r5, #0
 80012ba:	44e3      	add	fp, ip
 80012bc:	0223      	lsls	r3, r4, #8
 80012be:	0e14      	lsrs	r4, r2, #24
 80012c0:	431c      	orrs	r4, r3
 80012c2:	0c1b      	lsrs	r3, r3, #16
 80012c4:	4699      	mov	r9, r3
 80012c6:	0423      	lsls	r3, r4, #16
 80012c8:	0c1f      	lsrs	r7, r3, #16
 80012ca:	0212      	lsls	r2, r2, #8
 80012cc:	4649      	mov	r1, r9
 80012ce:	9200      	str	r2, [sp, #0]
 80012d0:	9701      	str	r7, [sp, #4]
 80012d2:	f7fe ffb9 	bl	8000248 <__aeabi_uidivmod>
 80012d6:	0002      	movs	r2, r0
 80012d8:	437a      	muls	r2, r7
 80012da:	040b      	lsls	r3, r1, #16
 80012dc:	0c31      	lsrs	r1, r6, #16
 80012de:	4680      	mov	r8, r0
 80012e0:	4319      	orrs	r1, r3
 80012e2:	428a      	cmp	r2, r1
 80012e4:	d90b      	bls.n	80012fe <__aeabi_ddiv+0x2c2>
 80012e6:	2301      	movs	r3, #1
 80012e8:	425b      	negs	r3, r3
 80012ea:	469c      	mov	ip, r3
 80012ec:	1909      	adds	r1, r1, r4
 80012ee:	44e0      	add	r8, ip
 80012f0:	428c      	cmp	r4, r1
 80012f2:	d804      	bhi.n	80012fe <__aeabi_ddiv+0x2c2>
 80012f4:	428a      	cmp	r2, r1
 80012f6:	d902      	bls.n	80012fe <__aeabi_ddiv+0x2c2>
 80012f8:	1e83      	subs	r3, r0, #2
 80012fa:	4698      	mov	r8, r3
 80012fc:	1909      	adds	r1, r1, r4
 80012fe:	1a88      	subs	r0, r1, r2
 8001300:	4649      	mov	r1, r9
 8001302:	f7fe ffa1 	bl	8000248 <__aeabi_uidivmod>
 8001306:	0409      	lsls	r1, r1, #16
 8001308:	468c      	mov	ip, r1
 800130a:	0431      	lsls	r1, r6, #16
 800130c:	4666      	mov	r6, ip
 800130e:	9a01      	ldr	r2, [sp, #4]
 8001310:	0c09      	lsrs	r1, r1, #16
 8001312:	4342      	muls	r2, r0
 8001314:	0003      	movs	r3, r0
 8001316:	4331      	orrs	r1, r6
 8001318:	428a      	cmp	r2, r1
 800131a:	d904      	bls.n	8001326 <__aeabi_ddiv+0x2ea>
 800131c:	1909      	adds	r1, r1, r4
 800131e:	3b01      	subs	r3, #1
 8001320:	428c      	cmp	r4, r1
 8001322:	d800      	bhi.n	8001326 <__aeabi_ddiv+0x2ea>
 8001324:	e111      	b.n	800154a <__aeabi_ddiv+0x50e>
 8001326:	1a89      	subs	r1, r1, r2
 8001328:	4642      	mov	r2, r8
 800132a:	9e00      	ldr	r6, [sp, #0]
 800132c:	0412      	lsls	r2, r2, #16
 800132e:	431a      	orrs	r2, r3
 8001330:	0c33      	lsrs	r3, r6, #16
 8001332:	001f      	movs	r7, r3
 8001334:	0c10      	lsrs	r0, r2, #16
 8001336:	4690      	mov	r8, r2
 8001338:	9302      	str	r3, [sp, #8]
 800133a:	0413      	lsls	r3, r2, #16
 800133c:	0432      	lsls	r2, r6, #16
 800133e:	0c16      	lsrs	r6, r2, #16
 8001340:	0032      	movs	r2, r6
 8001342:	0c1b      	lsrs	r3, r3, #16
 8001344:	435a      	muls	r2, r3
 8001346:	9603      	str	r6, [sp, #12]
 8001348:	437b      	muls	r3, r7
 800134a:	4346      	muls	r6, r0
 800134c:	4378      	muls	r0, r7
 800134e:	0c17      	lsrs	r7, r2, #16
 8001350:	46bc      	mov	ip, r7
 8001352:	199b      	adds	r3, r3, r6
 8001354:	4463      	add	r3, ip
 8001356:	429e      	cmp	r6, r3
 8001358:	d903      	bls.n	8001362 <__aeabi_ddiv+0x326>
 800135a:	2680      	movs	r6, #128	; 0x80
 800135c:	0276      	lsls	r6, r6, #9
 800135e:	46b4      	mov	ip, r6
 8001360:	4460      	add	r0, ip
 8001362:	0c1e      	lsrs	r6, r3, #16
 8001364:	1830      	adds	r0, r6, r0
 8001366:	0416      	lsls	r6, r2, #16
 8001368:	041b      	lsls	r3, r3, #16
 800136a:	0c36      	lsrs	r6, r6, #16
 800136c:	199e      	adds	r6, r3, r6
 800136e:	4281      	cmp	r1, r0
 8001370:	d200      	bcs.n	8001374 <__aeabi_ddiv+0x338>
 8001372:	e09c      	b.n	80014ae <__aeabi_ddiv+0x472>
 8001374:	d100      	bne.n	8001378 <__aeabi_ddiv+0x33c>
 8001376:	e097      	b.n	80014a8 <__aeabi_ddiv+0x46c>
 8001378:	1bae      	subs	r6, r5, r6
 800137a:	1a09      	subs	r1, r1, r0
 800137c:	42b5      	cmp	r5, r6
 800137e:	4180      	sbcs	r0, r0
 8001380:	4240      	negs	r0, r0
 8001382:	1a08      	subs	r0, r1, r0
 8001384:	4284      	cmp	r4, r0
 8001386:	d100      	bne.n	800138a <__aeabi_ddiv+0x34e>
 8001388:	e111      	b.n	80015ae <__aeabi_ddiv+0x572>
 800138a:	4649      	mov	r1, r9
 800138c:	f7fe ff5c 	bl	8000248 <__aeabi_uidivmod>
 8001390:	9a01      	ldr	r2, [sp, #4]
 8001392:	040b      	lsls	r3, r1, #16
 8001394:	4342      	muls	r2, r0
 8001396:	0c31      	lsrs	r1, r6, #16
 8001398:	0005      	movs	r5, r0
 800139a:	4319      	orrs	r1, r3
 800139c:	428a      	cmp	r2, r1
 800139e:	d907      	bls.n	80013b0 <__aeabi_ddiv+0x374>
 80013a0:	1909      	adds	r1, r1, r4
 80013a2:	3d01      	subs	r5, #1
 80013a4:	428c      	cmp	r4, r1
 80013a6:	d803      	bhi.n	80013b0 <__aeabi_ddiv+0x374>
 80013a8:	428a      	cmp	r2, r1
 80013aa:	d901      	bls.n	80013b0 <__aeabi_ddiv+0x374>
 80013ac:	1e85      	subs	r5, r0, #2
 80013ae:	1909      	adds	r1, r1, r4
 80013b0:	1a88      	subs	r0, r1, r2
 80013b2:	4649      	mov	r1, r9
 80013b4:	f7fe ff48 	bl	8000248 <__aeabi_uidivmod>
 80013b8:	0409      	lsls	r1, r1, #16
 80013ba:	468c      	mov	ip, r1
 80013bc:	0431      	lsls	r1, r6, #16
 80013be:	4666      	mov	r6, ip
 80013c0:	9a01      	ldr	r2, [sp, #4]
 80013c2:	0c09      	lsrs	r1, r1, #16
 80013c4:	4342      	muls	r2, r0
 80013c6:	0003      	movs	r3, r0
 80013c8:	4331      	orrs	r1, r6
 80013ca:	428a      	cmp	r2, r1
 80013cc:	d907      	bls.n	80013de <__aeabi_ddiv+0x3a2>
 80013ce:	1909      	adds	r1, r1, r4
 80013d0:	3b01      	subs	r3, #1
 80013d2:	428c      	cmp	r4, r1
 80013d4:	d803      	bhi.n	80013de <__aeabi_ddiv+0x3a2>
 80013d6:	428a      	cmp	r2, r1
 80013d8:	d901      	bls.n	80013de <__aeabi_ddiv+0x3a2>
 80013da:	1e83      	subs	r3, r0, #2
 80013dc:	1909      	adds	r1, r1, r4
 80013de:	9e03      	ldr	r6, [sp, #12]
 80013e0:	1a89      	subs	r1, r1, r2
 80013e2:	0032      	movs	r2, r6
 80013e4:	042d      	lsls	r5, r5, #16
 80013e6:	431d      	orrs	r5, r3
 80013e8:	9f02      	ldr	r7, [sp, #8]
 80013ea:	042b      	lsls	r3, r5, #16
 80013ec:	0c1b      	lsrs	r3, r3, #16
 80013ee:	435a      	muls	r2, r3
 80013f0:	437b      	muls	r3, r7
 80013f2:	469c      	mov	ip, r3
 80013f4:	0c28      	lsrs	r0, r5, #16
 80013f6:	4346      	muls	r6, r0
 80013f8:	0c13      	lsrs	r3, r2, #16
 80013fa:	44b4      	add	ip, r6
 80013fc:	4463      	add	r3, ip
 80013fe:	4378      	muls	r0, r7
 8001400:	429e      	cmp	r6, r3
 8001402:	d903      	bls.n	800140c <__aeabi_ddiv+0x3d0>
 8001404:	2680      	movs	r6, #128	; 0x80
 8001406:	0276      	lsls	r6, r6, #9
 8001408:	46b4      	mov	ip, r6
 800140a:	4460      	add	r0, ip
 800140c:	0c1e      	lsrs	r6, r3, #16
 800140e:	0412      	lsls	r2, r2, #16
 8001410:	041b      	lsls	r3, r3, #16
 8001412:	0c12      	lsrs	r2, r2, #16
 8001414:	1830      	adds	r0, r6, r0
 8001416:	189b      	adds	r3, r3, r2
 8001418:	4281      	cmp	r1, r0
 800141a:	d306      	bcc.n	800142a <__aeabi_ddiv+0x3ee>
 800141c:	d002      	beq.n	8001424 <__aeabi_ddiv+0x3e8>
 800141e:	2301      	movs	r3, #1
 8001420:	431d      	orrs	r5, r3
 8001422:	e6ce      	b.n	80011c2 <__aeabi_ddiv+0x186>
 8001424:	2b00      	cmp	r3, #0
 8001426:	d100      	bne.n	800142a <__aeabi_ddiv+0x3ee>
 8001428:	e6cb      	b.n	80011c2 <__aeabi_ddiv+0x186>
 800142a:	1861      	adds	r1, r4, r1
 800142c:	1e6e      	subs	r6, r5, #1
 800142e:	42a1      	cmp	r1, r4
 8001430:	d200      	bcs.n	8001434 <__aeabi_ddiv+0x3f8>
 8001432:	e0a4      	b.n	800157e <__aeabi_ddiv+0x542>
 8001434:	4281      	cmp	r1, r0
 8001436:	d200      	bcs.n	800143a <__aeabi_ddiv+0x3fe>
 8001438:	e0c9      	b.n	80015ce <__aeabi_ddiv+0x592>
 800143a:	d100      	bne.n	800143e <__aeabi_ddiv+0x402>
 800143c:	e0d9      	b.n	80015f2 <__aeabi_ddiv+0x5b6>
 800143e:	0035      	movs	r5, r6
 8001440:	e7ed      	b.n	800141e <__aeabi_ddiv+0x3e2>
 8001442:	2501      	movs	r5, #1
 8001444:	426d      	negs	r5, r5
 8001446:	2101      	movs	r1, #1
 8001448:	1a89      	subs	r1, r1, r2
 800144a:	2938      	cmp	r1, #56	; 0x38
 800144c:	dd00      	ble.n	8001450 <__aeabi_ddiv+0x414>
 800144e:	e64c      	b.n	80010ea <__aeabi_ddiv+0xae>
 8001450:	291f      	cmp	r1, #31
 8001452:	dc00      	bgt.n	8001456 <__aeabi_ddiv+0x41a>
 8001454:	e07f      	b.n	8001556 <__aeabi_ddiv+0x51a>
 8001456:	231f      	movs	r3, #31
 8001458:	425b      	negs	r3, r3
 800145a:	1a9a      	subs	r2, r3, r2
 800145c:	4643      	mov	r3, r8
 800145e:	40d3      	lsrs	r3, r2
 8001460:	2920      	cmp	r1, #32
 8001462:	d004      	beq.n	800146e <__aeabi_ddiv+0x432>
 8001464:	4644      	mov	r4, r8
 8001466:	4a65      	ldr	r2, [pc, #404]	; (80015fc <__aeabi_ddiv+0x5c0>)
 8001468:	445a      	add	r2, fp
 800146a:	4094      	lsls	r4, r2
 800146c:	4325      	orrs	r5, r4
 800146e:	1e6a      	subs	r2, r5, #1
 8001470:	4195      	sbcs	r5, r2
 8001472:	2207      	movs	r2, #7
 8001474:	432b      	orrs	r3, r5
 8001476:	0015      	movs	r5, r2
 8001478:	2400      	movs	r4, #0
 800147a:	401d      	ands	r5, r3
 800147c:	421a      	tst	r2, r3
 800147e:	d100      	bne.n	8001482 <__aeabi_ddiv+0x446>
 8001480:	e0a1      	b.n	80015c6 <__aeabi_ddiv+0x58a>
 8001482:	220f      	movs	r2, #15
 8001484:	2400      	movs	r4, #0
 8001486:	401a      	ands	r2, r3
 8001488:	2a04      	cmp	r2, #4
 800148a:	d100      	bne.n	800148e <__aeabi_ddiv+0x452>
 800148c:	e098      	b.n	80015c0 <__aeabi_ddiv+0x584>
 800148e:	1d1a      	adds	r2, r3, #4
 8001490:	429a      	cmp	r2, r3
 8001492:	419b      	sbcs	r3, r3
 8001494:	425b      	negs	r3, r3
 8001496:	18e4      	adds	r4, r4, r3
 8001498:	0013      	movs	r3, r2
 800149a:	0222      	lsls	r2, r4, #8
 800149c:	d400      	bmi.n	80014a0 <__aeabi_ddiv+0x464>
 800149e:	e08f      	b.n	80015c0 <__aeabi_ddiv+0x584>
 80014a0:	2301      	movs	r3, #1
 80014a2:	2400      	movs	r4, #0
 80014a4:	2500      	movs	r5, #0
 80014a6:	e623      	b.n	80010f0 <__aeabi_ddiv+0xb4>
 80014a8:	42b5      	cmp	r5, r6
 80014aa:	d300      	bcc.n	80014ae <__aeabi_ddiv+0x472>
 80014ac:	e764      	b.n	8001378 <__aeabi_ddiv+0x33c>
 80014ae:	4643      	mov	r3, r8
 80014b0:	1e5a      	subs	r2, r3, #1
 80014b2:	9b00      	ldr	r3, [sp, #0]
 80014b4:	469c      	mov	ip, r3
 80014b6:	4465      	add	r5, ip
 80014b8:	001f      	movs	r7, r3
 80014ba:	429d      	cmp	r5, r3
 80014bc:	419b      	sbcs	r3, r3
 80014be:	425b      	negs	r3, r3
 80014c0:	191b      	adds	r3, r3, r4
 80014c2:	18c9      	adds	r1, r1, r3
 80014c4:	428c      	cmp	r4, r1
 80014c6:	d23a      	bcs.n	800153e <__aeabi_ddiv+0x502>
 80014c8:	4288      	cmp	r0, r1
 80014ca:	d863      	bhi.n	8001594 <__aeabi_ddiv+0x558>
 80014cc:	d060      	beq.n	8001590 <__aeabi_ddiv+0x554>
 80014ce:	4690      	mov	r8, r2
 80014d0:	e752      	b.n	8001378 <__aeabi_ddiv+0x33c>
 80014d2:	42aa      	cmp	r2, r5
 80014d4:	d900      	bls.n	80014d8 <__aeabi_ddiv+0x49c>
 80014d6:	e6ea      	b.n	80012ae <__aeabi_ddiv+0x272>
 80014d8:	4643      	mov	r3, r8
 80014da:	07de      	lsls	r6, r3, #31
 80014dc:	0858      	lsrs	r0, r3, #1
 80014de:	086b      	lsrs	r3, r5, #1
 80014e0:	431e      	orrs	r6, r3
 80014e2:	07ed      	lsls	r5, r5, #31
 80014e4:	e6ea      	b.n	80012bc <__aeabi_ddiv+0x280>
 80014e6:	4648      	mov	r0, r9
 80014e8:	f001 f89e 	bl	8002628 <__clzsi2>
 80014ec:	0001      	movs	r1, r0
 80014ee:	0002      	movs	r2, r0
 80014f0:	3115      	adds	r1, #21
 80014f2:	3220      	adds	r2, #32
 80014f4:	291c      	cmp	r1, #28
 80014f6:	dc00      	bgt.n	80014fa <__aeabi_ddiv+0x4be>
 80014f8:	e61a      	b.n	8001130 <__aeabi_ddiv+0xf4>
 80014fa:	464b      	mov	r3, r9
 80014fc:	3808      	subs	r0, #8
 80014fe:	4083      	lsls	r3, r0
 8001500:	2500      	movs	r5, #0
 8001502:	4698      	mov	r8, r3
 8001504:	e620      	b.n	8001148 <__aeabi_ddiv+0x10c>
 8001506:	f001 f88f 	bl	8002628 <__clzsi2>
 800150a:	0003      	movs	r3, r0
 800150c:	001a      	movs	r2, r3
 800150e:	3215      	adds	r2, #21
 8001510:	3020      	adds	r0, #32
 8001512:	2a1c      	cmp	r2, #28
 8001514:	dc00      	bgt.n	8001518 <__aeabi_ddiv+0x4dc>
 8001516:	e630      	b.n	800117a <__aeabi_ddiv+0x13e>
 8001518:	4654      	mov	r4, sl
 800151a:	3b08      	subs	r3, #8
 800151c:	2200      	movs	r2, #0
 800151e:	409c      	lsls	r4, r3
 8001520:	e635      	b.n	800118e <__aeabi_ddiv+0x152>
 8001522:	230f      	movs	r3, #15
 8001524:	402b      	ands	r3, r5
 8001526:	2b04      	cmp	r3, #4
 8001528:	d100      	bne.n	800152c <__aeabi_ddiv+0x4f0>
 800152a:	e652      	b.n	80011d2 <__aeabi_ddiv+0x196>
 800152c:	2305      	movs	r3, #5
 800152e:	425b      	negs	r3, r3
 8001530:	42ab      	cmp	r3, r5
 8001532:	419b      	sbcs	r3, r3
 8001534:	3504      	adds	r5, #4
 8001536:	425b      	negs	r3, r3
 8001538:	08ed      	lsrs	r5, r5, #3
 800153a:	4498      	add	r8, r3
 800153c:	e64a      	b.n	80011d4 <__aeabi_ddiv+0x198>
 800153e:	428c      	cmp	r4, r1
 8001540:	d1c5      	bne.n	80014ce <__aeabi_ddiv+0x492>
 8001542:	42af      	cmp	r7, r5
 8001544:	d9c0      	bls.n	80014c8 <__aeabi_ddiv+0x48c>
 8001546:	4690      	mov	r8, r2
 8001548:	e716      	b.n	8001378 <__aeabi_ddiv+0x33c>
 800154a:	428a      	cmp	r2, r1
 800154c:	d800      	bhi.n	8001550 <__aeabi_ddiv+0x514>
 800154e:	e6ea      	b.n	8001326 <__aeabi_ddiv+0x2ea>
 8001550:	1e83      	subs	r3, r0, #2
 8001552:	1909      	adds	r1, r1, r4
 8001554:	e6e7      	b.n	8001326 <__aeabi_ddiv+0x2ea>
 8001556:	4a2a      	ldr	r2, [pc, #168]	; (8001600 <__aeabi_ddiv+0x5c4>)
 8001558:	0028      	movs	r0, r5
 800155a:	445a      	add	r2, fp
 800155c:	4643      	mov	r3, r8
 800155e:	4095      	lsls	r5, r2
 8001560:	4093      	lsls	r3, r2
 8001562:	40c8      	lsrs	r0, r1
 8001564:	1e6a      	subs	r2, r5, #1
 8001566:	4195      	sbcs	r5, r2
 8001568:	4644      	mov	r4, r8
 800156a:	4303      	orrs	r3, r0
 800156c:	432b      	orrs	r3, r5
 800156e:	40cc      	lsrs	r4, r1
 8001570:	075a      	lsls	r2, r3, #29
 8001572:	d092      	beq.n	800149a <__aeabi_ddiv+0x45e>
 8001574:	220f      	movs	r2, #15
 8001576:	401a      	ands	r2, r3
 8001578:	2a04      	cmp	r2, #4
 800157a:	d188      	bne.n	800148e <__aeabi_ddiv+0x452>
 800157c:	e78d      	b.n	800149a <__aeabi_ddiv+0x45e>
 800157e:	0035      	movs	r5, r6
 8001580:	4281      	cmp	r1, r0
 8001582:	d000      	beq.n	8001586 <__aeabi_ddiv+0x54a>
 8001584:	e74b      	b.n	800141e <__aeabi_ddiv+0x3e2>
 8001586:	9a00      	ldr	r2, [sp, #0]
 8001588:	4293      	cmp	r3, r2
 800158a:	d000      	beq.n	800158e <__aeabi_ddiv+0x552>
 800158c:	e747      	b.n	800141e <__aeabi_ddiv+0x3e2>
 800158e:	e618      	b.n	80011c2 <__aeabi_ddiv+0x186>
 8001590:	42ae      	cmp	r6, r5
 8001592:	d99c      	bls.n	80014ce <__aeabi_ddiv+0x492>
 8001594:	2302      	movs	r3, #2
 8001596:	425b      	negs	r3, r3
 8001598:	469c      	mov	ip, r3
 800159a:	9b00      	ldr	r3, [sp, #0]
 800159c:	44e0      	add	r8, ip
 800159e:	469c      	mov	ip, r3
 80015a0:	4465      	add	r5, ip
 80015a2:	429d      	cmp	r5, r3
 80015a4:	419b      	sbcs	r3, r3
 80015a6:	425b      	negs	r3, r3
 80015a8:	191b      	adds	r3, r3, r4
 80015aa:	18c9      	adds	r1, r1, r3
 80015ac:	e6e4      	b.n	8001378 <__aeabi_ddiv+0x33c>
 80015ae:	4a15      	ldr	r2, [pc, #84]	; (8001604 <__aeabi_ddiv+0x5c8>)
 80015b0:	445a      	add	r2, fp
 80015b2:	2a00      	cmp	r2, #0
 80015b4:	dc00      	bgt.n	80015b8 <__aeabi_ddiv+0x57c>
 80015b6:	e744      	b.n	8001442 <__aeabi_ddiv+0x406>
 80015b8:	2301      	movs	r3, #1
 80015ba:	2500      	movs	r5, #0
 80015bc:	4498      	add	r8, r3
 80015be:	e609      	b.n	80011d4 <__aeabi_ddiv+0x198>
 80015c0:	0765      	lsls	r5, r4, #29
 80015c2:	0264      	lsls	r4, r4, #9
 80015c4:	0b24      	lsrs	r4, r4, #12
 80015c6:	08db      	lsrs	r3, r3, #3
 80015c8:	431d      	orrs	r5, r3
 80015ca:	2300      	movs	r3, #0
 80015cc:	e590      	b.n	80010f0 <__aeabi_ddiv+0xb4>
 80015ce:	9e00      	ldr	r6, [sp, #0]
 80015d0:	3d02      	subs	r5, #2
 80015d2:	0072      	lsls	r2, r6, #1
 80015d4:	42b2      	cmp	r2, r6
 80015d6:	41bf      	sbcs	r7, r7
 80015d8:	427f      	negs	r7, r7
 80015da:	193c      	adds	r4, r7, r4
 80015dc:	1909      	adds	r1, r1, r4
 80015de:	9200      	str	r2, [sp, #0]
 80015e0:	e7ce      	b.n	8001580 <__aeabi_ddiv+0x544>
 80015e2:	2480      	movs	r4, #128	; 0x80
 80015e4:	4643      	mov	r3, r8
 80015e6:	0324      	lsls	r4, r4, #12
 80015e8:	431c      	orrs	r4, r3
 80015ea:	0324      	lsls	r4, r4, #12
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <__aeabi_ddiv+0x5cc>)
 80015ee:	0b24      	lsrs	r4, r4, #12
 80015f0:	e57e      	b.n	80010f0 <__aeabi_ddiv+0xb4>
 80015f2:	9a00      	ldr	r2, [sp, #0]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d3ea      	bcc.n	80015ce <__aeabi_ddiv+0x592>
 80015f8:	0035      	movs	r5, r6
 80015fa:	e7c4      	b.n	8001586 <__aeabi_ddiv+0x54a>
 80015fc:	0000043e 	.word	0x0000043e
 8001600:	0000041e 	.word	0x0000041e
 8001604:	000003ff 	.word	0x000003ff
 8001608:	000007ff 	.word	0x000007ff

0800160c <__eqdf2>:
 800160c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800160e:	464f      	mov	r7, r9
 8001610:	4646      	mov	r6, r8
 8001612:	46d6      	mov	lr, sl
 8001614:	4694      	mov	ip, r2
 8001616:	4691      	mov	r9, r2
 8001618:	031a      	lsls	r2, r3, #12
 800161a:	0b12      	lsrs	r2, r2, #12
 800161c:	4d18      	ldr	r5, [pc, #96]	; (8001680 <__eqdf2+0x74>)
 800161e:	b5c0      	push	{r6, r7, lr}
 8001620:	004c      	lsls	r4, r1, #1
 8001622:	030f      	lsls	r7, r1, #12
 8001624:	4692      	mov	sl, r2
 8001626:	005a      	lsls	r2, r3, #1
 8001628:	0006      	movs	r6, r0
 800162a:	4680      	mov	r8, r0
 800162c:	0b3f      	lsrs	r7, r7, #12
 800162e:	2001      	movs	r0, #1
 8001630:	0d64      	lsrs	r4, r4, #21
 8001632:	0fc9      	lsrs	r1, r1, #31
 8001634:	0d52      	lsrs	r2, r2, #21
 8001636:	0fdb      	lsrs	r3, r3, #31
 8001638:	42ac      	cmp	r4, r5
 800163a:	d00a      	beq.n	8001652 <__eqdf2+0x46>
 800163c:	42aa      	cmp	r2, r5
 800163e:	d003      	beq.n	8001648 <__eqdf2+0x3c>
 8001640:	4294      	cmp	r4, r2
 8001642:	d101      	bne.n	8001648 <__eqdf2+0x3c>
 8001644:	4557      	cmp	r7, sl
 8001646:	d00d      	beq.n	8001664 <__eqdf2+0x58>
 8001648:	bce0      	pop	{r5, r6, r7}
 800164a:	46ba      	mov	sl, r7
 800164c:	46b1      	mov	r9, r6
 800164e:	46a8      	mov	r8, r5
 8001650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001652:	003d      	movs	r5, r7
 8001654:	4335      	orrs	r5, r6
 8001656:	d1f7      	bne.n	8001648 <__eqdf2+0x3c>
 8001658:	42a2      	cmp	r2, r4
 800165a:	d1f5      	bne.n	8001648 <__eqdf2+0x3c>
 800165c:	4652      	mov	r2, sl
 800165e:	4665      	mov	r5, ip
 8001660:	432a      	orrs	r2, r5
 8001662:	d1f1      	bne.n	8001648 <__eqdf2+0x3c>
 8001664:	2001      	movs	r0, #1
 8001666:	45c8      	cmp	r8, r9
 8001668:	d1ee      	bne.n	8001648 <__eqdf2+0x3c>
 800166a:	4299      	cmp	r1, r3
 800166c:	d006      	beq.n	800167c <__eqdf2+0x70>
 800166e:	2c00      	cmp	r4, #0
 8001670:	d1ea      	bne.n	8001648 <__eqdf2+0x3c>
 8001672:	433e      	orrs	r6, r7
 8001674:	0030      	movs	r0, r6
 8001676:	1e46      	subs	r6, r0, #1
 8001678:	41b0      	sbcs	r0, r6
 800167a:	e7e5      	b.n	8001648 <__eqdf2+0x3c>
 800167c:	2000      	movs	r0, #0
 800167e:	e7e3      	b.n	8001648 <__eqdf2+0x3c>
 8001680:	000007ff 	.word	0x000007ff

08001684 <__gedf2>:
 8001684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001686:	464e      	mov	r6, r9
 8001688:	4645      	mov	r5, r8
 800168a:	4657      	mov	r7, sl
 800168c:	46de      	mov	lr, fp
 800168e:	0004      	movs	r4, r0
 8001690:	0018      	movs	r0, r3
 8001692:	b5e0      	push	{r5, r6, r7, lr}
 8001694:	0016      	movs	r6, r2
 8001696:	031b      	lsls	r3, r3, #12
 8001698:	0b1b      	lsrs	r3, r3, #12
 800169a:	4d32      	ldr	r5, [pc, #200]	; (8001764 <__gedf2+0xe0>)
 800169c:	030f      	lsls	r7, r1, #12
 800169e:	004a      	lsls	r2, r1, #1
 80016a0:	4699      	mov	r9, r3
 80016a2:	0043      	lsls	r3, r0, #1
 80016a4:	46a4      	mov	ip, r4
 80016a6:	46b0      	mov	r8, r6
 80016a8:	0b3f      	lsrs	r7, r7, #12
 80016aa:	0d52      	lsrs	r2, r2, #21
 80016ac:	0fc9      	lsrs	r1, r1, #31
 80016ae:	0d5b      	lsrs	r3, r3, #21
 80016b0:	0fc0      	lsrs	r0, r0, #31
 80016b2:	42aa      	cmp	r2, r5
 80016b4:	d029      	beq.n	800170a <__gedf2+0x86>
 80016b6:	42ab      	cmp	r3, r5
 80016b8:	d018      	beq.n	80016ec <__gedf2+0x68>
 80016ba:	2a00      	cmp	r2, #0
 80016bc:	d12a      	bne.n	8001714 <__gedf2+0x90>
 80016be:	433c      	orrs	r4, r7
 80016c0:	46a3      	mov	fp, r4
 80016c2:	4265      	negs	r5, r4
 80016c4:	4165      	adcs	r5, r4
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d102      	bne.n	80016d0 <__gedf2+0x4c>
 80016ca:	464c      	mov	r4, r9
 80016cc:	4326      	orrs	r6, r4
 80016ce:	d027      	beq.n	8001720 <__gedf2+0x9c>
 80016d0:	2d00      	cmp	r5, #0
 80016d2:	d115      	bne.n	8001700 <__gedf2+0x7c>
 80016d4:	4281      	cmp	r1, r0
 80016d6:	d028      	beq.n	800172a <__gedf2+0xa6>
 80016d8:	2002      	movs	r0, #2
 80016da:	3901      	subs	r1, #1
 80016dc:	4008      	ands	r0, r1
 80016de:	3801      	subs	r0, #1
 80016e0:	bcf0      	pop	{r4, r5, r6, r7}
 80016e2:	46bb      	mov	fp, r7
 80016e4:	46b2      	mov	sl, r6
 80016e6:	46a9      	mov	r9, r5
 80016e8:	46a0      	mov	r8, r4
 80016ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016ec:	464d      	mov	r5, r9
 80016ee:	432e      	orrs	r6, r5
 80016f0:	d12f      	bne.n	8001752 <__gedf2+0xce>
 80016f2:	2a00      	cmp	r2, #0
 80016f4:	d1ee      	bne.n	80016d4 <__gedf2+0x50>
 80016f6:	433c      	orrs	r4, r7
 80016f8:	4265      	negs	r5, r4
 80016fa:	4165      	adcs	r5, r4
 80016fc:	2d00      	cmp	r5, #0
 80016fe:	d0e9      	beq.n	80016d4 <__gedf2+0x50>
 8001700:	2800      	cmp	r0, #0
 8001702:	d1ed      	bne.n	80016e0 <__gedf2+0x5c>
 8001704:	2001      	movs	r0, #1
 8001706:	4240      	negs	r0, r0
 8001708:	e7ea      	b.n	80016e0 <__gedf2+0x5c>
 800170a:	003d      	movs	r5, r7
 800170c:	4325      	orrs	r5, r4
 800170e:	d120      	bne.n	8001752 <__gedf2+0xce>
 8001710:	4293      	cmp	r3, r2
 8001712:	d0eb      	beq.n	80016ec <__gedf2+0x68>
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1dd      	bne.n	80016d4 <__gedf2+0x50>
 8001718:	464c      	mov	r4, r9
 800171a:	4326      	orrs	r6, r4
 800171c:	d1da      	bne.n	80016d4 <__gedf2+0x50>
 800171e:	e7db      	b.n	80016d8 <__gedf2+0x54>
 8001720:	465b      	mov	r3, fp
 8001722:	2000      	movs	r0, #0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0db      	beq.n	80016e0 <__gedf2+0x5c>
 8001728:	e7d6      	b.n	80016d8 <__gedf2+0x54>
 800172a:	429a      	cmp	r2, r3
 800172c:	dc0a      	bgt.n	8001744 <__gedf2+0xc0>
 800172e:	dbe7      	blt.n	8001700 <__gedf2+0x7c>
 8001730:	454f      	cmp	r7, r9
 8001732:	d8d1      	bhi.n	80016d8 <__gedf2+0x54>
 8001734:	d010      	beq.n	8001758 <__gedf2+0xd4>
 8001736:	2000      	movs	r0, #0
 8001738:	454f      	cmp	r7, r9
 800173a:	d2d1      	bcs.n	80016e0 <__gedf2+0x5c>
 800173c:	2900      	cmp	r1, #0
 800173e:	d0e1      	beq.n	8001704 <__gedf2+0x80>
 8001740:	0008      	movs	r0, r1
 8001742:	e7cd      	b.n	80016e0 <__gedf2+0x5c>
 8001744:	4243      	negs	r3, r0
 8001746:	4158      	adcs	r0, r3
 8001748:	2302      	movs	r3, #2
 800174a:	4240      	negs	r0, r0
 800174c:	4018      	ands	r0, r3
 800174e:	3801      	subs	r0, #1
 8001750:	e7c6      	b.n	80016e0 <__gedf2+0x5c>
 8001752:	2002      	movs	r0, #2
 8001754:	4240      	negs	r0, r0
 8001756:	e7c3      	b.n	80016e0 <__gedf2+0x5c>
 8001758:	45c4      	cmp	ip, r8
 800175a:	d8bd      	bhi.n	80016d8 <__gedf2+0x54>
 800175c:	2000      	movs	r0, #0
 800175e:	45c4      	cmp	ip, r8
 8001760:	d2be      	bcs.n	80016e0 <__gedf2+0x5c>
 8001762:	e7eb      	b.n	800173c <__gedf2+0xb8>
 8001764:	000007ff 	.word	0x000007ff

08001768 <__ledf2>:
 8001768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800176a:	464e      	mov	r6, r9
 800176c:	4645      	mov	r5, r8
 800176e:	4657      	mov	r7, sl
 8001770:	46de      	mov	lr, fp
 8001772:	0004      	movs	r4, r0
 8001774:	0018      	movs	r0, r3
 8001776:	b5e0      	push	{r5, r6, r7, lr}
 8001778:	0016      	movs	r6, r2
 800177a:	031b      	lsls	r3, r3, #12
 800177c:	0b1b      	lsrs	r3, r3, #12
 800177e:	4d31      	ldr	r5, [pc, #196]	; (8001844 <__ledf2+0xdc>)
 8001780:	030f      	lsls	r7, r1, #12
 8001782:	004a      	lsls	r2, r1, #1
 8001784:	4699      	mov	r9, r3
 8001786:	0043      	lsls	r3, r0, #1
 8001788:	46a4      	mov	ip, r4
 800178a:	46b0      	mov	r8, r6
 800178c:	0b3f      	lsrs	r7, r7, #12
 800178e:	0d52      	lsrs	r2, r2, #21
 8001790:	0fc9      	lsrs	r1, r1, #31
 8001792:	0d5b      	lsrs	r3, r3, #21
 8001794:	0fc0      	lsrs	r0, r0, #31
 8001796:	42aa      	cmp	r2, r5
 8001798:	d011      	beq.n	80017be <__ledf2+0x56>
 800179a:	42ab      	cmp	r3, r5
 800179c:	d014      	beq.n	80017c8 <__ledf2+0x60>
 800179e:	2a00      	cmp	r2, #0
 80017a0:	d12f      	bne.n	8001802 <__ledf2+0x9a>
 80017a2:	433c      	orrs	r4, r7
 80017a4:	46a3      	mov	fp, r4
 80017a6:	4265      	negs	r5, r4
 80017a8:	4165      	adcs	r5, r4
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d114      	bne.n	80017d8 <__ledf2+0x70>
 80017ae:	464c      	mov	r4, r9
 80017b0:	4326      	orrs	r6, r4
 80017b2:	d111      	bne.n	80017d8 <__ledf2+0x70>
 80017b4:	465b      	mov	r3, fp
 80017b6:	2000      	movs	r0, #0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d017      	beq.n	80017ec <__ledf2+0x84>
 80017bc:	e010      	b.n	80017e0 <__ledf2+0x78>
 80017be:	003d      	movs	r5, r7
 80017c0:	4325      	orrs	r5, r4
 80017c2:	d112      	bne.n	80017ea <__ledf2+0x82>
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d11c      	bne.n	8001802 <__ledf2+0x9a>
 80017c8:	464d      	mov	r5, r9
 80017ca:	432e      	orrs	r6, r5
 80017cc:	d10d      	bne.n	80017ea <__ledf2+0x82>
 80017ce:	2a00      	cmp	r2, #0
 80017d0:	d104      	bne.n	80017dc <__ledf2+0x74>
 80017d2:	433c      	orrs	r4, r7
 80017d4:	4265      	negs	r5, r4
 80017d6:	4165      	adcs	r5, r4
 80017d8:	2d00      	cmp	r5, #0
 80017da:	d10d      	bne.n	80017f8 <__ledf2+0x90>
 80017dc:	4281      	cmp	r1, r0
 80017de:	d016      	beq.n	800180e <__ledf2+0xa6>
 80017e0:	2002      	movs	r0, #2
 80017e2:	3901      	subs	r1, #1
 80017e4:	4008      	ands	r0, r1
 80017e6:	3801      	subs	r0, #1
 80017e8:	e000      	b.n	80017ec <__ledf2+0x84>
 80017ea:	2002      	movs	r0, #2
 80017ec:	bcf0      	pop	{r4, r5, r6, r7}
 80017ee:	46bb      	mov	fp, r7
 80017f0:	46b2      	mov	sl, r6
 80017f2:	46a9      	mov	r9, r5
 80017f4:	46a0      	mov	r8, r4
 80017f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017f8:	2800      	cmp	r0, #0
 80017fa:	d1f7      	bne.n	80017ec <__ledf2+0x84>
 80017fc:	2001      	movs	r0, #1
 80017fe:	4240      	negs	r0, r0
 8001800:	e7f4      	b.n	80017ec <__ledf2+0x84>
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1ea      	bne.n	80017dc <__ledf2+0x74>
 8001806:	464c      	mov	r4, r9
 8001808:	4326      	orrs	r6, r4
 800180a:	d1e7      	bne.n	80017dc <__ledf2+0x74>
 800180c:	e7e8      	b.n	80017e0 <__ledf2+0x78>
 800180e:	429a      	cmp	r2, r3
 8001810:	dd06      	ble.n	8001820 <__ledf2+0xb8>
 8001812:	4243      	negs	r3, r0
 8001814:	4158      	adcs	r0, r3
 8001816:	2302      	movs	r3, #2
 8001818:	4240      	negs	r0, r0
 800181a:	4018      	ands	r0, r3
 800181c:	3801      	subs	r0, #1
 800181e:	e7e5      	b.n	80017ec <__ledf2+0x84>
 8001820:	429a      	cmp	r2, r3
 8001822:	dbe9      	blt.n	80017f8 <__ledf2+0x90>
 8001824:	454f      	cmp	r7, r9
 8001826:	d8db      	bhi.n	80017e0 <__ledf2+0x78>
 8001828:	d006      	beq.n	8001838 <__ledf2+0xd0>
 800182a:	2000      	movs	r0, #0
 800182c:	454f      	cmp	r7, r9
 800182e:	d2dd      	bcs.n	80017ec <__ledf2+0x84>
 8001830:	2900      	cmp	r1, #0
 8001832:	d0e3      	beq.n	80017fc <__ledf2+0x94>
 8001834:	0008      	movs	r0, r1
 8001836:	e7d9      	b.n	80017ec <__ledf2+0x84>
 8001838:	45c4      	cmp	ip, r8
 800183a:	d8d1      	bhi.n	80017e0 <__ledf2+0x78>
 800183c:	2000      	movs	r0, #0
 800183e:	45c4      	cmp	ip, r8
 8001840:	d2d4      	bcs.n	80017ec <__ledf2+0x84>
 8001842:	e7f5      	b.n	8001830 <__ledf2+0xc8>
 8001844:	000007ff 	.word	0x000007ff

08001848 <__aeabi_dmul>:
 8001848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800184a:	4657      	mov	r7, sl
 800184c:	464e      	mov	r6, r9
 800184e:	4645      	mov	r5, r8
 8001850:	46de      	mov	lr, fp
 8001852:	b5e0      	push	{r5, r6, r7, lr}
 8001854:	4698      	mov	r8, r3
 8001856:	030c      	lsls	r4, r1, #12
 8001858:	004b      	lsls	r3, r1, #1
 800185a:	0006      	movs	r6, r0
 800185c:	4692      	mov	sl, r2
 800185e:	b087      	sub	sp, #28
 8001860:	0b24      	lsrs	r4, r4, #12
 8001862:	0d5b      	lsrs	r3, r3, #21
 8001864:	0fcf      	lsrs	r7, r1, #31
 8001866:	2b00      	cmp	r3, #0
 8001868:	d06c      	beq.n	8001944 <__aeabi_dmul+0xfc>
 800186a:	4add      	ldr	r2, [pc, #884]	; (8001be0 <__aeabi_dmul+0x398>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d100      	bne.n	8001872 <__aeabi_dmul+0x2a>
 8001870:	e086      	b.n	8001980 <__aeabi_dmul+0x138>
 8001872:	0f42      	lsrs	r2, r0, #29
 8001874:	00e4      	lsls	r4, r4, #3
 8001876:	4314      	orrs	r4, r2
 8001878:	2280      	movs	r2, #128	; 0x80
 800187a:	0412      	lsls	r2, r2, #16
 800187c:	4314      	orrs	r4, r2
 800187e:	4ad9      	ldr	r2, [pc, #868]	; (8001be4 <__aeabi_dmul+0x39c>)
 8001880:	00c5      	lsls	r5, r0, #3
 8001882:	4694      	mov	ip, r2
 8001884:	4463      	add	r3, ip
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2300      	movs	r3, #0
 800188a:	4699      	mov	r9, r3
 800188c:	469b      	mov	fp, r3
 800188e:	4643      	mov	r3, r8
 8001890:	4642      	mov	r2, r8
 8001892:	031e      	lsls	r6, r3, #12
 8001894:	0fd2      	lsrs	r2, r2, #31
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4650      	mov	r0, sl
 800189a:	4690      	mov	r8, r2
 800189c:	0b36      	lsrs	r6, r6, #12
 800189e:	0d5b      	lsrs	r3, r3, #21
 80018a0:	d100      	bne.n	80018a4 <__aeabi_dmul+0x5c>
 80018a2:	e078      	b.n	8001996 <__aeabi_dmul+0x14e>
 80018a4:	4ace      	ldr	r2, [pc, #824]	; (8001be0 <__aeabi_dmul+0x398>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d01d      	beq.n	80018e6 <__aeabi_dmul+0x9e>
 80018aa:	49ce      	ldr	r1, [pc, #824]	; (8001be4 <__aeabi_dmul+0x39c>)
 80018ac:	0f42      	lsrs	r2, r0, #29
 80018ae:	468c      	mov	ip, r1
 80018b0:	9900      	ldr	r1, [sp, #0]
 80018b2:	4463      	add	r3, ip
 80018b4:	00f6      	lsls	r6, r6, #3
 80018b6:	468c      	mov	ip, r1
 80018b8:	4316      	orrs	r6, r2
 80018ba:	2280      	movs	r2, #128	; 0x80
 80018bc:	449c      	add	ip, r3
 80018be:	0412      	lsls	r2, r2, #16
 80018c0:	4663      	mov	r3, ip
 80018c2:	4316      	orrs	r6, r2
 80018c4:	00c2      	lsls	r2, r0, #3
 80018c6:	2000      	movs	r0, #0
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	9900      	ldr	r1, [sp, #0]
 80018cc:	4643      	mov	r3, r8
 80018ce:	3101      	adds	r1, #1
 80018d0:	468c      	mov	ip, r1
 80018d2:	4649      	mov	r1, r9
 80018d4:	407b      	eors	r3, r7
 80018d6:	9301      	str	r3, [sp, #4]
 80018d8:	290f      	cmp	r1, #15
 80018da:	d900      	bls.n	80018de <__aeabi_dmul+0x96>
 80018dc:	e07e      	b.n	80019dc <__aeabi_dmul+0x194>
 80018de:	4bc2      	ldr	r3, [pc, #776]	; (8001be8 <__aeabi_dmul+0x3a0>)
 80018e0:	0089      	lsls	r1, r1, #2
 80018e2:	5859      	ldr	r1, [r3, r1]
 80018e4:	468f      	mov	pc, r1
 80018e6:	4652      	mov	r2, sl
 80018e8:	9b00      	ldr	r3, [sp, #0]
 80018ea:	4332      	orrs	r2, r6
 80018ec:	d000      	beq.n	80018f0 <__aeabi_dmul+0xa8>
 80018ee:	e156      	b.n	8001b9e <__aeabi_dmul+0x356>
 80018f0:	49bb      	ldr	r1, [pc, #748]	; (8001be0 <__aeabi_dmul+0x398>)
 80018f2:	2600      	movs	r6, #0
 80018f4:	468c      	mov	ip, r1
 80018f6:	4463      	add	r3, ip
 80018f8:	4649      	mov	r1, r9
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	2302      	movs	r3, #2
 80018fe:	4319      	orrs	r1, r3
 8001900:	4689      	mov	r9, r1
 8001902:	2002      	movs	r0, #2
 8001904:	e7e1      	b.n	80018ca <__aeabi_dmul+0x82>
 8001906:	4643      	mov	r3, r8
 8001908:	9301      	str	r3, [sp, #4]
 800190a:	0034      	movs	r4, r6
 800190c:	0015      	movs	r5, r2
 800190e:	4683      	mov	fp, r0
 8001910:	465b      	mov	r3, fp
 8001912:	2b02      	cmp	r3, #2
 8001914:	d05e      	beq.n	80019d4 <__aeabi_dmul+0x18c>
 8001916:	2b03      	cmp	r3, #3
 8001918:	d100      	bne.n	800191c <__aeabi_dmul+0xd4>
 800191a:	e1f3      	b.n	8001d04 <__aeabi_dmul+0x4bc>
 800191c:	2b01      	cmp	r3, #1
 800191e:	d000      	beq.n	8001922 <__aeabi_dmul+0xda>
 8001920:	e118      	b.n	8001b54 <__aeabi_dmul+0x30c>
 8001922:	2200      	movs	r2, #0
 8001924:	2400      	movs	r4, #0
 8001926:	2500      	movs	r5, #0
 8001928:	9b01      	ldr	r3, [sp, #4]
 800192a:	0512      	lsls	r2, r2, #20
 800192c:	4322      	orrs	r2, r4
 800192e:	07db      	lsls	r3, r3, #31
 8001930:	431a      	orrs	r2, r3
 8001932:	0028      	movs	r0, r5
 8001934:	0011      	movs	r1, r2
 8001936:	b007      	add	sp, #28
 8001938:	bcf0      	pop	{r4, r5, r6, r7}
 800193a:	46bb      	mov	fp, r7
 800193c:	46b2      	mov	sl, r6
 800193e:	46a9      	mov	r9, r5
 8001940:	46a0      	mov	r8, r4
 8001942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001944:	0025      	movs	r5, r4
 8001946:	4305      	orrs	r5, r0
 8001948:	d100      	bne.n	800194c <__aeabi_dmul+0x104>
 800194a:	e141      	b.n	8001bd0 <__aeabi_dmul+0x388>
 800194c:	2c00      	cmp	r4, #0
 800194e:	d100      	bne.n	8001952 <__aeabi_dmul+0x10a>
 8001950:	e1ad      	b.n	8001cae <__aeabi_dmul+0x466>
 8001952:	0020      	movs	r0, r4
 8001954:	f000 fe68 	bl	8002628 <__clzsi2>
 8001958:	0001      	movs	r1, r0
 800195a:	0002      	movs	r2, r0
 800195c:	390b      	subs	r1, #11
 800195e:	231d      	movs	r3, #29
 8001960:	0010      	movs	r0, r2
 8001962:	1a5b      	subs	r3, r3, r1
 8001964:	0031      	movs	r1, r6
 8001966:	0035      	movs	r5, r6
 8001968:	3808      	subs	r0, #8
 800196a:	4084      	lsls	r4, r0
 800196c:	40d9      	lsrs	r1, r3
 800196e:	4085      	lsls	r5, r0
 8001970:	430c      	orrs	r4, r1
 8001972:	489e      	ldr	r0, [pc, #632]	; (8001bec <__aeabi_dmul+0x3a4>)
 8001974:	1a83      	subs	r3, r0, r2
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	2300      	movs	r3, #0
 800197a:	4699      	mov	r9, r3
 800197c:	469b      	mov	fp, r3
 800197e:	e786      	b.n	800188e <__aeabi_dmul+0x46>
 8001980:	0005      	movs	r5, r0
 8001982:	4325      	orrs	r5, r4
 8001984:	d000      	beq.n	8001988 <__aeabi_dmul+0x140>
 8001986:	e11c      	b.n	8001bc2 <__aeabi_dmul+0x37a>
 8001988:	2208      	movs	r2, #8
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	2302      	movs	r3, #2
 800198e:	2400      	movs	r4, #0
 8001990:	4691      	mov	r9, r2
 8001992:	469b      	mov	fp, r3
 8001994:	e77b      	b.n	800188e <__aeabi_dmul+0x46>
 8001996:	4652      	mov	r2, sl
 8001998:	4332      	orrs	r2, r6
 800199a:	d100      	bne.n	800199e <__aeabi_dmul+0x156>
 800199c:	e10a      	b.n	8001bb4 <__aeabi_dmul+0x36c>
 800199e:	2e00      	cmp	r6, #0
 80019a0:	d100      	bne.n	80019a4 <__aeabi_dmul+0x15c>
 80019a2:	e176      	b.n	8001c92 <__aeabi_dmul+0x44a>
 80019a4:	0030      	movs	r0, r6
 80019a6:	f000 fe3f 	bl	8002628 <__clzsi2>
 80019aa:	0002      	movs	r2, r0
 80019ac:	3a0b      	subs	r2, #11
 80019ae:	231d      	movs	r3, #29
 80019b0:	0001      	movs	r1, r0
 80019b2:	1a9b      	subs	r3, r3, r2
 80019b4:	4652      	mov	r2, sl
 80019b6:	3908      	subs	r1, #8
 80019b8:	40da      	lsrs	r2, r3
 80019ba:	408e      	lsls	r6, r1
 80019bc:	4316      	orrs	r6, r2
 80019be:	4652      	mov	r2, sl
 80019c0:	408a      	lsls	r2, r1
 80019c2:	9b00      	ldr	r3, [sp, #0]
 80019c4:	4989      	ldr	r1, [pc, #548]	; (8001bec <__aeabi_dmul+0x3a4>)
 80019c6:	1a18      	subs	r0, r3, r0
 80019c8:	0003      	movs	r3, r0
 80019ca:	468c      	mov	ip, r1
 80019cc:	4463      	add	r3, ip
 80019ce:	2000      	movs	r0, #0
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	e77a      	b.n	80018ca <__aeabi_dmul+0x82>
 80019d4:	2400      	movs	r4, #0
 80019d6:	2500      	movs	r5, #0
 80019d8:	4a81      	ldr	r2, [pc, #516]	; (8001be0 <__aeabi_dmul+0x398>)
 80019da:	e7a5      	b.n	8001928 <__aeabi_dmul+0xe0>
 80019dc:	0c2f      	lsrs	r7, r5, #16
 80019de:	042d      	lsls	r5, r5, #16
 80019e0:	0c2d      	lsrs	r5, r5, #16
 80019e2:	002b      	movs	r3, r5
 80019e4:	0c11      	lsrs	r1, r2, #16
 80019e6:	0412      	lsls	r2, r2, #16
 80019e8:	0c12      	lsrs	r2, r2, #16
 80019ea:	4353      	muls	r3, r2
 80019ec:	4698      	mov	r8, r3
 80019ee:	0013      	movs	r3, r2
 80019f0:	0028      	movs	r0, r5
 80019f2:	437b      	muls	r3, r7
 80019f4:	4699      	mov	r9, r3
 80019f6:	4348      	muls	r0, r1
 80019f8:	4448      	add	r0, r9
 80019fa:	4683      	mov	fp, r0
 80019fc:	4640      	mov	r0, r8
 80019fe:	000b      	movs	r3, r1
 8001a00:	0c00      	lsrs	r0, r0, #16
 8001a02:	4682      	mov	sl, r0
 8001a04:	4658      	mov	r0, fp
 8001a06:	437b      	muls	r3, r7
 8001a08:	4450      	add	r0, sl
 8001a0a:	9302      	str	r3, [sp, #8]
 8001a0c:	4581      	cmp	r9, r0
 8001a0e:	d906      	bls.n	8001a1e <__aeabi_dmul+0x1d6>
 8001a10:	469a      	mov	sl, r3
 8001a12:	2380      	movs	r3, #128	; 0x80
 8001a14:	025b      	lsls	r3, r3, #9
 8001a16:	4699      	mov	r9, r3
 8001a18:	44ca      	add	sl, r9
 8001a1a:	4653      	mov	r3, sl
 8001a1c:	9302      	str	r3, [sp, #8]
 8001a1e:	0c03      	lsrs	r3, r0, #16
 8001a20:	469b      	mov	fp, r3
 8001a22:	4643      	mov	r3, r8
 8001a24:	041b      	lsls	r3, r3, #16
 8001a26:	0400      	lsls	r0, r0, #16
 8001a28:	0c1b      	lsrs	r3, r3, #16
 8001a2a:	4698      	mov	r8, r3
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	4443      	add	r3, r8
 8001a30:	9304      	str	r3, [sp, #16]
 8001a32:	0c33      	lsrs	r3, r6, #16
 8001a34:	4699      	mov	r9, r3
 8001a36:	002b      	movs	r3, r5
 8001a38:	0436      	lsls	r6, r6, #16
 8001a3a:	0c36      	lsrs	r6, r6, #16
 8001a3c:	4373      	muls	r3, r6
 8001a3e:	4698      	mov	r8, r3
 8001a40:	0033      	movs	r3, r6
 8001a42:	437b      	muls	r3, r7
 8001a44:	469a      	mov	sl, r3
 8001a46:	464b      	mov	r3, r9
 8001a48:	435d      	muls	r5, r3
 8001a4a:	435f      	muls	r7, r3
 8001a4c:	4643      	mov	r3, r8
 8001a4e:	4455      	add	r5, sl
 8001a50:	0c18      	lsrs	r0, r3, #16
 8001a52:	1940      	adds	r0, r0, r5
 8001a54:	4582      	cmp	sl, r0
 8001a56:	d903      	bls.n	8001a60 <__aeabi_dmul+0x218>
 8001a58:	2380      	movs	r3, #128	; 0x80
 8001a5a:	025b      	lsls	r3, r3, #9
 8001a5c:	469a      	mov	sl, r3
 8001a5e:	4457      	add	r7, sl
 8001a60:	0c05      	lsrs	r5, r0, #16
 8001a62:	19eb      	adds	r3, r5, r7
 8001a64:	9305      	str	r3, [sp, #20]
 8001a66:	4643      	mov	r3, r8
 8001a68:	041d      	lsls	r5, r3, #16
 8001a6a:	0c2d      	lsrs	r5, r5, #16
 8001a6c:	0400      	lsls	r0, r0, #16
 8001a6e:	1940      	adds	r0, r0, r5
 8001a70:	0c25      	lsrs	r5, r4, #16
 8001a72:	0424      	lsls	r4, r4, #16
 8001a74:	0c24      	lsrs	r4, r4, #16
 8001a76:	0027      	movs	r7, r4
 8001a78:	4357      	muls	r7, r2
 8001a7a:	436a      	muls	r2, r5
 8001a7c:	4690      	mov	r8, r2
 8001a7e:	002a      	movs	r2, r5
 8001a80:	0c3b      	lsrs	r3, r7, #16
 8001a82:	469a      	mov	sl, r3
 8001a84:	434a      	muls	r2, r1
 8001a86:	4361      	muls	r1, r4
 8001a88:	4441      	add	r1, r8
 8001a8a:	4451      	add	r1, sl
 8001a8c:	4483      	add	fp, r0
 8001a8e:	4588      	cmp	r8, r1
 8001a90:	d903      	bls.n	8001a9a <__aeabi_dmul+0x252>
 8001a92:	2380      	movs	r3, #128	; 0x80
 8001a94:	025b      	lsls	r3, r3, #9
 8001a96:	4698      	mov	r8, r3
 8001a98:	4442      	add	r2, r8
 8001a9a:	043f      	lsls	r7, r7, #16
 8001a9c:	0c0b      	lsrs	r3, r1, #16
 8001a9e:	0c3f      	lsrs	r7, r7, #16
 8001aa0:	0409      	lsls	r1, r1, #16
 8001aa2:	19c9      	adds	r1, r1, r7
 8001aa4:	0027      	movs	r7, r4
 8001aa6:	4698      	mov	r8, r3
 8001aa8:	464b      	mov	r3, r9
 8001aaa:	4377      	muls	r7, r6
 8001aac:	435c      	muls	r4, r3
 8001aae:	436e      	muls	r6, r5
 8001ab0:	435d      	muls	r5, r3
 8001ab2:	0c3b      	lsrs	r3, r7, #16
 8001ab4:	4699      	mov	r9, r3
 8001ab6:	19a4      	adds	r4, r4, r6
 8001ab8:	444c      	add	r4, r9
 8001aba:	4442      	add	r2, r8
 8001abc:	9503      	str	r5, [sp, #12]
 8001abe:	42a6      	cmp	r6, r4
 8001ac0:	d904      	bls.n	8001acc <__aeabi_dmul+0x284>
 8001ac2:	2380      	movs	r3, #128	; 0x80
 8001ac4:	025b      	lsls	r3, r3, #9
 8001ac6:	4698      	mov	r8, r3
 8001ac8:	4445      	add	r5, r8
 8001aca:	9503      	str	r5, [sp, #12]
 8001acc:	9b02      	ldr	r3, [sp, #8]
 8001ace:	043f      	lsls	r7, r7, #16
 8001ad0:	445b      	add	r3, fp
 8001ad2:	001e      	movs	r6, r3
 8001ad4:	4283      	cmp	r3, r0
 8001ad6:	4180      	sbcs	r0, r0
 8001ad8:	0423      	lsls	r3, r4, #16
 8001ada:	4698      	mov	r8, r3
 8001adc:	9b05      	ldr	r3, [sp, #20]
 8001ade:	0c3f      	lsrs	r7, r7, #16
 8001ae0:	4447      	add	r7, r8
 8001ae2:	4698      	mov	r8, r3
 8001ae4:	1876      	adds	r6, r6, r1
 8001ae6:	428e      	cmp	r6, r1
 8001ae8:	4189      	sbcs	r1, r1
 8001aea:	4447      	add	r7, r8
 8001aec:	4240      	negs	r0, r0
 8001aee:	183d      	adds	r5, r7, r0
 8001af0:	46a8      	mov	r8, r5
 8001af2:	4693      	mov	fp, r2
 8001af4:	4249      	negs	r1, r1
 8001af6:	468a      	mov	sl, r1
 8001af8:	44c3      	add	fp, r8
 8001afa:	429f      	cmp	r7, r3
 8001afc:	41bf      	sbcs	r7, r7
 8001afe:	4580      	cmp	r8, r0
 8001b00:	4180      	sbcs	r0, r0
 8001b02:	9b03      	ldr	r3, [sp, #12]
 8001b04:	44da      	add	sl, fp
 8001b06:	4698      	mov	r8, r3
 8001b08:	4653      	mov	r3, sl
 8001b0a:	4240      	negs	r0, r0
 8001b0c:	427f      	negs	r7, r7
 8001b0e:	4307      	orrs	r7, r0
 8001b10:	0c24      	lsrs	r4, r4, #16
 8001b12:	4593      	cmp	fp, r2
 8001b14:	4192      	sbcs	r2, r2
 8001b16:	458a      	cmp	sl, r1
 8001b18:	4189      	sbcs	r1, r1
 8001b1a:	193f      	adds	r7, r7, r4
 8001b1c:	0ddc      	lsrs	r4, r3, #23
 8001b1e:	9b04      	ldr	r3, [sp, #16]
 8001b20:	0275      	lsls	r5, r6, #9
 8001b22:	431d      	orrs	r5, r3
 8001b24:	1e68      	subs	r0, r5, #1
 8001b26:	4185      	sbcs	r5, r0
 8001b28:	4653      	mov	r3, sl
 8001b2a:	4252      	negs	r2, r2
 8001b2c:	4249      	negs	r1, r1
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	18bf      	adds	r7, r7, r2
 8001b32:	4447      	add	r7, r8
 8001b34:	0df6      	lsrs	r6, r6, #23
 8001b36:	027f      	lsls	r7, r7, #9
 8001b38:	4335      	orrs	r5, r6
 8001b3a:	025a      	lsls	r2, r3, #9
 8001b3c:	433c      	orrs	r4, r7
 8001b3e:	4315      	orrs	r5, r2
 8001b40:	01fb      	lsls	r3, r7, #7
 8001b42:	d400      	bmi.n	8001b46 <__aeabi_dmul+0x2fe>
 8001b44:	e0c1      	b.n	8001cca <__aeabi_dmul+0x482>
 8001b46:	2101      	movs	r1, #1
 8001b48:	086a      	lsrs	r2, r5, #1
 8001b4a:	400d      	ands	r5, r1
 8001b4c:	4315      	orrs	r5, r2
 8001b4e:	07e2      	lsls	r2, r4, #31
 8001b50:	4315      	orrs	r5, r2
 8001b52:	0864      	lsrs	r4, r4, #1
 8001b54:	4926      	ldr	r1, [pc, #152]	; (8001bf0 <__aeabi_dmul+0x3a8>)
 8001b56:	4461      	add	r1, ip
 8001b58:	2900      	cmp	r1, #0
 8001b5a:	dd56      	ble.n	8001c0a <__aeabi_dmul+0x3c2>
 8001b5c:	076b      	lsls	r3, r5, #29
 8001b5e:	d009      	beq.n	8001b74 <__aeabi_dmul+0x32c>
 8001b60:	220f      	movs	r2, #15
 8001b62:	402a      	ands	r2, r5
 8001b64:	2a04      	cmp	r2, #4
 8001b66:	d005      	beq.n	8001b74 <__aeabi_dmul+0x32c>
 8001b68:	1d2a      	adds	r2, r5, #4
 8001b6a:	42aa      	cmp	r2, r5
 8001b6c:	41ad      	sbcs	r5, r5
 8001b6e:	426d      	negs	r5, r5
 8001b70:	1964      	adds	r4, r4, r5
 8001b72:	0015      	movs	r5, r2
 8001b74:	01e3      	lsls	r3, r4, #7
 8001b76:	d504      	bpl.n	8001b82 <__aeabi_dmul+0x33a>
 8001b78:	2180      	movs	r1, #128	; 0x80
 8001b7a:	4a1e      	ldr	r2, [pc, #120]	; (8001bf4 <__aeabi_dmul+0x3ac>)
 8001b7c:	00c9      	lsls	r1, r1, #3
 8001b7e:	4014      	ands	r4, r2
 8001b80:	4461      	add	r1, ip
 8001b82:	4a1d      	ldr	r2, [pc, #116]	; (8001bf8 <__aeabi_dmul+0x3b0>)
 8001b84:	4291      	cmp	r1, r2
 8001b86:	dd00      	ble.n	8001b8a <__aeabi_dmul+0x342>
 8001b88:	e724      	b.n	80019d4 <__aeabi_dmul+0x18c>
 8001b8a:	0762      	lsls	r2, r4, #29
 8001b8c:	08ed      	lsrs	r5, r5, #3
 8001b8e:	0264      	lsls	r4, r4, #9
 8001b90:	0549      	lsls	r1, r1, #21
 8001b92:	4315      	orrs	r5, r2
 8001b94:	0b24      	lsrs	r4, r4, #12
 8001b96:	0d4a      	lsrs	r2, r1, #21
 8001b98:	e6c6      	b.n	8001928 <__aeabi_dmul+0xe0>
 8001b9a:	9701      	str	r7, [sp, #4]
 8001b9c:	e6b8      	b.n	8001910 <__aeabi_dmul+0xc8>
 8001b9e:	4a10      	ldr	r2, [pc, #64]	; (8001be0 <__aeabi_dmul+0x398>)
 8001ba0:	2003      	movs	r0, #3
 8001ba2:	4694      	mov	ip, r2
 8001ba4:	4463      	add	r3, ip
 8001ba6:	464a      	mov	r2, r9
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	2303      	movs	r3, #3
 8001bac:	431a      	orrs	r2, r3
 8001bae:	4691      	mov	r9, r2
 8001bb0:	4652      	mov	r2, sl
 8001bb2:	e68a      	b.n	80018ca <__aeabi_dmul+0x82>
 8001bb4:	4649      	mov	r1, r9
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	4319      	orrs	r1, r3
 8001bba:	4689      	mov	r9, r1
 8001bbc:	2600      	movs	r6, #0
 8001bbe:	2001      	movs	r0, #1
 8001bc0:	e683      	b.n	80018ca <__aeabi_dmul+0x82>
 8001bc2:	220c      	movs	r2, #12
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	0005      	movs	r5, r0
 8001bca:	4691      	mov	r9, r2
 8001bcc:	469b      	mov	fp, r3
 8001bce:	e65e      	b.n	800188e <__aeabi_dmul+0x46>
 8001bd0:	2304      	movs	r3, #4
 8001bd2:	4699      	mov	r9, r3
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	2400      	movs	r4, #0
 8001bdc:	469b      	mov	fp, r3
 8001bde:	e656      	b.n	800188e <__aeabi_dmul+0x46>
 8001be0:	000007ff 	.word	0x000007ff
 8001be4:	fffffc01 	.word	0xfffffc01
 8001be8:	08008bf4 	.word	0x08008bf4
 8001bec:	fffffc0d 	.word	0xfffffc0d
 8001bf0:	000003ff 	.word	0x000003ff
 8001bf4:	feffffff 	.word	0xfeffffff
 8001bf8:	000007fe 	.word	0x000007fe
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	2480      	movs	r4, #128	; 0x80
 8001c00:	2500      	movs	r5, #0
 8001c02:	4a44      	ldr	r2, [pc, #272]	; (8001d14 <__aeabi_dmul+0x4cc>)
 8001c04:	9301      	str	r3, [sp, #4]
 8001c06:	0324      	lsls	r4, r4, #12
 8001c08:	e68e      	b.n	8001928 <__aeabi_dmul+0xe0>
 8001c0a:	2001      	movs	r0, #1
 8001c0c:	1a40      	subs	r0, r0, r1
 8001c0e:	2838      	cmp	r0, #56	; 0x38
 8001c10:	dd00      	ble.n	8001c14 <__aeabi_dmul+0x3cc>
 8001c12:	e686      	b.n	8001922 <__aeabi_dmul+0xda>
 8001c14:	281f      	cmp	r0, #31
 8001c16:	dd5b      	ble.n	8001cd0 <__aeabi_dmul+0x488>
 8001c18:	221f      	movs	r2, #31
 8001c1a:	0023      	movs	r3, r4
 8001c1c:	4252      	negs	r2, r2
 8001c1e:	1a51      	subs	r1, r2, r1
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	0019      	movs	r1, r3
 8001c24:	2820      	cmp	r0, #32
 8001c26:	d003      	beq.n	8001c30 <__aeabi_dmul+0x3e8>
 8001c28:	4a3b      	ldr	r2, [pc, #236]	; (8001d18 <__aeabi_dmul+0x4d0>)
 8001c2a:	4462      	add	r2, ip
 8001c2c:	4094      	lsls	r4, r2
 8001c2e:	4325      	orrs	r5, r4
 8001c30:	1e6a      	subs	r2, r5, #1
 8001c32:	4195      	sbcs	r5, r2
 8001c34:	002a      	movs	r2, r5
 8001c36:	430a      	orrs	r2, r1
 8001c38:	2107      	movs	r1, #7
 8001c3a:	000d      	movs	r5, r1
 8001c3c:	2400      	movs	r4, #0
 8001c3e:	4015      	ands	r5, r2
 8001c40:	4211      	tst	r1, r2
 8001c42:	d05b      	beq.n	8001cfc <__aeabi_dmul+0x4b4>
 8001c44:	210f      	movs	r1, #15
 8001c46:	2400      	movs	r4, #0
 8001c48:	4011      	ands	r1, r2
 8001c4a:	2904      	cmp	r1, #4
 8001c4c:	d053      	beq.n	8001cf6 <__aeabi_dmul+0x4ae>
 8001c4e:	1d11      	adds	r1, r2, #4
 8001c50:	4291      	cmp	r1, r2
 8001c52:	4192      	sbcs	r2, r2
 8001c54:	4252      	negs	r2, r2
 8001c56:	18a4      	adds	r4, r4, r2
 8001c58:	000a      	movs	r2, r1
 8001c5a:	0223      	lsls	r3, r4, #8
 8001c5c:	d54b      	bpl.n	8001cf6 <__aeabi_dmul+0x4ae>
 8001c5e:	2201      	movs	r2, #1
 8001c60:	2400      	movs	r4, #0
 8001c62:	2500      	movs	r5, #0
 8001c64:	e660      	b.n	8001928 <__aeabi_dmul+0xe0>
 8001c66:	2380      	movs	r3, #128	; 0x80
 8001c68:	031b      	lsls	r3, r3, #12
 8001c6a:	421c      	tst	r4, r3
 8001c6c:	d009      	beq.n	8001c82 <__aeabi_dmul+0x43a>
 8001c6e:	421e      	tst	r6, r3
 8001c70:	d107      	bne.n	8001c82 <__aeabi_dmul+0x43a>
 8001c72:	4333      	orrs	r3, r6
 8001c74:	031c      	lsls	r4, r3, #12
 8001c76:	4643      	mov	r3, r8
 8001c78:	0015      	movs	r5, r2
 8001c7a:	0b24      	lsrs	r4, r4, #12
 8001c7c:	4a25      	ldr	r2, [pc, #148]	; (8001d14 <__aeabi_dmul+0x4cc>)
 8001c7e:	9301      	str	r3, [sp, #4]
 8001c80:	e652      	b.n	8001928 <__aeabi_dmul+0xe0>
 8001c82:	2280      	movs	r2, #128	; 0x80
 8001c84:	0312      	lsls	r2, r2, #12
 8001c86:	4314      	orrs	r4, r2
 8001c88:	0324      	lsls	r4, r4, #12
 8001c8a:	4a22      	ldr	r2, [pc, #136]	; (8001d14 <__aeabi_dmul+0x4cc>)
 8001c8c:	0b24      	lsrs	r4, r4, #12
 8001c8e:	9701      	str	r7, [sp, #4]
 8001c90:	e64a      	b.n	8001928 <__aeabi_dmul+0xe0>
 8001c92:	f000 fcc9 	bl	8002628 <__clzsi2>
 8001c96:	0003      	movs	r3, r0
 8001c98:	001a      	movs	r2, r3
 8001c9a:	3215      	adds	r2, #21
 8001c9c:	3020      	adds	r0, #32
 8001c9e:	2a1c      	cmp	r2, #28
 8001ca0:	dc00      	bgt.n	8001ca4 <__aeabi_dmul+0x45c>
 8001ca2:	e684      	b.n	80019ae <__aeabi_dmul+0x166>
 8001ca4:	4656      	mov	r6, sl
 8001ca6:	3b08      	subs	r3, #8
 8001ca8:	2200      	movs	r2, #0
 8001caa:	409e      	lsls	r6, r3
 8001cac:	e689      	b.n	80019c2 <__aeabi_dmul+0x17a>
 8001cae:	f000 fcbb 	bl	8002628 <__clzsi2>
 8001cb2:	0001      	movs	r1, r0
 8001cb4:	0002      	movs	r2, r0
 8001cb6:	3115      	adds	r1, #21
 8001cb8:	3220      	adds	r2, #32
 8001cba:	291c      	cmp	r1, #28
 8001cbc:	dc00      	bgt.n	8001cc0 <__aeabi_dmul+0x478>
 8001cbe:	e64e      	b.n	800195e <__aeabi_dmul+0x116>
 8001cc0:	0034      	movs	r4, r6
 8001cc2:	3808      	subs	r0, #8
 8001cc4:	2500      	movs	r5, #0
 8001cc6:	4084      	lsls	r4, r0
 8001cc8:	e653      	b.n	8001972 <__aeabi_dmul+0x12a>
 8001cca:	9b00      	ldr	r3, [sp, #0]
 8001ccc:	469c      	mov	ip, r3
 8001cce:	e741      	b.n	8001b54 <__aeabi_dmul+0x30c>
 8001cd0:	4912      	ldr	r1, [pc, #72]	; (8001d1c <__aeabi_dmul+0x4d4>)
 8001cd2:	0022      	movs	r2, r4
 8001cd4:	4461      	add	r1, ip
 8001cd6:	002e      	movs	r6, r5
 8001cd8:	408d      	lsls	r5, r1
 8001cda:	408a      	lsls	r2, r1
 8001cdc:	40c6      	lsrs	r6, r0
 8001cde:	1e69      	subs	r1, r5, #1
 8001ce0:	418d      	sbcs	r5, r1
 8001ce2:	4332      	orrs	r2, r6
 8001ce4:	432a      	orrs	r2, r5
 8001ce6:	40c4      	lsrs	r4, r0
 8001ce8:	0753      	lsls	r3, r2, #29
 8001cea:	d0b6      	beq.n	8001c5a <__aeabi_dmul+0x412>
 8001cec:	210f      	movs	r1, #15
 8001cee:	4011      	ands	r1, r2
 8001cf0:	2904      	cmp	r1, #4
 8001cf2:	d1ac      	bne.n	8001c4e <__aeabi_dmul+0x406>
 8001cf4:	e7b1      	b.n	8001c5a <__aeabi_dmul+0x412>
 8001cf6:	0765      	lsls	r5, r4, #29
 8001cf8:	0264      	lsls	r4, r4, #9
 8001cfa:	0b24      	lsrs	r4, r4, #12
 8001cfc:	08d2      	lsrs	r2, r2, #3
 8001cfe:	4315      	orrs	r5, r2
 8001d00:	2200      	movs	r2, #0
 8001d02:	e611      	b.n	8001928 <__aeabi_dmul+0xe0>
 8001d04:	2280      	movs	r2, #128	; 0x80
 8001d06:	0312      	lsls	r2, r2, #12
 8001d08:	4314      	orrs	r4, r2
 8001d0a:	0324      	lsls	r4, r4, #12
 8001d0c:	4a01      	ldr	r2, [pc, #4]	; (8001d14 <__aeabi_dmul+0x4cc>)
 8001d0e:	0b24      	lsrs	r4, r4, #12
 8001d10:	e60a      	b.n	8001928 <__aeabi_dmul+0xe0>
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	000007ff 	.word	0x000007ff
 8001d18:	0000043e 	.word	0x0000043e
 8001d1c:	0000041e 	.word	0x0000041e

08001d20 <__aeabi_dsub>:
 8001d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d22:	4657      	mov	r7, sl
 8001d24:	464e      	mov	r6, r9
 8001d26:	4645      	mov	r5, r8
 8001d28:	46de      	mov	lr, fp
 8001d2a:	0004      	movs	r4, r0
 8001d2c:	b5e0      	push	{r5, r6, r7, lr}
 8001d2e:	001f      	movs	r7, r3
 8001d30:	0010      	movs	r0, r2
 8001d32:	030b      	lsls	r3, r1, #12
 8001d34:	0f62      	lsrs	r2, r4, #29
 8001d36:	004e      	lsls	r6, r1, #1
 8001d38:	0fcd      	lsrs	r5, r1, #31
 8001d3a:	0a5b      	lsrs	r3, r3, #9
 8001d3c:	0339      	lsls	r1, r7, #12
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	0a49      	lsrs	r1, r1, #9
 8001d42:	00e2      	lsls	r2, r4, #3
 8001d44:	0f44      	lsrs	r4, r0, #29
 8001d46:	4321      	orrs	r1, r4
 8001d48:	4cc2      	ldr	r4, [pc, #776]	; (8002054 <__aeabi_dsub+0x334>)
 8001d4a:	4691      	mov	r9, r2
 8001d4c:	4692      	mov	sl, r2
 8001d4e:	00c0      	lsls	r0, r0, #3
 8001d50:	007a      	lsls	r2, r7, #1
 8001d52:	4680      	mov	r8, r0
 8001d54:	0d76      	lsrs	r6, r6, #21
 8001d56:	0d52      	lsrs	r2, r2, #21
 8001d58:	0fff      	lsrs	r7, r7, #31
 8001d5a:	42a2      	cmp	r2, r4
 8001d5c:	d100      	bne.n	8001d60 <__aeabi_dsub+0x40>
 8001d5e:	e0b4      	b.n	8001eca <__aeabi_dsub+0x1aa>
 8001d60:	2401      	movs	r4, #1
 8001d62:	4067      	eors	r7, r4
 8001d64:	46bb      	mov	fp, r7
 8001d66:	42bd      	cmp	r5, r7
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x4c>
 8001d6a:	e088      	b.n	8001e7e <__aeabi_dsub+0x15e>
 8001d6c:	1ab4      	subs	r4, r6, r2
 8001d6e:	46a4      	mov	ip, r4
 8001d70:	2c00      	cmp	r4, #0
 8001d72:	dc00      	bgt.n	8001d76 <__aeabi_dsub+0x56>
 8001d74:	e0b2      	b.n	8001edc <__aeabi_dsub+0x1bc>
 8001d76:	2a00      	cmp	r2, #0
 8001d78:	d100      	bne.n	8001d7c <__aeabi_dsub+0x5c>
 8001d7a:	e0c5      	b.n	8001f08 <__aeabi_dsub+0x1e8>
 8001d7c:	4ab5      	ldr	r2, [pc, #724]	; (8002054 <__aeabi_dsub+0x334>)
 8001d7e:	4296      	cmp	r6, r2
 8001d80:	d100      	bne.n	8001d84 <__aeabi_dsub+0x64>
 8001d82:	e28b      	b.n	800229c <__aeabi_dsub+0x57c>
 8001d84:	2280      	movs	r2, #128	; 0x80
 8001d86:	0412      	lsls	r2, r2, #16
 8001d88:	4311      	orrs	r1, r2
 8001d8a:	4662      	mov	r2, ip
 8001d8c:	2a38      	cmp	r2, #56	; 0x38
 8001d8e:	dd00      	ble.n	8001d92 <__aeabi_dsub+0x72>
 8001d90:	e1a1      	b.n	80020d6 <__aeabi_dsub+0x3b6>
 8001d92:	2a1f      	cmp	r2, #31
 8001d94:	dd00      	ble.n	8001d98 <__aeabi_dsub+0x78>
 8001d96:	e216      	b.n	80021c6 <__aeabi_dsub+0x4a6>
 8001d98:	2720      	movs	r7, #32
 8001d9a:	000c      	movs	r4, r1
 8001d9c:	1abf      	subs	r7, r7, r2
 8001d9e:	40bc      	lsls	r4, r7
 8001da0:	0002      	movs	r2, r0
 8001da2:	46a0      	mov	r8, r4
 8001da4:	4664      	mov	r4, ip
 8001da6:	40b8      	lsls	r0, r7
 8001da8:	40e2      	lsrs	r2, r4
 8001daa:	4644      	mov	r4, r8
 8001dac:	4314      	orrs	r4, r2
 8001dae:	0002      	movs	r2, r0
 8001db0:	1e50      	subs	r0, r2, #1
 8001db2:	4182      	sbcs	r2, r0
 8001db4:	4660      	mov	r0, ip
 8001db6:	40c1      	lsrs	r1, r0
 8001db8:	4322      	orrs	r2, r4
 8001dba:	1a5b      	subs	r3, r3, r1
 8001dbc:	4649      	mov	r1, r9
 8001dbe:	1a8c      	subs	r4, r1, r2
 8001dc0:	45a1      	cmp	r9, r4
 8001dc2:	4192      	sbcs	r2, r2
 8001dc4:	4252      	negs	r2, r2
 8001dc6:	1a9b      	subs	r3, r3, r2
 8001dc8:	4698      	mov	r8, r3
 8001dca:	4643      	mov	r3, r8
 8001dcc:	021b      	lsls	r3, r3, #8
 8001dce:	d400      	bmi.n	8001dd2 <__aeabi_dsub+0xb2>
 8001dd0:	e117      	b.n	8002002 <__aeabi_dsub+0x2e2>
 8001dd2:	4643      	mov	r3, r8
 8001dd4:	025b      	lsls	r3, r3, #9
 8001dd6:	0a5b      	lsrs	r3, r3, #9
 8001dd8:	4698      	mov	r8, r3
 8001dda:	4643      	mov	r3, r8
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d100      	bne.n	8001de2 <__aeabi_dsub+0xc2>
 8001de0:	e16c      	b.n	80020bc <__aeabi_dsub+0x39c>
 8001de2:	4640      	mov	r0, r8
 8001de4:	f000 fc20 	bl	8002628 <__clzsi2>
 8001de8:	0002      	movs	r2, r0
 8001dea:	3a08      	subs	r2, #8
 8001dec:	2120      	movs	r1, #32
 8001dee:	0020      	movs	r0, r4
 8001df0:	4643      	mov	r3, r8
 8001df2:	1a89      	subs	r1, r1, r2
 8001df4:	4093      	lsls	r3, r2
 8001df6:	40c8      	lsrs	r0, r1
 8001df8:	4094      	lsls	r4, r2
 8001dfa:	4303      	orrs	r3, r0
 8001dfc:	4296      	cmp	r6, r2
 8001dfe:	dd00      	ble.n	8001e02 <__aeabi_dsub+0xe2>
 8001e00:	e157      	b.n	80020b2 <__aeabi_dsub+0x392>
 8001e02:	1b96      	subs	r6, r2, r6
 8001e04:	1c71      	adds	r1, r6, #1
 8001e06:	291f      	cmp	r1, #31
 8001e08:	dd00      	ble.n	8001e0c <__aeabi_dsub+0xec>
 8001e0a:	e1cb      	b.n	80021a4 <__aeabi_dsub+0x484>
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	0018      	movs	r0, r3
 8001e10:	0026      	movs	r6, r4
 8001e12:	1a52      	subs	r2, r2, r1
 8001e14:	4094      	lsls	r4, r2
 8001e16:	4090      	lsls	r0, r2
 8001e18:	40ce      	lsrs	r6, r1
 8001e1a:	40cb      	lsrs	r3, r1
 8001e1c:	1e62      	subs	r2, r4, #1
 8001e1e:	4194      	sbcs	r4, r2
 8001e20:	4330      	orrs	r0, r6
 8001e22:	4698      	mov	r8, r3
 8001e24:	2600      	movs	r6, #0
 8001e26:	4304      	orrs	r4, r0
 8001e28:	0763      	lsls	r3, r4, #29
 8001e2a:	d009      	beq.n	8001e40 <__aeabi_dsub+0x120>
 8001e2c:	230f      	movs	r3, #15
 8001e2e:	4023      	ands	r3, r4
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d005      	beq.n	8001e40 <__aeabi_dsub+0x120>
 8001e34:	1d23      	adds	r3, r4, #4
 8001e36:	42a3      	cmp	r3, r4
 8001e38:	41a4      	sbcs	r4, r4
 8001e3a:	4264      	negs	r4, r4
 8001e3c:	44a0      	add	r8, r4
 8001e3e:	001c      	movs	r4, r3
 8001e40:	4643      	mov	r3, r8
 8001e42:	021b      	lsls	r3, r3, #8
 8001e44:	d400      	bmi.n	8001e48 <__aeabi_dsub+0x128>
 8001e46:	e0df      	b.n	8002008 <__aeabi_dsub+0x2e8>
 8001e48:	4b82      	ldr	r3, [pc, #520]	; (8002054 <__aeabi_dsub+0x334>)
 8001e4a:	3601      	adds	r6, #1
 8001e4c:	429e      	cmp	r6, r3
 8001e4e:	d100      	bne.n	8001e52 <__aeabi_dsub+0x132>
 8001e50:	e0fb      	b.n	800204a <__aeabi_dsub+0x32a>
 8001e52:	4642      	mov	r2, r8
 8001e54:	4b80      	ldr	r3, [pc, #512]	; (8002058 <__aeabi_dsub+0x338>)
 8001e56:	08e4      	lsrs	r4, r4, #3
 8001e58:	401a      	ands	r2, r3
 8001e5a:	0013      	movs	r3, r2
 8001e5c:	0571      	lsls	r1, r6, #21
 8001e5e:	0752      	lsls	r2, r2, #29
 8001e60:	025b      	lsls	r3, r3, #9
 8001e62:	4322      	orrs	r2, r4
 8001e64:	0b1b      	lsrs	r3, r3, #12
 8001e66:	0d49      	lsrs	r1, r1, #21
 8001e68:	0509      	lsls	r1, r1, #20
 8001e6a:	07ed      	lsls	r5, r5, #31
 8001e6c:	4319      	orrs	r1, r3
 8001e6e:	4329      	orrs	r1, r5
 8001e70:	0010      	movs	r0, r2
 8001e72:	bcf0      	pop	{r4, r5, r6, r7}
 8001e74:	46bb      	mov	fp, r7
 8001e76:	46b2      	mov	sl, r6
 8001e78:	46a9      	mov	r9, r5
 8001e7a:	46a0      	mov	r8, r4
 8001e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e7e:	1ab4      	subs	r4, r6, r2
 8001e80:	46a4      	mov	ip, r4
 8001e82:	2c00      	cmp	r4, #0
 8001e84:	dd58      	ble.n	8001f38 <__aeabi_dsub+0x218>
 8001e86:	2a00      	cmp	r2, #0
 8001e88:	d100      	bne.n	8001e8c <__aeabi_dsub+0x16c>
 8001e8a:	e09e      	b.n	8001fca <__aeabi_dsub+0x2aa>
 8001e8c:	4a71      	ldr	r2, [pc, #452]	; (8002054 <__aeabi_dsub+0x334>)
 8001e8e:	4296      	cmp	r6, r2
 8001e90:	d100      	bne.n	8001e94 <__aeabi_dsub+0x174>
 8001e92:	e13b      	b.n	800210c <__aeabi_dsub+0x3ec>
 8001e94:	2280      	movs	r2, #128	; 0x80
 8001e96:	0412      	lsls	r2, r2, #16
 8001e98:	4311      	orrs	r1, r2
 8001e9a:	4662      	mov	r2, ip
 8001e9c:	2a38      	cmp	r2, #56	; 0x38
 8001e9e:	dd00      	ble.n	8001ea2 <__aeabi_dsub+0x182>
 8001ea0:	e0c1      	b.n	8002026 <__aeabi_dsub+0x306>
 8001ea2:	2a1f      	cmp	r2, #31
 8001ea4:	dc00      	bgt.n	8001ea8 <__aeabi_dsub+0x188>
 8001ea6:	e1bb      	b.n	8002220 <__aeabi_dsub+0x500>
 8001ea8:	000c      	movs	r4, r1
 8001eaa:	3a20      	subs	r2, #32
 8001eac:	40d4      	lsrs	r4, r2
 8001eae:	0022      	movs	r2, r4
 8001eb0:	4664      	mov	r4, ip
 8001eb2:	2c20      	cmp	r4, #32
 8001eb4:	d004      	beq.n	8001ec0 <__aeabi_dsub+0x1a0>
 8001eb6:	2740      	movs	r7, #64	; 0x40
 8001eb8:	1b3f      	subs	r7, r7, r4
 8001eba:	40b9      	lsls	r1, r7
 8001ebc:	4308      	orrs	r0, r1
 8001ebe:	4680      	mov	r8, r0
 8001ec0:	4644      	mov	r4, r8
 8001ec2:	1e61      	subs	r1, r4, #1
 8001ec4:	418c      	sbcs	r4, r1
 8001ec6:	4314      	orrs	r4, r2
 8001ec8:	e0b1      	b.n	800202e <__aeabi_dsub+0x30e>
 8001eca:	000c      	movs	r4, r1
 8001ecc:	4304      	orrs	r4, r0
 8001ece:	d02a      	beq.n	8001f26 <__aeabi_dsub+0x206>
 8001ed0:	46bb      	mov	fp, r7
 8001ed2:	42bd      	cmp	r5, r7
 8001ed4:	d02d      	beq.n	8001f32 <__aeabi_dsub+0x212>
 8001ed6:	4c61      	ldr	r4, [pc, #388]	; (800205c <__aeabi_dsub+0x33c>)
 8001ed8:	46a4      	mov	ip, r4
 8001eda:	44b4      	add	ip, r6
 8001edc:	4664      	mov	r4, ip
 8001ede:	2c00      	cmp	r4, #0
 8001ee0:	d05c      	beq.n	8001f9c <__aeabi_dsub+0x27c>
 8001ee2:	1b94      	subs	r4, r2, r6
 8001ee4:	46a4      	mov	ip, r4
 8001ee6:	2e00      	cmp	r6, #0
 8001ee8:	d000      	beq.n	8001eec <__aeabi_dsub+0x1cc>
 8001eea:	e115      	b.n	8002118 <__aeabi_dsub+0x3f8>
 8001eec:	464d      	mov	r5, r9
 8001eee:	431d      	orrs	r5, r3
 8001ef0:	d100      	bne.n	8001ef4 <__aeabi_dsub+0x1d4>
 8001ef2:	e1c3      	b.n	800227c <__aeabi_dsub+0x55c>
 8001ef4:	1e65      	subs	r5, r4, #1
 8001ef6:	2c01      	cmp	r4, #1
 8001ef8:	d100      	bne.n	8001efc <__aeabi_dsub+0x1dc>
 8001efa:	e20c      	b.n	8002316 <__aeabi_dsub+0x5f6>
 8001efc:	4e55      	ldr	r6, [pc, #340]	; (8002054 <__aeabi_dsub+0x334>)
 8001efe:	42b4      	cmp	r4, r6
 8001f00:	d100      	bne.n	8001f04 <__aeabi_dsub+0x1e4>
 8001f02:	e1f8      	b.n	80022f6 <__aeabi_dsub+0x5d6>
 8001f04:	46ac      	mov	ip, r5
 8001f06:	e10e      	b.n	8002126 <__aeabi_dsub+0x406>
 8001f08:	000a      	movs	r2, r1
 8001f0a:	4302      	orrs	r2, r0
 8001f0c:	d100      	bne.n	8001f10 <__aeabi_dsub+0x1f0>
 8001f0e:	e136      	b.n	800217e <__aeabi_dsub+0x45e>
 8001f10:	0022      	movs	r2, r4
 8001f12:	3a01      	subs	r2, #1
 8001f14:	2c01      	cmp	r4, #1
 8001f16:	d100      	bne.n	8001f1a <__aeabi_dsub+0x1fa>
 8001f18:	e1c6      	b.n	80022a8 <__aeabi_dsub+0x588>
 8001f1a:	4c4e      	ldr	r4, [pc, #312]	; (8002054 <__aeabi_dsub+0x334>)
 8001f1c:	45a4      	cmp	ip, r4
 8001f1e:	d100      	bne.n	8001f22 <__aeabi_dsub+0x202>
 8001f20:	e0f4      	b.n	800210c <__aeabi_dsub+0x3ec>
 8001f22:	4694      	mov	ip, r2
 8001f24:	e731      	b.n	8001d8a <__aeabi_dsub+0x6a>
 8001f26:	2401      	movs	r4, #1
 8001f28:	4067      	eors	r7, r4
 8001f2a:	46bb      	mov	fp, r7
 8001f2c:	42bd      	cmp	r5, r7
 8001f2e:	d000      	beq.n	8001f32 <__aeabi_dsub+0x212>
 8001f30:	e71c      	b.n	8001d6c <__aeabi_dsub+0x4c>
 8001f32:	4c4a      	ldr	r4, [pc, #296]	; (800205c <__aeabi_dsub+0x33c>)
 8001f34:	46a4      	mov	ip, r4
 8001f36:	44b4      	add	ip, r6
 8001f38:	4664      	mov	r4, ip
 8001f3a:	2c00      	cmp	r4, #0
 8001f3c:	d100      	bne.n	8001f40 <__aeabi_dsub+0x220>
 8001f3e:	e0cf      	b.n	80020e0 <__aeabi_dsub+0x3c0>
 8001f40:	1b94      	subs	r4, r2, r6
 8001f42:	46a4      	mov	ip, r4
 8001f44:	2e00      	cmp	r6, #0
 8001f46:	d100      	bne.n	8001f4a <__aeabi_dsub+0x22a>
 8001f48:	e15c      	b.n	8002204 <__aeabi_dsub+0x4e4>
 8001f4a:	4e42      	ldr	r6, [pc, #264]	; (8002054 <__aeabi_dsub+0x334>)
 8001f4c:	42b2      	cmp	r2, r6
 8001f4e:	d100      	bne.n	8001f52 <__aeabi_dsub+0x232>
 8001f50:	e1ec      	b.n	800232c <__aeabi_dsub+0x60c>
 8001f52:	2680      	movs	r6, #128	; 0x80
 8001f54:	0436      	lsls	r6, r6, #16
 8001f56:	4333      	orrs	r3, r6
 8001f58:	4664      	mov	r4, ip
 8001f5a:	2c38      	cmp	r4, #56	; 0x38
 8001f5c:	dd00      	ble.n	8001f60 <__aeabi_dsub+0x240>
 8001f5e:	e1b3      	b.n	80022c8 <__aeabi_dsub+0x5a8>
 8001f60:	2c1f      	cmp	r4, #31
 8001f62:	dd00      	ble.n	8001f66 <__aeabi_dsub+0x246>
 8001f64:	e238      	b.n	80023d8 <__aeabi_dsub+0x6b8>
 8001f66:	2620      	movs	r6, #32
 8001f68:	1b36      	subs	r6, r6, r4
 8001f6a:	001c      	movs	r4, r3
 8001f6c:	40b4      	lsls	r4, r6
 8001f6e:	464f      	mov	r7, r9
 8001f70:	46a0      	mov	r8, r4
 8001f72:	4664      	mov	r4, ip
 8001f74:	40e7      	lsrs	r7, r4
 8001f76:	4644      	mov	r4, r8
 8001f78:	433c      	orrs	r4, r7
 8001f7a:	464f      	mov	r7, r9
 8001f7c:	40b7      	lsls	r7, r6
 8001f7e:	003e      	movs	r6, r7
 8001f80:	1e77      	subs	r7, r6, #1
 8001f82:	41be      	sbcs	r6, r7
 8001f84:	4334      	orrs	r4, r6
 8001f86:	4666      	mov	r6, ip
 8001f88:	40f3      	lsrs	r3, r6
 8001f8a:	18c9      	adds	r1, r1, r3
 8001f8c:	1824      	adds	r4, r4, r0
 8001f8e:	4284      	cmp	r4, r0
 8001f90:	419b      	sbcs	r3, r3
 8001f92:	425b      	negs	r3, r3
 8001f94:	4698      	mov	r8, r3
 8001f96:	0016      	movs	r6, r2
 8001f98:	4488      	add	r8, r1
 8001f9a:	e04e      	b.n	800203a <__aeabi_dsub+0x31a>
 8001f9c:	4a30      	ldr	r2, [pc, #192]	; (8002060 <__aeabi_dsub+0x340>)
 8001f9e:	1c74      	adds	r4, r6, #1
 8001fa0:	4214      	tst	r4, r2
 8001fa2:	d000      	beq.n	8001fa6 <__aeabi_dsub+0x286>
 8001fa4:	e0d6      	b.n	8002154 <__aeabi_dsub+0x434>
 8001fa6:	464a      	mov	r2, r9
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	2e00      	cmp	r6, #0
 8001fac:	d000      	beq.n	8001fb0 <__aeabi_dsub+0x290>
 8001fae:	e15b      	b.n	8002268 <__aeabi_dsub+0x548>
 8001fb0:	2a00      	cmp	r2, #0
 8001fb2:	d100      	bne.n	8001fb6 <__aeabi_dsub+0x296>
 8001fb4:	e1a5      	b.n	8002302 <__aeabi_dsub+0x5e2>
 8001fb6:	000a      	movs	r2, r1
 8001fb8:	4302      	orrs	r2, r0
 8001fba:	d000      	beq.n	8001fbe <__aeabi_dsub+0x29e>
 8001fbc:	e1bb      	b.n	8002336 <__aeabi_dsub+0x616>
 8001fbe:	464a      	mov	r2, r9
 8001fc0:	0759      	lsls	r1, r3, #29
 8001fc2:	08d2      	lsrs	r2, r2, #3
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	08db      	lsrs	r3, r3, #3
 8001fc8:	e027      	b.n	800201a <__aeabi_dsub+0x2fa>
 8001fca:	000a      	movs	r2, r1
 8001fcc:	4302      	orrs	r2, r0
 8001fce:	d100      	bne.n	8001fd2 <__aeabi_dsub+0x2b2>
 8001fd0:	e174      	b.n	80022bc <__aeabi_dsub+0x59c>
 8001fd2:	0022      	movs	r2, r4
 8001fd4:	3a01      	subs	r2, #1
 8001fd6:	2c01      	cmp	r4, #1
 8001fd8:	d005      	beq.n	8001fe6 <__aeabi_dsub+0x2c6>
 8001fda:	4c1e      	ldr	r4, [pc, #120]	; (8002054 <__aeabi_dsub+0x334>)
 8001fdc:	45a4      	cmp	ip, r4
 8001fde:	d100      	bne.n	8001fe2 <__aeabi_dsub+0x2c2>
 8001fe0:	e094      	b.n	800210c <__aeabi_dsub+0x3ec>
 8001fe2:	4694      	mov	ip, r2
 8001fe4:	e759      	b.n	8001e9a <__aeabi_dsub+0x17a>
 8001fe6:	4448      	add	r0, r9
 8001fe8:	4548      	cmp	r0, r9
 8001fea:	4192      	sbcs	r2, r2
 8001fec:	185b      	adds	r3, r3, r1
 8001fee:	4698      	mov	r8, r3
 8001ff0:	0004      	movs	r4, r0
 8001ff2:	4252      	negs	r2, r2
 8001ff4:	4490      	add	r8, r2
 8001ff6:	4643      	mov	r3, r8
 8001ff8:	2602      	movs	r6, #2
 8001ffa:	021b      	lsls	r3, r3, #8
 8001ffc:	d500      	bpl.n	8002000 <__aeabi_dsub+0x2e0>
 8001ffe:	e0c4      	b.n	800218a <__aeabi_dsub+0x46a>
 8002000:	3e01      	subs	r6, #1
 8002002:	0763      	lsls	r3, r4, #29
 8002004:	d000      	beq.n	8002008 <__aeabi_dsub+0x2e8>
 8002006:	e711      	b.n	8001e2c <__aeabi_dsub+0x10c>
 8002008:	4643      	mov	r3, r8
 800200a:	46b4      	mov	ip, r6
 800200c:	0759      	lsls	r1, r3, #29
 800200e:	08e2      	lsrs	r2, r4, #3
 8002010:	430a      	orrs	r2, r1
 8002012:	08db      	lsrs	r3, r3, #3
 8002014:	490f      	ldr	r1, [pc, #60]	; (8002054 <__aeabi_dsub+0x334>)
 8002016:	458c      	cmp	ip, r1
 8002018:	d040      	beq.n	800209c <__aeabi_dsub+0x37c>
 800201a:	4661      	mov	r1, ip
 800201c:	031b      	lsls	r3, r3, #12
 800201e:	0549      	lsls	r1, r1, #21
 8002020:	0b1b      	lsrs	r3, r3, #12
 8002022:	0d49      	lsrs	r1, r1, #21
 8002024:	e720      	b.n	8001e68 <__aeabi_dsub+0x148>
 8002026:	4301      	orrs	r1, r0
 8002028:	000c      	movs	r4, r1
 800202a:	1e61      	subs	r1, r4, #1
 800202c:	418c      	sbcs	r4, r1
 800202e:	444c      	add	r4, r9
 8002030:	454c      	cmp	r4, r9
 8002032:	4192      	sbcs	r2, r2
 8002034:	4252      	negs	r2, r2
 8002036:	4690      	mov	r8, r2
 8002038:	4498      	add	r8, r3
 800203a:	4643      	mov	r3, r8
 800203c:	021b      	lsls	r3, r3, #8
 800203e:	d5e0      	bpl.n	8002002 <__aeabi_dsub+0x2e2>
 8002040:	4b04      	ldr	r3, [pc, #16]	; (8002054 <__aeabi_dsub+0x334>)
 8002042:	3601      	adds	r6, #1
 8002044:	429e      	cmp	r6, r3
 8002046:	d000      	beq.n	800204a <__aeabi_dsub+0x32a>
 8002048:	e09f      	b.n	800218a <__aeabi_dsub+0x46a>
 800204a:	0031      	movs	r1, r6
 800204c:	2300      	movs	r3, #0
 800204e:	2200      	movs	r2, #0
 8002050:	e70a      	b.n	8001e68 <__aeabi_dsub+0x148>
 8002052:	46c0      	nop			; (mov r8, r8)
 8002054:	000007ff 	.word	0x000007ff
 8002058:	ff7fffff 	.word	0xff7fffff
 800205c:	fffff801 	.word	0xfffff801
 8002060:	000007fe 	.word	0x000007fe
 8002064:	2a00      	cmp	r2, #0
 8002066:	d100      	bne.n	800206a <__aeabi_dsub+0x34a>
 8002068:	e160      	b.n	800232c <__aeabi_dsub+0x60c>
 800206a:	000a      	movs	r2, r1
 800206c:	4302      	orrs	r2, r0
 800206e:	d04d      	beq.n	800210c <__aeabi_dsub+0x3ec>
 8002070:	464a      	mov	r2, r9
 8002072:	075c      	lsls	r4, r3, #29
 8002074:	08d2      	lsrs	r2, r2, #3
 8002076:	4322      	orrs	r2, r4
 8002078:	2480      	movs	r4, #128	; 0x80
 800207a:	08db      	lsrs	r3, r3, #3
 800207c:	0324      	lsls	r4, r4, #12
 800207e:	4223      	tst	r3, r4
 8002080:	d007      	beq.n	8002092 <__aeabi_dsub+0x372>
 8002082:	08ce      	lsrs	r6, r1, #3
 8002084:	4226      	tst	r6, r4
 8002086:	d104      	bne.n	8002092 <__aeabi_dsub+0x372>
 8002088:	465d      	mov	r5, fp
 800208a:	0033      	movs	r3, r6
 800208c:	08c2      	lsrs	r2, r0, #3
 800208e:	0749      	lsls	r1, r1, #29
 8002090:	430a      	orrs	r2, r1
 8002092:	0f51      	lsrs	r1, r2, #29
 8002094:	00d2      	lsls	r2, r2, #3
 8002096:	08d2      	lsrs	r2, r2, #3
 8002098:	0749      	lsls	r1, r1, #29
 800209a:	430a      	orrs	r2, r1
 800209c:	0011      	movs	r1, r2
 800209e:	4319      	orrs	r1, r3
 80020a0:	d100      	bne.n	80020a4 <__aeabi_dsub+0x384>
 80020a2:	e1c8      	b.n	8002436 <__aeabi_dsub+0x716>
 80020a4:	2180      	movs	r1, #128	; 0x80
 80020a6:	0309      	lsls	r1, r1, #12
 80020a8:	430b      	orrs	r3, r1
 80020aa:	031b      	lsls	r3, r3, #12
 80020ac:	49d5      	ldr	r1, [pc, #852]	; (8002404 <__aeabi_dsub+0x6e4>)
 80020ae:	0b1b      	lsrs	r3, r3, #12
 80020b0:	e6da      	b.n	8001e68 <__aeabi_dsub+0x148>
 80020b2:	49d5      	ldr	r1, [pc, #852]	; (8002408 <__aeabi_dsub+0x6e8>)
 80020b4:	1ab6      	subs	r6, r6, r2
 80020b6:	400b      	ands	r3, r1
 80020b8:	4698      	mov	r8, r3
 80020ba:	e6b5      	b.n	8001e28 <__aeabi_dsub+0x108>
 80020bc:	0020      	movs	r0, r4
 80020be:	f000 fab3 	bl	8002628 <__clzsi2>
 80020c2:	0002      	movs	r2, r0
 80020c4:	3218      	adds	r2, #24
 80020c6:	2a1f      	cmp	r2, #31
 80020c8:	dc00      	bgt.n	80020cc <__aeabi_dsub+0x3ac>
 80020ca:	e68f      	b.n	8001dec <__aeabi_dsub+0xcc>
 80020cc:	0023      	movs	r3, r4
 80020ce:	3808      	subs	r0, #8
 80020d0:	4083      	lsls	r3, r0
 80020d2:	2400      	movs	r4, #0
 80020d4:	e692      	b.n	8001dfc <__aeabi_dsub+0xdc>
 80020d6:	4308      	orrs	r0, r1
 80020d8:	0002      	movs	r2, r0
 80020da:	1e50      	subs	r0, r2, #1
 80020dc:	4182      	sbcs	r2, r0
 80020de:	e66d      	b.n	8001dbc <__aeabi_dsub+0x9c>
 80020e0:	4cca      	ldr	r4, [pc, #808]	; (800240c <__aeabi_dsub+0x6ec>)
 80020e2:	1c72      	adds	r2, r6, #1
 80020e4:	4222      	tst	r2, r4
 80020e6:	d000      	beq.n	80020ea <__aeabi_dsub+0x3ca>
 80020e8:	e0ad      	b.n	8002246 <__aeabi_dsub+0x526>
 80020ea:	464a      	mov	r2, r9
 80020ec:	431a      	orrs	r2, r3
 80020ee:	2e00      	cmp	r6, #0
 80020f0:	d1b8      	bne.n	8002064 <__aeabi_dsub+0x344>
 80020f2:	2a00      	cmp	r2, #0
 80020f4:	d100      	bne.n	80020f8 <__aeabi_dsub+0x3d8>
 80020f6:	e158      	b.n	80023aa <__aeabi_dsub+0x68a>
 80020f8:	000a      	movs	r2, r1
 80020fa:	4302      	orrs	r2, r0
 80020fc:	d000      	beq.n	8002100 <__aeabi_dsub+0x3e0>
 80020fe:	e159      	b.n	80023b4 <__aeabi_dsub+0x694>
 8002100:	464a      	mov	r2, r9
 8002102:	0759      	lsls	r1, r3, #29
 8002104:	08d2      	lsrs	r2, r2, #3
 8002106:	430a      	orrs	r2, r1
 8002108:	08db      	lsrs	r3, r3, #3
 800210a:	e786      	b.n	800201a <__aeabi_dsub+0x2fa>
 800210c:	464a      	mov	r2, r9
 800210e:	0759      	lsls	r1, r3, #29
 8002110:	08d2      	lsrs	r2, r2, #3
 8002112:	430a      	orrs	r2, r1
 8002114:	08db      	lsrs	r3, r3, #3
 8002116:	e7c1      	b.n	800209c <__aeabi_dsub+0x37c>
 8002118:	4dba      	ldr	r5, [pc, #744]	; (8002404 <__aeabi_dsub+0x6e4>)
 800211a:	42aa      	cmp	r2, r5
 800211c:	d100      	bne.n	8002120 <__aeabi_dsub+0x400>
 800211e:	e11e      	b.n	800235e <__aeabi_dsub+0x63e>
 8002120:	2580      	movs	r5, #128	; 0x80
 8002122:	042d      	lsls	r5, r5, #16
 8002124:	432b      	orrs	r3, r5
 8002126:	4664      	mov	r4, ip
 8002128:	2c38      	cmp	r4, #56	; 0x38
 800212a:	dc5d      	bgt.n	80021e8 <__aeabi_dsub+0x4c8>
 800212c:	2c1f      	cmp	r4, #31
 800212e:	dd00      	ble.n	8002132 <__aeabi_dsub+0x412>
 8002130:	e0d0      	b.n	80022d4 <__aeabi_dsub+0x5b4>
 8002132:	2520      	movs	r5, #32
 8002134:	4667      	mov	r7, ip
 8002136:	1b2d      	subs	r5, r5, r4
 8002138:	464e      	mov	r6, r9
 800213a:	001c      	movs	r4, r3
 800213c:	40fe      	lsrs	r6, r7
 800213e:	40ac      	lsls	r4, r5
 8002140:	4334      	orrs	r4, r6
 8002142:	464e      	mov	r6, r9
 8002144:	40ae      	lsls	r6, r5
 8002146:	0035      	movs	r5, r6
 8002148:	40fb      	lsrs	r3, r7
 800214a:	1e6e      	subs	r6, r5, #1
 800214c:	41b5      	sbcs	r5, r6
 800214e:	1ac9      	subs	r1, r1, r3
 8002150:	432c      	orrs	r4, r5
 8002152:	e04e      	b.n	80021f2 <__aeabi_dsub+0x4d2>
 8002154:	464a      	mov	r2, r9
 8002156:	1a14      	subs	r4, r2, r0
 8002158:	45a1      	cmp	r9, r4
 800215a:	4192      	sbcs	r2, r2
 800215c:	4252      	negs	r2, r2
 800215e:	4690      	mov	r8, r2
 8002160:	1a5f      	subs	r7, r3, r1
 8002162:	003a      	movs	r2, r7
 8002164:	4647      	mov	r7, r8
 8002166:	1bd2      	subs	r2, r2, r7
 8002168:	4690      	mov	r8, r2
 800216a:	0212      	lsls	r2, r2, #8
 800216c:	d500      	bpl.n	8002170 <__aeabi_dsub+0x450>
 800216e:	e08b      	b.n	8002288 <__aeabi_dsub+0x568>
 8002170:	4642      	mov	r2, r8
 8002172:	4322      	orrs	r2, r4
 8002174:	d000      	beq.n	8002178 <__aeabi_dsub+0x458>
 8002176:	e630      	b.n	8001dda <__aeabi_dsub+0xba>
 8002178:	2300      	movs	r3, #0
 800217a:	2500      	movs	r5, #0
 800217c:	e74d      	b.n	800201a <__aeabi_dsub+0x2fa>
 800217e:	464a      	mov	r2, r9
 8002180:	0759      	lsls	r1, r3, #29
 8002182:	08d2      	lsrs	r2, r2, #3
 8002184:	430a      	orrs	r2, r1
 8002186:	08db      	lsrs	r3, r3, #3
 8002188:	e744      	b.n	8002014 <__aeabi_dsub+0x2f4>
 800218a:	4642      	mov	r2, r8
 800218c:	4b9e      	ldr	r3, [pc, #632]	; (8002408 <__aeabi_dsub+0x6e8>)
 800218e:	0861      	lsrs	r1, r4, #1
 8002190:	401a      	ands	r2, r3
 8002192:	0013      	movs	r3, r2
 8002194:	2201      	movs	r2, #1
 8002196:	4014      	ands	r4, r2
 8002198:	430c      	orrs	r4, r1
 800219a:	07da      	lsls	r2, r3, #31
 800219c:	085b      	lsrs	r3, r3, #1
 800219e:	4698      	mov	r8, r3
 80021a0:	4314      	orrs	r4, r2
 80021a2:	e641      	b.n	8001e28 <__aeabi_dsub+0x108>
 80021a4:	001a      	movs	r2, r3
 80021a6:	3e1f      	subs	r6, #31
 80021a8:	40f2      	lsrs	r2, r6
 80021aa:	0016      	movs	r6, r2
 80021ac:	2920      	cmp	r1, #32
 80021ae:	d003      	beq.n	80021b8 <__aeabi_dsub+0x498>
 80021b0:	2240      	movs	r2, #64	; 0x40
 80021b2:	1a51      	subs	r1, r2, r1
 80021b4:	408b      	lsls	r3, r1
 80021b6:	431c      	orrs	r4, r3
 80021b8:	1e62      	subs	r2, r4, #1
 80021ba:	4194      	sbcs	r4, r2
 80021bc:	2300      	movs	r3, #0
 80021be:	4334      	orrs	r4, r6
 80021c0:	4698      	mov	r8, r3
 80021c2:	2600      	movs	r6, #0
 80021c4:	e71d      	b.n	8002002 <__aeabi_dsub+0x2e2>
 80021c6:	000c      	movs	r4, r1
 80021c8:	3a20      	subs	r2, #32
 80021ca:	40d4      	lsrs	r4, r2
 80021cc:	0022      	movs	r2, r4
 80021ce:	4664      	mov	r4, ip
 80021d0:	2c20      	cmp	r4, #32
 80021d2:	d004      	beq.n	80021de <__aeabi_dsub+0x4be>
 80021d4:	2740      	movs	r7, #64	; 0x40
 80021d6:	1b3f      	subs	r7, r7, r4
 80021d8:	40b9      	lsls	r1, r7
 80021da:	4308      	orrs	r0, r1
 80021dc:	4680      	mov	r8, r0
 80021de:	4644      	mov	r4, r8
 80021e0:	1e61      	subs	r1, r4, #1
 80021e2:	418c      	sbcs	r4, r1
 80021e4:	4322      	orrs	r2, r4
 80021e6:	e5e9      	b.n	8001dbc <__aeabi_dsub+0x9c>
 80021e8:	464c      	mov	r4, r9
 80021ea:	4323      	orrs	r3, r4
 80021ec:	001c      	movs	r4, r3
 80021ee:	1e63      	subs	r3, r4, #1
 80021f0:	419c      	sbcs	r4, r3
 80021f2:	1b04      	subs	r4, r0, r4
 80021f4:	42a0      	cmp	r0, r4
 80021f6:	419b      	sbcs	r3, r3
 80021f8:	425b      	negs	r3, r3
 80021fa:	1acb      	subs	r3, r1, r3
 80021fc:	4698      	mov	r8, r3
 80021fe:	465d      	mov	r5, fp
 8002200:	0016      	movs	r6, r2
 8002202:	e5e2      	b.n	8001dca <__aeabi_dsub+0xaa>
 8002204:	464e      	mov	r6, r9
 8002206:	431e      	orrs	r6, r3
 8002208:	d100      	bne.n	800220c <__aeabi_dsub+0x4ec>
 800220a:	e0ae      	b.n	800236a <__aeabi_dsub+0x64a>
 800220c:	1e66      	subs	r6, r4, #1
 800220e:	2c01      	cmp	r4, #1
 8002210:	d100      	bne.n	8002214 <__aeabi_dsub+0x4f4>
 8002212:	e0fd      	b.n	8002410 <__aeabi_dsub+0x6f0>
 8002214:	4f7b      	ldr	r7, [pc, #492]	; (8002404 <__aeabi_dsub+0x6e4>)
 8002216:	42bc      	cmp	r4, r7
 8002218:	d100      	bne.n	800221c <__aeabi_dsub+0x4fc>
 800221a:	e107      	b.n	800242c <__aeabi_dsub+0x70c>
 800221c:	46b4      	mov	ip, r6
 800221e:	e69b      	b.n	8001f58 <__aeabi_dsub+0x238>
 8002220:	4664      	mov	r4, ip
 8002222:	2220      	movs	r2, #32
 8002224:	1b12      	subs	r2, r2, r4
 8002226:	000c      	movs	r4, r1
 8002228:	4094      	lsls	r4, r2
 800222a:	0007      	movs	r7, r0
 800222c:	4090      	lsls	r0, r2
 800222e:	46a0      	mov	r8, r4
 8002230:	4664      	mov	r4, ip
 8002232:	1e42      	subs	r2, r0, #1
 8002234:	4190      	sbcs	r0, r2
 8002236:	4662      	mov	r2, ip
 8002238:	40e7      	lsrs	r7, r4
 800223a:	4644      	mov	r4, r8
 800223c:	40d1      	lsrs	r1, r2
 800223e:	433c      	orrs	r4, r7
 8002240:	4304      	orrs	r4, r0
 8002242:	185b      	adds	r3, r3, r1
 8002244:	e6f3      	b.n	800202e <__aeabi_dsub+0x30e>
 8002246:	4c6f      	ldr	r4, [pc, #444]	; (8002404 <__aeabi_dsub+0x6e4>)
 8002248:	42a2      	cmp	r2, r4
 800224a:	d100      	bne.n	800224e <__aeabi_dsub+0x52e>
 800224c:	e0d5      	b.n	80023fa <__aeabi_dsub+0x6da>
 800224e:	4448      	add	r0, r9
 8002250:	185b      	adds	r3, r3, r1
 8002252:	4548      	cmp	r0, r9
 8002254:	4189      	sbcs	r1, r1
 8002256:	4249      	negs	r1, r1
 8002258:	185b      	adds	r3, r3, r1
 800225a:	07dc      	lsls	r4, r3, #31
 800225c:	0840      	lsrs	r0, r0, #1
 800225e:	085b      	lsrs	r3, r3, #1
 8002260:	4698      	mov	r8, r3
 8002262:	0016      	movs	r6, r2
 8002264:	4304      	orrs	r4, r0
 8002266:	e6cc      	b.n	8002002 <__aeabi_dsub+0x2e2>
 8002268:	2a00      	cmp	r2, #0
 800226a:	d000      	beq.n	800226e <__aeabi_dsub+0x54e>
 800226c:	e082      	b.n	8002374 <__aeabi_dsub+0x654>
 800226e:	000a      	movs	r2, r1
 8002270:	4302      	orrs	r2, r0
 8002272:	d140      	bne.n	80022f6 <__aeabi_dsub+0x5d6>
 8002274:	2380      	movs	r3, #128	; 0x80
 8002276:	2500      	movs	r5, #0
 8002278:	031b      	lsls	r3, r3, #12
 800227a:	e713      	b.n	80020a4 <__aeabi_dsub+0x384>
 800227c:	074b      	lsls	r3, r1, #29
 800227e:	08c2      	lsrs	r2, r0, #3
 8002280:	431a      	orrs	r2, r3
 8002282:	465d      	mov	r5, fp
 8002284:	08cb      	lsrs	r3, r1, #3
 8002286:	e6c5      	b.n	8002014 <__aeabi_dsub+0x2f4>
 8002288:	464a      	mov	r2, r9
 800228a:	1a84      	subs	r4, r0, r2
 800228c:	42a0      	cmp	r0, r4
 800228e:	4192      	sbcs	r2, r2
 8002290:	1acb      	subs	r3, r1, r3
 8002292:	4252      	negs	r2, r2
 8002294:	1a9b      	subs	r3, r3, r2
 8002296:	4698      	mov	r8, r3
 8002298:	465d      	mov	r5, fp
 800229a:	e59e      	b.n	8001dda <__aeabi_dsub+0xba>
 800229c:	464a      	mov	r2, r9
 800229e:	0759      	lsls	r1, r3, #29
 80022a0:	08d2      	lsrs	r2, r2, #3
 80022a2:	430a      	orrs	r2, r1
 80022a4:	08db      	lsrs	r3, r3, #3
 80022a6:	e6f9      	b.n	800209c <__aeabi_dsub+0x37c>
 80022a8:	464a      	mov	r2, r9
 80022aa:	1a14      	subs	r4, r2, r0
 80022ac:	45a1      	cmp	r9, r4
 80022ae:	4192      	sbcs	r2, r2
 80022b0:	1a5b      	subs	r3, r3, r1
 80022b2:	4252      	negs	r2, r2
 80022b4:	1a9b      	subs	r3, r3, r2
 80022b6:	4698      	mov	r8, r3
 80022b8:	2601      	movs	r6, #1
 80022ba:	e586      	b.n	8001dca <__aeabi_dsub+0xaa>
 80022bc:	464a      	mov	r2, r9
 80022be:	0759      	lsls	r1, r3, #29
 80022c0:	08d2      	lsrs	r2, r2, #3
 80022c2:	430a      	orrs	r2, r1
 80022c4:	08db      	lsrs	r3, r3, #3
 80022c6:	e6a5      	b.n	8002014 <__aeabi_dsub+0x2f4>
 80022c8:	464c      	mov	r4, r9
 80022ca:	4323      	orrs	r3, r4
 80022cc:	001c      	movs	r4, r3
 80022ce:	1e63      	subs	r3, r4, #1
 80022d0:	419c      	sbcs	r4, r3
 80022d2:	e65b      	b.n	8001f8c <__aeabi_dsub+0x26c>
 80022d4:	4665      	mov	r5, ip
 80022d6:	001e      	movs	r6, r3
 80022d8:	3d20      	subs	r5, #32
 80022da:	40ee      	lsrs	r6, r5
 80022dc:	2c20      	cmp	r4, #32
 80022de:	d005      	beq.n	80022ec <__aeabi_dsub+0x5cc>
 80022e0:	2540      	movs	r5, #64	; 0x40
 80022e2:	1b2d      	subs	r5, r5, r4
 80022e4:	40ab      	lsls	r3, r5
 80022e6:	464c      	mov	r4, r9
 80022e8:	431c      	orrs	r4, r3
 80022ea:	46a2      	mov	sl, r4
 80022ec:	4654      	mov	r4, sl
 80022ee:	1e63      	subs	r3, r4, #1
 80022f0:	419c      	sbcs	r4, r3
 80022f2:	4334      	orrs	r4, r6
 80022f4:	e77d      	b.n	80021f2 <__aeabi_dsub+0x4d2>
 80022f6:	074b      	lsls	r3, r1, #29
 80022f8:	08c2      	lsrs	r2, r0, #3
 80022fa:	431a      	orrs	r2, r3
 80022fc:	465d      	mov	r5, fp
 80022fe:	08cb      	lsrs	r3, r1, #3
 8002300:	e6cc      	b.n	800209c <__aeabi_dsub+0x37c>
 8002302:	000a      	movs	r2, r1
 8002304:	4302      	orrs	r2, r0
 8002306:	d100      	bne.n	800230a <__aeabi_dsub+0x5ea>
 8002308:	e736      	b.n	8002178 <__aeabi_dsub+0x458>
 800230a:	074b      	lsls	r3, r1, #29
 800230c:	08c2      	lsrs	r2, r0, #3
 800230e:	431a      	orrs	r2, r3
 8002310:	465d      	mov	r5, fp
 8002312:	08cb      	lsrs	r3, r1, #3
 8002314:	e681      	b.n	800201a <__aeabi_dsub+0x2fa>
 8002316:	464a      	mov	r2, r9
 8002318:	1a84      	subs	r4, r0, r2
 800231a:	42a0      	cmp	r0, r4
 800231c:	4192      	sbcs	r2, r2
 800231e:	1acb      	subs	r3, r1, r3
 8002320:	4252      	negs	r2, r2
 8002322:	1a9b      	subs	r3, r3, r2
 8002324:	4698      	mov	r8, r3
 8002326:	465d      	mov	r5, fp
 8002328:	2601      	movs	r6, #1
 800232a:	e54e      	b.n	8001dca <__aeabi_dsub+0xaa>
 800232c:	074b      	lsls	r3, r1, #29
 800232e:	08c2      	lsrs	r2, r0, #3
 8002330:	431a      	orrs	r2, r3
 8002332:	08cb      	lsrs	r3, r1, #3
 8002334:	e6b2      	b.n	800209c <__aeabi_dsub+0x37c>
 8002336:	464a      	mov	r2, r9
 8002338:	1a14      	subs	r4, r2, r0
 800233a:	45a1      	cmp	r9, r4
 800233c:	4192      	sbcs	r2, r2
 800233e:	1a5f      	subs	r7, r3, r1
 8002340:	4252      	negs	r2, r2
 8002342:	1aba      	subs	r2, r7, r2
 8002344:	4690      	mov	r8, r2
 8002346:	0212      	lsls	r2, r2, #8
 8002348:	d56b      	bpl.n	8002422 <__aeabi_dsub+0x702>
 800234a:	464a      	mov	r2, r9
 800234c:	1a84      	subs	r4, r0, r2
 800234e:	42a0      	cmp	r0, r4
 8002350:	4192      	sbcs	r2, r2
 8002352:	1acb      	subs	r3, r1, r3
 8002354:	4252      	negs	r2, r2
 8002356:	1a9b      	subs	r3, r3, r2
 8002358:	4698      	mov	r8, r3
 800235a:	465d      	mov	r5, fp
 800235c:	e564      	b.n	8001e28 <__aeabi_dsub+0x108>
 800235e:	074b      	lsls	r3, r1, #29
 8002360:	08c2      	lsrs	r2, r0, #3
 8002362:	431a      	orrs	r2, r3
 8002364:	465d      	mov	r5, fp
 8002366:	08cb      	lsrs	r3, r1, #3
 8002368:	e698      	b.n	800209c <__aeabi_dsub+0x37c>
 800236a:	074b      	lsls	r3, r1, #29
 800236c:	08c2      	lsrs	r2, r0, #3
 800236e:	431a      	orrs	r2, r3
 8002370:	08cb      	lsrs	r3, r1, #3
 8002372:	e64f      	b.n	8002014 <__aeabi_dsub+0x2f4>
 8002374:	000a      	movs	r2, r1
 8002376:	4302      	orrs	r2, r0
 8002378:	d090      	beq.n	800229c <__aeabi_dsub+0x57c>
 800237a:	464a      	mov	r2, r9
 800237c:	075c      	lsls	r4, r3, #29
 800237e:	08d2      	lsrs	r2, r2, #3
 8002380:	4314      	orrs	r4, r2
 8002382:	2280      	movs	r2, #128	; 0x80
 8002384:	08db      	lsrs	r3, r3, #3
 8002386:	0312      	lsls	r2, r2, #12
 8002388:	4213      	tst	r3, r2
 800238a:	d008      	beq.n	800239e <__aeabi_dsub+0x67e>
 800238c:	08ce      	lsrs	r6, r1, #3
 800238e:	4216      	tst	r6, r2
 8002390:	d105      	bne.n	800239e <__aeabi_dsub+0x67e>
 8002392:	08c0      	lsrs	r0, r0, #3
 8002394:	0749      	lsls	r1, r1, #29
 8002396:	4308      	orrs	r0, r1
 8002398:	0004      	movs	r4, r0
 800239a:	465d      	mov	r5, fp
 800239c:	0033      	movs	r3, r6
 800239e:	0f61      	lsrs	r1, r4, #29
 80023a0:	00e2      	lsls	r2, r4, #3
 80023a2:	0749      	lsls	r1, r1, #29
 80023a4:	08d2      	lsrs	r2, r2, #3
 80023a6:	430a      	orrs	r2, r1
 80023a8:	e678      	b.n	800209c <__aeabi_dsub+0x37c>
 80023aa:	074b      	lsls	r3, r1, #29
 80023ac:	08c2      	lsrs	r2, r0, #3
 80023ae:	431a      	orrs	r2, r3
 80023b0:	08cb      	lsrs	r3, r1, #3
 80023b2:	e632      	b.n	800201a <__aeabi_dsub+0x2fa>
 80023b4:	4448      	add	r0, r9
 80023b6:	185b      	adds	r3, r3, r1
 80023b8:	4548      	cmp	r0, r9
 80023ba:	4192      	sbcs	r2, r2
 80023bc:	4698      	mov	r8, r3
 80023be:	4252      	negs	r2, r2
 80023c0:	4490      	add	r8, r2
 80023c2:	4643      	mov	r3, r8
 80023c4:	0004      	movs	r4, r0
 80023c6:	021b      	lsls	r3, r3, #8
 80023c8:	d400      	bmi.n	80023cc <__aeabi_dsub+0x6ac>
 80023ca:	e61a      	b.n	8002002 <__aeabi_dsub+0x2e2>
 80023cc:	4642      	mov	r2, r8
 80023ce:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <__aeabi_dsub+0x6e8>)
 80023d0:	2601      	movs	r6, #1
 80023d2:	401a      	ands	r2, r3
 80023d4:	4690      	mov	r8, r2
 80023d6:	e614      	b.n	8002002 <__aeabi_dsub+0x2e2>
 80023d8:	4666      	mov	r6, ip
 80023da:	001f      	movs	r7, r3
 80023dc:	3e20      	subs	r6, #32
 80023de:	40f7      	lsrs	r7, r6
 80023e0:	2c20      	cmp	r4, #32
 80023e2:	d005      	beq.n	80023f0 <__aeabi_dsub+0x6d0>
 80023e4:	2640      	movs	r6, #64	; 0x40
 80023e6:	1b36      	subs	r6, r6, r4
 80023e8:	40b3      	lsls	r3, r6
 80023ea:	464c      	mov	r4, r9
 80023ec:	431c      	orrs	r4, r3
 80023ee:	46a2      	mov	sl, r4
 80023f0:	4654      	mov	r4, sl
 80023f2:	1e63      	subs	r3, r4, #1
 80023f4:	419c      	sbcs	r4, r3
 80023f6:	433c      	orrs	r4, r7
 80023f8:	e5c8      	b.n	8001f8c <__aeabi_dsub+0x26c>
 80023fa:	0011      	movs	r1, r2
 80023fc:	2300      	movs	r3, #0
 80023fe:	2200      	movs	r2, #0
 8002400:	e532      	b.n	8001e68 <__aeabi_dsub+0x148>
 8002402:	46c0      	nop			; (mov r8, r8)
 8002404:	000007ff 	.word	0x000007ff
 8002408:	ff7fffff 	.word	0xff7fffff
 800240c:	000007fe 	.word	0x000007fe
 8002410:	464a      	mov	r2, r9
 8002412:	1814      	adds	r4, r2, r0
 8002414:	4284      	cmp	r4, r0
 8002416:	4192      	sbcs	r2, r2
 8002418:	185b      	adds	r3, r3, r1
 800241a:	4698      	mov	r8, r3
 800241c:	4252      	negs	r2, r2
 800241e:	4490      	add	r8, r2
 8002420:	e5e9      	b.n	8001ff6 <__aeabi_dsub+0x2d6>
 8002422:	4642      	mov	r2, r8
 8002424:	4322      	orrs	r2, r4
 8002426:	d100      	bne.n	800242a <__aeabi_dsub+0x70a>
 8002428:	e6a6      	b.n	8002178 <__aeabi_dsub+0x458>
 800242a:	e5ea      	b.n	8002002 <__aeabi_dsub+0x2e2>
 800242c:	074b      	lsls	r3, r1, #29
 800242e:	08c2      	lsrs	r2, r0, #3
 8002430:	431a      	orrs	r2, r3
 8002432:	08cb      	lsrs	r3, r1, #3
 8002434:	e632      	b.n	800209c <__aeabi_dsub+0x37c>
 8002436:	2200      	movs	r2, #0
 8002438:	4901      	ldr	r1, [pc, #4]	; (8002440 <__aeabi_dsub+0x720>)
 800243a:	0013      	movs	r3, r2
 800243c:	e514      	b.n	8001e68 <__aeabi_dsub+0x148>
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	000007ff 	.word	0x000007ff

08002444 <__aeabi_dcmpun>:
 8002444:	b570      	push	{r4, r5, r6, lr}
 8002446:	0005      	movs	r5, r0
 8002448:	480c      	ldr	r0, [pc, #48]	; (800247c <__aeabi_dcmpun+0x38>)
 800244a:	030c      	lsls	r4, r1, #12
 800244c:	0016      	movs	r6, r2
 800244e:	0049      	lsls	r1, r1, #1
 8002450:	031a      	lsls	r2, r3, #12
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	0b24      	lsrs	r4, r4, #12
 8002456:	0d49      	lsrs	r1, r1, #21
 8002458:	0b12      	lsrs	r2, r2, #12
 800245a:	0d5b      	lsrs	r3, r3, #21
 800245c:	4281      	cmp	r1, r0
 800245e:	d008      	beq.n	8002472 <__aeabi_dcmpun+0x2e>
 8002460:	4906      	ldr	r1, [pc, #24]	; (800247c <__aeabi_dcmpun+0x38>)
 8002462:	2000      	movs	r0, #0
 8002464:	428b      	cmp	r3, r1
 8002466:	d103      	bne.n	8002470 <__aeabi_dcmpun+0x2c>
 8002468:	4332      	orrs	r2, r6
 800246a:	0010      	movs	r0, r2
 800246c:	1e42      	subs	r2, r0, #1
 800246e:	4190      	sbcs	r0, r2
 8002470:	bd70      	pop	{r4, r5, r6, pc}
 8002472:	2001      	movs	r0, #1
 8002474:	432c      	orrs	r4, r5
 8002476:	d1fb      	bne.n	8002470 <__aeabi_dcmpun+0x2c>
 8002478:	e7f2      	b.n	8002460 <__aeabi_dcmpun+0x1c>
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	000007ff 	.word	0x000007ff

08002480 <__aeabi_d2iz>:
 8002480:	000a      	movs	r2, r1
 8002482:	b530      	push	{r4, r5, lr}
 8002484:	4c13      	ldr	r4, [pc, #76]	; (80024d4 <__aeabi_d2iz+0x54>)
 8002486:	0053      	lsls	r3, r2, #1
 8002488:	0309      	lsls	r1, r1, #12
 800248a:	0005      	movs	r5, r0
 800248c:	0b09      	lsrs	r1, r1, #12
 800248e:	2000      	movs	r0, #0
 8002490:	0d5b      	lsrs	r3, r3, #21
 8002492:	0fd2      	lsrs	r2, r2, #31
 8002494:	42a3      	cmp	r3, r4
 8002496:	dd04      	ble.n	80024a2 <__aeabi_d2iz+0x22>
 8002498:	480f      	ldr	r0, [pc, #60]	; (80024d8 <__aeabi_d2iz+0x58>)
 800249a:	4283      	cmp	r3, r0
 800249c:	dd02      	ble.n	80024a4 <__aeabi_d2iz+0x24>
 800249e:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <__aeabi_d2iz+0x5c>)
 80024a0:	18d0      	adds	r0, r2, r3
 80024a2:	bd30      	pop	{r4, r5, pc}
 80024a4:	2080      	movs	r0, #128	; 0x80
 80024a6:	0340      	lsls	r0, r0, #13
 80024a8:	4301      	orrs	r1, r0
 80024aa:	480d      	ldr	r0, [pc, #52]	; (80024e0 <__aeabi_d2iz+0x60>)
 80024ac:	1ac0      	subs	r0, r0, r3
 80024ae:	281f      	cmp	r0, #31
 80024b0:	dd08      	ble.n	80024c4 <__aeabi_d2iz+0x44>
 80024b2:	480c      	ldr	r0, [pc, #48]	; (80024e4 <__aeabi_d2iz+0x64>)
 80024b4:	1ac3      	subs	r3, r0, r3
 80024b6:	40d9      	lsrs	r1, r3
 80024b8:	000b      	movs	r3, r1
 80024ba:	4258      	negs	r0, r3
 80024bc:	2a00      	cmp	r2, #0
 80024be:	d1f0      	bne.n	80024a2 <__aeabi_d2iz+0x22>
 80024c0:	0018      	movs	r0, r3
 80024c2:	e7ee      	b.n	80024a2 <__aeabi_d2iz+0x22>
 80024c4:	4c08      	ldr	r4, [pc, #32]	; (80024e8 <__aeabi_d2iz+0x68>)
 80024c6:	40c5      	lsrs	r5, r0
 80024c8:	46a4      	mov	ip, r4
 80024ca:	4463      	add	r3, ip
 80024cc:	4099      	lsls	r1, r3
 80024ce:	000b      	movs	r3, r1
 80024d0:	432b      	orrs	r3, r5
 80024d2:	e7f2      	b.n	80024ba <__aeabi_d2iz+0x3a>
 80024d4:	000003fe 	.word	0x000003fe
 80024d8:	0000041d 	.word	0x0000041d
 80024dc:	7fffffff 	.word	0x7fffffff
 80024e0:	00000433 	.word	0x00000433
 80024e4:	00000413 	.word	0x00000413
 80024e8:	fffffbed 	.word	0xfffffbed

080024ec <__aeabi_i2d>:
 80024ec:	b570      	push	{r4, r5, r6, lr}
 80024ee:	2800      	cmp	r0, #0
 80024f0:	d016      	beq.n	8002520 <__aeabi_i2d+0x34>
 80024f2:	17c3      	asrs	r3, r0, #31
 80024f4:	18c5      	adds	r5, r0, r3
 80024f6:	405d      	eors	r5, r3
 80024f8:	0fc4      	lsrs	r4, r0, #31
 80024fa:	0028      	movs	r0, r5
 80024fc:	f000 f894 	bl	8002628 <__clzsi2>
 8002500:	4a11      	ldr	r2, [pc, #68]	; (8002548 <__aeabi_i2d+0x5c>)
 8002502:	1a12      	subs	r2, r2, r0
 8002504:	280a      	cmp	r0, #10
 8002506:	dc16      	bgt.n	8002536 <__aeabi_i2d+0x4a>
 8002508:	0003      	movs	r3, r0
 800250a:	002e      	movs	r6, r5
 800250c:	3315      	adds	r3, #21
 800250e:	409e      	lsls	r6, r3
 8002510:	230b      	movs	r3, #11
 8002512:	1a18      	subs	r0, r3, r0
 8002514:	40c5      	lsrs	r5, r0
 8002516:	0553      	lsls	r3, r2, #21
 8002518:	032d      	lsls	r5, r5, #12
 800251a:	0b2d      	lsrs	r5, r5, #12
 800251c:	0d5b      	lsrs	r3, r3, #21
 800251e:	e003      	b.n	8002528 <__aeabi_i2d+0x3c>
 8002520:	2400      	movs	r4, #0
 8002522:	2300      	movs	r3, #0
 8002524:	2500      	movs	r5, #0
 8002526:	2600      	movs	r6, #0
 8002528:	051b      	lsls	r3, r3, #20
 800252a:	432b      	orrs	r3, r5
 800252c:	07e4      	lsls	r4, r4, #31
 800252e:	4323      	orrs	r3, r4
 8002530:	0030      	movs	r0, r6
 8002532:	0019      	movs	r1, r3
 8002534:	bd70      	pop	{r4, r5, r6, pc}
 8002536:	380b      	subs	r0, #11
 8002538:	4085      	lsls	r5, r0
 800253a:	0553      	lsls	r3, r2, #21
 800253c:	032d      	lsls	r5, r5, #12
 800253e:	2600      	movs	r6, #0
 8002540:	0b2d      	lsrs	r5, r5, #12
 8002542:	0d5b      	lsrs	r3, r3, #21
 8002544:	e7f0      	b.n	8002528 <__aeabi_i2d+0x3c>
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	0000041e 	.word	0x0000041e

0800254c <__aeabi_ui2d>:
 800254c:	b510      	push	{r4, lr}
 800254e:	1e04      	subs	r4, r0, #0
 8002550:	d010      	beq.n	8002574 <__aeabi_ui2d+0x28>
 8002552:	f000 f869 	bl	8002628 <__clzsi2>
 8002556:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <__aeabi_ui2d+0x48>)
 8002558:	1a1b      	subs	r3, r3, r0
 800255a:	280a      	cmp	r0, #10
 800255c:	dc11      	bgt.n	8002582 <__aeabi_ui2d+0x36>
 800255e:	220b      	movs	r2, #11
 8002560:	0021      	movs	r1, r4
 8002562:	1a12      	subs	r2, r2, r0
 8002564:	40d1      	lsrs	r1, r2
 8002566:	3015      	adds	r0, #21
 8002568:	030a      	lsls	r2, r1, #12
 800256a:	055b      	lsls	r3, r3, #21
 800256c:	4084      	lsls	r4, r0
 800256e:	0b12      	lsrs	r2, r2, #12
 8002570:	0d5b      	lsrs	r3, r3, #21
 8002572:	e001      	b.n	8002578 <__aeabi_ui2d+0x2c>
 8002574:	2300      	movs	r3, #0
 8002576:	2200      	movs	r2, #0
 8002578:	051b      	lsls	r3, r3, #20
 800257a:	4313      	orrs	r3, r2
 800257c:	0020      	movs	r0, r4
 800257e:	0019      	movs	r1, r3
 8002580:	bd10      	pop	{r4, pc}
 8002582:	0022      	movs	r2, r4
 8002584:	380b      	subs	r0, #11
 8002586:	4082      	lsls	r2, r0
 8002588:	055b      	lsls	r3, r3, #21
 800258a:	0312      	lsls	r2, r2, #12
 800258c:	2400      	movs	r4, #0
 800258e:	0b12      	lsrs	r2, r2, #12
 8002590:	0d5b      	lsrs	r3, r3, #21
 8002592:	e7f1      	b.n	8002578 <__aeabi_ui2d+0x2c>
 8002594:	0000041e 	.word	0x0000041e

08002598 <__aeabi_f2d>:
 8002598:	b570      	push	{r4, r5, r6, lr}
 800259a:	0043      	lsls	r3, r0, #1
 800259c:	0246      	lsls	r6, r0, #9
 800259e:	0fc4      	lsrs	r4, r0, #31
 80025a0:	20fe      	movs	r0, #254	; 0xfe
 80025a2:	0e1b      	lsrs	r3, r3, #24
 80025a4:	1c59      	adds	r1, r3, #1
 80025a6:	0a75      	lsrs	r5, r6, #9
 80025a8:	4208      	tst	r0, r1
 80025aa:	d00c      	beq.n	80025c6 <__aeabi_f2d+0x2e>
 80025ac:	22e0      	movs	r2, #224	; 0xe0
 80025ae:	0092      	lsls	r2, r2, #2
 80025b0:	4694      	mov	ip, r2
 80025b2:	076d      	lsls	r5, r5, #29
 80025b4:	0b36      	lsrs	r6, r6, #12
 80025b6:	4463      	add	r3, ip
 80025b8:	051b      	lsls	r3, r3, #20
 80025ba:	4333      	orrs	r3, r6
 80025bc:	07e4      	lsls	r4, r4, #31
 80025be:	4323      	orrs	r3, r4
 80025c0:	0028      	movs	r0, r5
 80025c2:	0019      	movs	r1, r3
 80025c4:	bd70      	pop	{r4, r5, r6, pc}
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d114      	bne.n	80025f4 <__aeabi_f2d+0x5c>
 80025ca:	2d00      	cmp	r5, #0
 80025cc:	d01b      	beq.n	8002606 <__aeabi_f2d+0x6e>
 80025ce:	0028      	movs	r0, r5
 80025d0:	f000 f82a 	bl	8002628 <__clzsi2>
 80025d4:	280a      	cmp	r0, #10
 80025d6:	dc1c      	bgt.n	8002612 <__aeabi_f2d+0x7a>
 80025d8:	230b      	movs	r3, #11
 80025da:	002a      	movs	r2, r5
 80025dc:	1a1b      	subs	r3, r3, r0
 80025de:	40da      	lsrs	r2, r3
 80025e0:	0003      	movs	r3, r0
 80025e2:	3315      	adds	r3, #21
 80025e4:	409d      	lsls	r5, r3
 80025e6:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <__aeabi_f2d+0x88>)
 80025e8:	0312      	lsls	r2, r2, #12
 80025ea:	1a1b      	subs	r3, r3, r0
 80025ec:	055b      	lsls	r3, r3, #21
 80025ee:	0b16      	lsrs	r6, r2, #12
 80025f0:	0d5b      	lsrs	r3, r3, #21
 80025f2:	e7e1      	b.n	80025b8 <__aeabi_f2d+0x20>
 80025f4:	2d00      	cmp	r5, #0
 80025f6:	d009      	beq.n	800260c <__aeabi_f2d+0x74>
 80025f8:	0b32      	lsrs	r2, r6, #12
 80025fa:	2680      	movs	r6, #128	; 0x80
 80025fc:	0336      	lsls	r6, r6, #12
 80025fe:	4b09      	ldr	r3, [pc, #36]	; (8002624 <__aeabi_f2d+0x8c>)
 8002600:	076d      	lsls	r5, r5, #29
 8002602:	4316      	orrs	r6, r2
 8002604:	e7d8      	b.n	80025b8 <__aeabi_f2d+0x20>
 8002606:	2300      	movs	r3, #0
 8002608:	2600      	movs	r6, #0
 800260a:	e7d5      	b.n	80025b8 <__aeabi_f2d+0x20>
 800260c:	2600      	movs	r6, #0
 800260e:	4b05      	ldr	r3, [pc, #20]	; (8002624 <__aeabi_f2d+0x8c>)
 8002610:	e7d2      	b.n	80025b8 <__aeabi_f2d+0x20>
 8002612:	0003      	movs	r3, r0
 8002614:	002a      	movs	r2, r5
 8002616:	3b0b      	subs	r3, #11
 8002618:	409a      	lsls	r2, r3
 800261a:	2500      	movs	r5, #0
 800261c:	e7e3      	b.n	80025e6 <__aeabi_f2d+0x4e>
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	00000389 	.word	0x00000389
 8002624:	000007ff 	.word	0x000007ff

08002628 <__clzsi2>:
 8002628:	211c      	movs	r1, #28
 800262a:	2301      	movs	r3, #1
 800262c:	041b      	lsls	r3, r3, #16
 800262e:	4298      	cmp	r0, r3
 8002630:	d301      	bcc.n	8002636 <__clzsi2+0xe>
 8002632:	0c00      	lsrs	r0, r0, #16
 8002634:	3910      	subs	r1, #16
 8002636:	0a1b      	lsrs	r3, r3, #8
 8002638:	4298      	cmp	r0, r3
 800263a:	d301      	bcc.n	8002640 <__clzsi2+0x18>
 800263c:	0a00      	lsrs	r0, r0, #8
 800263e:	3908      	subs	r1, #8
 8002640:	091b      	lsrs	r3, r3, #4
 8002642:	4298      	cmp	r0, r3
 8002644:	d301      	bcc.n	800264a <__clzsi2+0x22>
 8002646:	0900      	lsrs	r0, r0, #4
 8002648:	3904      	subs	r1, #4
 800264a:	a202      	add	r2, pc, #8	; (adr r2, 8002654 <__clzsi2+0x2c>)
 800264c:	5c10      	ldrb	r0, [r2, r0]
 800264e:	1840      	adds	r0, r0, r1
 8002650:	4770      	bx	lr
 8002652:	46c0      	nop			; (mov r8, r8)
 8002654:	02020304 	.word	0x02020304
 8002658:	01010101 	.word	0x01010101
	...

08002664 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002664:	b590      	push	{r4, r7, lr}
 8002666:	b08b      	sub	sp, #44	; 0x2c
 8002668:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266a:	2414      	movs	r4, #20
 800266c:	193b      	adds	r3, r7, r4
 800266e:	0018      	movs	r0, r3
 8002670:	2314      	movs	r3, #20
 8002672:	001a      	movs	r2, r3
 8002674:	2100      	movs	r1, #0
 8002676:	f003 fa81 	bl	8005b7c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800267a:	4b8e      	ldr	r3, [pc, #568]	; (80028b4 <MX_GPIO_Init+0x250>)
 800267c:	695a      	ldr	r2, [r3, #20]
 800267e:	4b8d      	ldr	r3, [pc, #564]	; (80028b4 <MX_GPIO_Init+0x250>)
 8002680:	2180      	movs	r1, #128	; 0x80
 8002682:	0309      	lsls	r1, r1, #12
 8002684:	430a      	orrs	r2, r1
 8002686:	615a      	str	r2, [r3, #20]
 8002688:	4b8a      	ldr	r3, [pc, #552]	; (80028b4 <MX_GPIO_Init+0x250>)
 800268a:	695a      	ldr	r2, [r3, #20]
 800268c:	2380      	movs	r3, #128	; 0x80
 800268e:	031b      	lsls	r3, r3, #12
 8002690:	4013      	ands	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
 8002694:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002696:	4b87      	ldr	r3, [pc, #540]	; (80028b4 <MX_GPIO_Init+0x250>)
 8002698:	695a      	ldr	r2, [r3, #20]
 800269a:	4b86      	ldr	r3, [pc, #536]	; (80028b4 <MX_GPIO_Init+0x250>)
 800269c:	2180      	movs	r1, #128	; 0x80
 800269e:	03c9      	lsls	r1, r1, #15
 80026a0:	430a      	orrs	r2, r1
 80026a2:	615a      	str	r2, [r3, #20]
 80026a4:	4b83      	ldr	r3, [pc, #524]	; (80028b4 <MX_GPIO_Init+0x250>)
 80026a6:	695a      	ldr	r2, [r3, #20]
 80026a8:	2380      	movs	r3, #128	; 0x80
 80026aa:	03db      	lsls	r3, r3, #15
 80026ac:	4013      	ands	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b2:	4b80      	ldr	r3, [pc, #512]	; (80028b4 <MX_GPIO_Init+0x250>)
 80026b4:	695a      	ldr	r2, [r3, #20]
 80026b6:	4b7f      	ldr	r3, [pc, #508]	; (80028b4 <MX_GPIO_Init+0x250>)
 80026b8:	2180      	movs	r1, #128	; 0x80
 80026ba:	0289      	lsls	r1, r1, #10
 80026bc:	430a      	orrs	r2, r1
 80026be:	615a      	str	r2, [r3, #20]
 80026c0:	4b7c      	ldr	r3, [pc, #496]	; (80028b4 <MX_GPIO_Init+0x250>)
 80026c2:	695a      	ldr	r2, [r3, #20]
 80026c4:	2380      	movs	r3, #128	; 0x80
 80026c6:	029b      	lsls	r3, r3, #10
 80026c8:	4013      	ands	r3, r2
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ce:	4b79      	ldr	r3, [pc, #484]	; (80028b4 <MX_GPIO_Init+0x250>)
 80026d0:	695a      	ldr	r2, [r3, #20]
 80026d2:	4b78      	ldr	r3, [pc, #480]	; (80028b4 <MX_GPIO_Init+0x250>)
 80026d4:	2180      	movs	r1, #128	; 0x80
 80026d6:	02c9      	lsls	r1, r1, #11
 80026d8:	430a      	orrs	r2, r1
 80026da:	615a      	str	r2, [r3, #20]
 80026dc:	4b75      	ldr	r3, [pc, #468]	; (80028b4 <MX_GPIO_Init+0x250>)
 80026de:	695a      	ldr	r2, [r3, #20]
 80026e0:	2380      	movs	r3, #128	; 0x80
 80026e2:	02db      	lsls	r3, r3, #11
 80026e4:	4013      	ands	r3, r2
 80026e6:	607b      	str	r3, [r7, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR_ON_BUZZER_GPIO_Port, PWR_ON_BUZZER_Pin, GPIO_PIN_RESET);
 80026ea:	4b73      	ldr	r3, [pc, #460]	; (80028b8 <MX_GPIO_Init+0x254>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	2102      	movs	r1, #2
 80026f0:	0018      	movs	r0, r3
 80026f2:	f001 fd08 	bl	8004106 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_DC_Pin|OLED_RST_Pin|OLED_CS_Pin|OLED_CLK_Pin
 80026f6:	4971      	ldr	r1, [pc, #452]	; (80028bc <MX_GPIO_Init+0x258>)
 80026f8:	2390      	movs	r3, #144	; 0x90
 80026fa:	05db      	lsls	r3, r3, #23
 80026fc:	2201      	movs	r2, #1
 80026fe:	0018      	movs	r0, r3
 8002700:	f001 fd01 	bl	8004106 <HAL_GPIO_WritePin>
                          |OLED_DATA_Pin|PWR_ON_CO2_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8002704:	4b6e      	ldr	r3, [pc, #440]	; (80028c0 <MX_GPIO_Init+0x25c>)
 8002706:	2201      	movs	r2, #1
 8002708:	2104      	movs	r1, #4
 800270a:	0018      	movs	r0, r3
 800270c:	f001 fcfb 	bl	8004106 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR_ON_OLED_GPIO_Port, PWR_ON_OLED_Pin, GPIO_PIN_RESET);
 8002710:	2380      	movs	r3, #128	; 0x80
 8002712:	015b      	lsls	r3, r3, #5
 8002714:	486a      	ldr	r0, [pc, #424]	; (80028c0 <MX_GPIO_Init+0x25c>)
 8002716:	2200      	movs	r2, #0
 8002718:	0019      	movs	r1, r3
 800271a:	f001 fcf4 	bl	8004106 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR_ON_SPS30_GPIO_Port, PWR_ON_SPS30_Pin, GPIO_PIN_RESET);
 800271e:	2380      	movs	r3, #128	; 0x80
 8002720:	0119      	lsls	r1, r3, #4
 8002722:	2390      	movs	r3, #144	; 0x90
 8002724:	05db      	lsls	r3, r3, #23
 8002726:	2200      	movs	r2, #0
 8002728:	0018      	movs	r0, r3
 800272a:	f001 fcec 	bl	8004106 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800272e:	193b      	adds	r3, r7, r4
 8002730:	22e0      	movs	r2, #224	; 0xe0
 8002732:	0212      	lsls	r2, r2, #8
 8002734:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002736:	193b      	adds	r3, r7, r4
 8002738:	2203      	movs	r2, #3
 800273a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	193b      	adds	r3, r7, r4
 800273e:	2200      	movs	r2, #0
 8002740:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002742:	193b      	adds	r3, r7, r4
 8002744:	4a5f      	ldr	r2, [pc, #380]	; (80028c4 <MX_GPIO_Init+0x260>)
 8002746:	0019      	movs	r1, r3
 8002748:	0010      	movs	r0, r2
 800274a:	f001 fb4f 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800274e:	193b      	adds	r3, r7, r4
 8002750:	2201      	movs	r2, #1
 8002752:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002754:	193b      	adds	r3, r7, r4
 8002756:	2203      	movs	r2, #3
 8002758:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275a:	193b      	adds	r3, r7, r4
 800275c:	2200      	movs	r2, #0
 800275e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002760:	193b      	adds	r3, r7, r4
 8002762:	4a55      	ldr	r2, [pc, #340]	; (80028b8 <MX_GPIO_Init+0x254>)
 8002764:	0019      	movs	r1, r3
 8002766:	0010      	movs	r0, r2
 8002768:	f001 fb40 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWR_ON_BUZZER_Pin;
 800276c:	193b      	adds	r3, r7, r4
 800276e:	2202      	movs	r2, #2
 8002770:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002772:	193b      	adds	r3, r7, r4
 8002774:	2201      	movs	r2, #1
 8002776:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002778:	193b      	adds	r3, r7, r4
 800277a:	2200      	movs	r2, #0
 800277c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277e:	193b      	adds	r3, r7, r4
 8002780:	2200      	movs	r2, #0
 8002782:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PWR_ON_BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002784:	193b      	adds	r3, r7, r4
 8002786:	4a4c      	ldr	r2, [pc, #304]	; (80028b8 <MX_GPIO_Init+0x254>)
 8002788:	0019      	movs	r1, r3
 800278a:	0010      	movs	r0, r2
 800278c:	f001 fb2e 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA6 PA8
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8
 8002790:	193b      	adds	r3, r7, r4
 8002792:	4a4d      	ldr	r2, [pc, #308]	; (80028c8 <MX_GPIO_Init+0x264>)
 8002794:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002796:	193b      	adds	r3, r7, r4
 8002798:	2203      	movs	r2, #3
 800279a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	193b      	adds	r3, r7, r4
 800279e:	2200      	movs	r2, #0
 80027a0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a2:	193a      	adds	r2, r7, r4
 80027a4:	2390      	movs	r3, #144	; 0x90
 80027a6:	05db      	lsls	r3, r3, #23
 80027a8:	0011      	movs	r1, r2
 80027aa:	0018      	movs	r0, r3
 80027ac:	f001 fb1e 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin|OLED_RST_Pin|OLED_CS_Pin|OLED_CLK_Pin
 80027b0:	193b      	adds	r3, r7, r4
 80027b2:	22bc      	movs	r2, #188	; 0xbc
 80027b4:	601a      	str	r2, [r3, #0]
                          |OLED_DATA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027b6:	193b      	adds	r3, r7, r4
 80027b8:	2201      	movs	r2, #1
 80027ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027bc:	193b      	adds	r3, r7, r4
 80027be:	2200      	movs	r2, #0
 80027c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027c2:	193b      	adds	r3, r7, r4
 80027c4:	2203      	movs	r2, #3
 80027c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c8:	193a      	adds	r2, r7, r4
 80027ca:	2390      	movs	r3, #144	; 0x90
 80027cc:	05db      	lsls	r3, r3, #23
 80027ce:	0011      	movs	r1, r2
 80027d0:	0018      	movs	r0, r3
 80027d2:	f001 fb0b 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80027d6:	193b      	adds	r3, r7, r4
 80027d8:	4a3c      	ldr	r2, [pc, #240]	; (80028cc <MX_GPIO_Init+0x268>)
 80027da:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027dc:	193b      	adds	r3, r7, r4
 80027de:	2203      	movs	r2, #3
 80027e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	193b      	adds	r3, r7, r4
 80027e4:	2200      	movs	r2, #0
 80027e6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e8:	193b      	adds	r3, r7, r4
 80027ea:	4a35      	ldr	r2, [pc, #212]	; (80028c0 <MX_GPIO_Init+0x25c>)
 80027ec:	0019      	movs	r1, r3
 80027ee:	0010      	movs	r0, r2
 80027f0:	f001 fafc 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_1_Pin|PWR_ON_OLED_Pin;
 80027f4:	193b      	adds	r3, r7, r4
 80027f6:	4a36      	ldr	r2, [pc, #216]	; (80028d0 <MX_GPIO_Init+0x26c>)
 80027f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027fa:	193b      	adds	r3, r7, r4
 80027fc:	2201      	movs	r2, #1
 80027fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	193b      	adds	r3, r7, r4
 8002802:	2200      	movs	r2, #0
 8002804:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002806:	193b      	adds	r3, r7, r4
 8002808:	2200      	movs	r2, #0
 800280a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800280c:	193b      	adds	r3, r7, r4
 800280e:	4a2c      	ldr	r2, [pc, #176]	; (80028c0 <MX_GPIO_Init+0x25c>)
 8002810:	0019      	movs	r1, r3
 8002812:	0010      	movs	r0, r2
 8002814:	f001 faea 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CO2_RDY_Pin;
 8002818:	0021      	movs	r1, r4
 800281a:	187b      	adds	r3, r7, r1
 800281c:	2280      	movs	r2, #128	; 0x80
 800281e:	0212      	lsls	r2, r2, #8
 8002820:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002822:	187b      	adds	r3, r7, r1
 8002824:	2288      	movs	r2, #136	; 0x88
 8002826:	0352      	lsls	r2, r2, #13
 8002828:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	187b      	adds	r3, r7, r1
 800282c:	2200      	movs	r2, #0
 800282e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CO2_RDY_GPIO_Port, &GPIO_InitStruct);
 8002830:	000c      	movs	r4, r1
 8002832:	187b      	adds	r3, r7, r1
 8002834:	4a22      	ldr	r2, [pc, #136]	; (80028c0 <MX_GPIO_Init+0x25c>)
 8002836:	0019      	movs	r1, r3
 8002838:	0010      	movs	r0, r2
 800283a:	f001 fad7 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = PWR_ON_SPS30_Pin|PWR_ON_CO2_Pin;
 800283e:	0021      	movs	r1, r4
 8002840:	187b      	adds	r3, r7, r1
 8002842:	22c0      	movs	r2, #192	; 0xc0
 8002844:	0152      	lsls	r2, r2, #5
 8002846:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002848:	000c      	movs	r4, r1
 800284a:	193b      	adds	r3, r7, r4
 800284c:	2201      	movs	r2, #1
 800284e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	193b      	adds	r3, r7, r4
 8002852:	2200      	movs	r2, #0
 8002854:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002856:	193b      	adds	r3, r7, r4
 8002858:	2200      	movs	r2, #0
 800285a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800285c:	193a      	adds	r2, r7, r4
 800285e:	2390      	movs	r3, #144	; 0x90
 8002860:	05db      	lsls	r3, r3, #23
 8002862:	0011      	movs	r1, r2
 8002864:	0018      	movs	r0, r3
 8002866:	f001 fac1 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER_SW_Pin;
 800286a:	0021      	movs	r1, r4
 800286c:	187b      	adds	r3, r7, r1
 800286e:	2208      	movs	r2, #8
 8002870:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002872:	187b      	adds	r3, r7, r1
 8002874:	2284      	movs	r2, #132	; 0x84
 8002876:	0392      	lsls	r2, r2, #14
 8002878:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287a:	187b      	adds	r3, r7, r1
 800287c:	2200      	movs	r2, #0
 800287e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ENCODER_SW_GPIO_Port, &GPIO_InitStruct);
 8002880:	187b      	adds	r3, r7, r1
 8002882:	4a0f      	ldr	r2, [pc, #60]	; (80028c0 <MX_GPIO_Init+0x25c>)
 8002884:	0019      	movs	r1, r3
 8002886:	0010      	movs	r0, r2
 8002888:	f001 fab0 	bl	8003dec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 800288c:	2200      	movs	r2, #0
 800288e:	2100      	movs	r1, #0
 8002890:	2006      	movs	r0, #6
 8002892:	f001 fa79 	bl	8003d88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002896:	2006      	movs	r0, #6
 8002898:	f001 fa8b 	bl	8003db2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800289c:	2200      	movs	r2, #0
 800289e:	2100      	movs	r1, #0
 80028a0:	2007      	movs	r0, #7
 80028a2:	f001 fa71 	bl	8003d88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80028a6:	2007      	movs	r0, #7
 80028a8:	f001 fa83 	bl	8003db2 <HAL_NVIC_EnableIRQ>

}
 80028ac:	46c0      	nop			; (mov r8, r8)
 80028ae:	46bd      	mov	sp, r7
 80028b0:	b00b      	add	sp, #44	; 0x2c
 80028b2:	bd90      	pop	{r4, r7, pc}
 80028b4:	40021000 	.word	0x40021000
 80028b8:	48001400 	.word	0x48001400
 80028bc:	000010bc 	.word	0x000010bc
 80028c0:	48000400 	.word	0x48000400
 80028c4:	48000800 	.word	0x48000800
 80028c8:	00008143 	.word	0x00008143
 80028cc:	00000ff3 	.word	0x00000ff3
 80028d0:	00001004 	.word	0x00001004

080028d4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80028d8:	4b1b      	ldr	r3, [pc, #108]	; (8002948 <MX_I2C1_Init+0x74>)
 80028da:	4a1c      	ldr	r2, [pc, #112]	; (800294c <MX_I2C1_Init+0x78>)
 80028dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80028de:	4b1a      	ldr	r3, [pc, #104]	; (8002948 <MX_I2C1_Init+0x74>)
 80028e0:	4a1b      	ldr	r2, [pc, #108]	; (8002950 <MX_I2C1_Init+0x7c>)
 80028e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80028e4:	4b18      	ldr	r3, [pc, #96]	; (8002948 <MX_I2C1_Init+0x74>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028ea:	4b17      	ldr	r3, [pc, #92]	; (8002948 <MX_I2C1_Init+0x74>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028f0:	4b15      	ldr	r3, [pc, #84]	; (8002948 <MX_I2C1_Init+0x74>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80028f6:	4b14      	ldr	r3, [pc, #80]	; (8002948 <MX_I2C1_Init+0x74>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80028fc:	4b12      	ldr	r3, [pc, #72]	; (8002948 <MX_I2C1_Init+0x74>)
 80028fe:	2200      	movs	r2, #0
 8002900:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002902:	4b11      	ldr	r3, [pc, #68]	; (8002948 <MX_I2C1_Init+0x74>)
 8002904:	2200      	movs	r2, #0
 8002906:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002908:	4b0f      	ldr	r3, [pc, #60]	; (8002948 <MX_I2C1_Init+0x74>)
 800290a:	2200      	movs	r2, #0
 800290c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800290e:	4b0e      	ldr	r3, [pc, #56]	; (8002948 <MX_I2C1_Init+0x74>)
 8002910:	0018      	movs	r0, r3
 8002912:	f001 fc31 	bl	8004178 <HAL_I2C_Init>
 8002916:	1e03      	subs	r3, r0, #0
 8002918:	d001      	beq.n	800291e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800291a:	f000 fa1e 	bl	8002d5a <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800291e:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <MX_I2C1_Init+0x74>)
 8002920:	2100      	movs	r1, #0
 8002922:	0018      	movs	r0, r3
 8002924:	f002 f8c6 	bl	8004ab4 <HAL_I2CEx_ConfigAnalogFilter>
 8002928:	1e03      	subs	r3, r0, #0
 800292a:	d001      	beq.n	8002930 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800292c:	f000 fa15 	bl	8002d5a <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002930:	4b05      	ldr	r3, [pc, #20]	; (8002948 <MX_I2C1_Init+0x74>)
 8002932:	2100      	movs	r1, #0
 8002934:	0018      	movs	r0, r3
 8002936:	f002 f909 	bl	8004b4c <HAL_I2CEx_ConfigDigitalFilter>
 800293a:	1e03      	subs	r3, r0, #0
 800293c:	d001      	beq.n	8002942 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800293e:	f000 fa0c 	bl	8002d5a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	20000630 	.word	0x20000630
 800294c:	40005400 	.word	0x40005400
 8002950:	2000090e 	.word	0x2000090e

08002954 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002958:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <MX_I2C2_Init+0x74>)
 800295a:	4a1c      	ldr	r2, [pc, #112]	; (80029cc <MX_I2C2_Init+0x78>)
 800295c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 800295e:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <MX_I2C2_Init+0x74>)
 8002960:	4a1b      	ldr	r2, [pc, #108]	; (80029d0 <MX_I2C2_Init+0x7c>)
 8002962:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002964:	4b18      	ldr	r3, [pc, #96]	; (80029c8 <MX_I2C2_Init+0x74>)
 8002966:	2200      	movs	r2, #0
 8002968:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800296a:	4b17      	ldr	r3, [pc, #92]	; (80029c8 <MX_I2C2_Init+0x74>)
 800296c:	2201      	movs	r2, #1
 800296e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002970:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <MX_I2C2_Init+0x74>)
 8002972:	2200      	movs	r2, #0
 8002974:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002976:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <MX_I2C2_Init+0x74>)
 8002978:	2200      	movs	r2, #0
 800297a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800297c:	4b12      	ldr	r3, [pc, #72]	; (80029c8 <MX_I2C2_Init+0x74>)
 800297e:	2200      	movs	r2, #0
 8002980:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002982:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <MX_I2C2_Init+0x74>)
 8002984:	2200      	movs	r2, #0
 8002986:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002988:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <MX_I2C2_Init+0x74>)
 800298a:	2200      	movs	r2, #0
 800298c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800298e:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <MX_I2C2_Init+0x74>)
 8002990:	0018      	movs	r0, r3
 8002992:	f001 fbf1 	bl	8004178 <HAL_I2C_Init>
 8002996:	1e03      	subs	r3, r0, #0
 8002998:	d001      	beq.n	800299e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800299a:	f000 f9de 	bl	8002d5a <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800299e:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <MX_I2C2_Init+0x74>)
 80029a0:	2100      	movs	r1, #0
 80029a2:	0018      	movs	r0, r3
 80029a4:	f002 f886 	bl	8004ab4 <HAL_I2CEx_ConfigAnalogFilter>
 80029a8:	1e03      	subs	r3, r0, #0
 80029aa:	d001      	beq.n	80029b0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80029ac:	f000 f9d5 	bl	8002d5a <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80029b0:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <MX_I2C2_Init+0x74>)
 80029b2:	2100      	movs	r1, #0
 80029b4:	0018      	movs	r0, r3
 80029b6:	f002 f8c9 	bl	8004b4c <HAL_I2CEx_ConfigDigitalFilter>
 80029ba:	1e03      	subs	r3, r0, #0
 80029bc:	d001      	beq.n	80029c2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80029be:	f000 f9cc 	bl	8002d5a <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	2000067c 	.word	0x2000067c
 80029cc:	40005800 	.word	0x40005800
 80029d0:	2000090e 	.word	0x2000090e

080029d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80029d4:	b590      	push	{r4, r7, lr}
 80029d6:	b08d      	sub	sp, #52	; 0x34
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029dc:	241c      	movs	r4, #28
 80029de:	193b      	adds	r3, r7, r4
 80029e0:	0018      	movs	r0, r3
 80029e2:	2314      	movs	r3, #20
 80029e4:	001a      	movs	r2, r3
 80029e6:	2100      	movs	r1, #0
 80029e8:	f003 f8c8 	bl	8005b7c <memset>
  if(i2cHandle->Instance==I2C1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a39      	ldr	r2, [pc, #228]	; (8002ad8 <HAL_I2C_MspInit+0x104>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d134      	bne.n	8002a60 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f6:	4b39      	ldr	r3, [pc, #228]	; (8002adc <HAL_I2C_MspInit+0x108>)
 80029f8:	695a      	ldr	r2, [r3, #20]
 80029fa:	4b38      	ldr	r3, [pc, #224]	; (8002adc <HAL_I2C_MspInit+0x108>)
 80029fc:	2180      	movs	r1, #128	; 0x80
 80029fe:	0289      	lsls	r1, r1, #10
 8002a00:	430a      	orrs	r2, r1
 8002a02:	615a      	str	r2, [r3, #20]
 8002a04:	4b35      	ldr	r3, [pc, #212]	; (8002adc <HAL_I2C_MspInit+0x108>)
 8002a06:	695a      	ldr	r2, [r3, #20]
 8002a08:	2380      	movs	r3, #128	; 0x80
 8002a0a:	029b      	lsls	r3, r3, #10
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
 8002a10:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a12:	193b      	adds	r3, r7, r4
 8002a14:	22c0      	movs	r2, #192	; 0xc0
 8002a16:	00d2      	lsls	r2, r2, #3
 8002a18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a1a:	0021      	movs	r1, r4
 8002a1c:	187b      	adds	r3, r7, r1
 8002a1e:	2212      	movs	r2, #18
 8002a20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a22:	187b      	adds	r3, r7, r1
 8002a24:	2200      	movs	r2, #0
 8002a26:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a28:	187b      	adds	r3, r7, r1
 8002a2a:	2203      	movs	r2, #3
 8002a2c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a2e:	187b      	adds	r3, r7, r1
 8002a30:	2204      	movs	r2, #4
 8002a32:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a34:	187a      	adds	r2, r7, r1
 8002a36:	2390      	movs	r3, #144	; 0x90
 8002a38:	05db      	lsls	r3, r3, #23
 8002a3a:	0011      	movs	r1, r2
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f001 f9d5 	bl	8003dec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a42:	4b26      	ldr	r3, [pc, #152]	; (8002adc <HAL_I2C_MspInit+0x108>)
 8002a44:	69da      	ldr	r2, [r3, #28]
 8002a46:	4b25      	ldr	r3, [pc, #148]	; (8002adc <HAL_I2C_MspInit+0x108>)
 8002a48:	2180      	movs	r1, #128	; 0x80
 8002a4a:	0389      	lsls	r1, r1, #14
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	61da      	str	r2, [r3, #28]
 8002a50:	4b22      	ldr	r3, [pc, #136]	; (8002adc <HAL_I2C_MspInit+0x108>)
 8002a52:	69da      	ldr	r2, [r3, #28]
 8002a54:	2380      	movs	r3, #128	; 0x80
 8002a56:	039b      	lsls	r3, r3, #14
 8002a58:	4013      	ands	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002a5e:	e037      	b.n	8002ad0 <HAL_I2C_MspInit+0xfc>
  else if(i2cHandle->Instance==I2C2)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a1e      	ldr	r2, [pc, #120]	; (8002ae0 <HAL_I2C_MspInit+0x10c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d132      	bne.n	8002ad0 <HAL_I2C_MspInit+0xfc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a6a:	4b1c      	ldr	r3, [pc, #112]	; (8002adc <HAL_I2C_MspInit+0x108>)
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	4b1b      	ldr	r3, [pc, #108]	; (8002adc <HAL_I2C_MspInit+0x108>)
 8002a70:	2180      	movs	r1, #128	; 0x80
 8002a72:	02c9      	lsls	r1, r1, #11
 8002a74:	430a      	orrs	r2, r1
 8002a76:	615a      	str	r2, [r3, #20]
 8002a78:	4b18      	ldr	r3, [pc, #96]	; (8002adc <HAL_I2C_MspInit+0x108>)
 8002a7a:	695a      	ldr	r2, [r3, #20]
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	02db      	lsls	r3, r3, #11
 8002a80:	4013      	ands	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
 8002a84:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002a86:	211c      	movs	r1, #28
 8002a88:	187b      	adds	r3, r7, r1
 8002a8a:	22c0      	movs	r2, #192	; 0xc0
 8002a8c:	01d2      	lsls	r2, r2, #7
 8002a8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a90:	187b      	adds	r3, r7, r1
 8002a92:	2212      	movs	r2, #18
 8002a94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a96:	187b      	adds	r3, r7, r1
 8002a98:	2200      	movs	r2, #0
 8002a9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a9c:	187b      	adds	r3, r7, r1
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 8002aa2:	187b      	adds	r3, r7, r1
 8002aa4:	2205      	movs	r2, #5
 8002aa6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa8:	187b      	adds	r3, r7, r1
 8002aaa:	4a0e      	ldr	r2, [pc, #56]	; (8002ae4 <HAL_I2C_MspInit+0x110>)
 8002aac:	0019      	movs	r1, r3
 8002aae:	0010      	movs	r0, r2
 8002ab0:	f001 f99c 	bl	8003dec <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002ab4:	4b09      	ldr	r3, [pc, #36]	; (8002adc <HAL_I2C_MspInit+0x108>)
 8002ab6:	69da      	ldr	r2, [r3, #28]
 8002ab8:	4b08      	ldr	r3, [pc, #32]	; (8002adc <HAL_I2C_MspInit+0x108>)
 8002aba:	2180      	movs	r1, #128	; 0x80
 8002abc:	03c9      	lsls	r1, r1, #15
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	61da      	str	r2, [r3, #28]
 8002ac2:	4b06      	ldr	r3, [pc, #24]	; (8002adc <HAL_I2C_MspInit+0x108>)
 8002ac4:	69da      	ldr	r2, [r3, #28]
 8002ac6:	2380      	movs	r3, #128	; 0x80
 8002ac8:	03db      	lsls	r3, r3, #15
 8002aca:	4013      	ands	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	68fb      	ldr	r3, [r7, #12]
}
 8002ad0:	46c0      	nop			; (mov r8, r8)
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	b00d      	add	sp, #52	; 0x34
 8002ad6:	bd90      	pop	{r4, r7, pc}
 8002ad8:	40005400 	.word	0x40005400
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	40005800 	.word	0x40005800
 8002ae4:	48000400 	.word	0x48000400

08002ae8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ae8:	b590      	push	{r4, r7, lr}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
  uint8_t state;
  uint8_t (*pStateFunc)(uint8_t);


   // Initial state variables
  state = nextstate = ST_MAIN_SCREEN;
 8002aee:	210f      	movs	r1, #15
 8002af0:	187b      	adds	r3, r7, r1
 8002af2:	220a      	movs	r2, #10
 8002af4:	701a      	strb	r2, [r3, #0]
 8002af6:	230e      	movs	r3, #14
 8002af8:	18fb      	adds	r3, r7, r3
 8002afa:	187a      	adds	r2, r7, r1
 8002afc:	7812      	ldrb	r2, [r2, #0]
 8002afe:	701a      	strb	r2, [r3, #0]
  pStateFunc = DrawMainScreen;
 8002b00:	4b34      	ldr	r3, [pc, #208]	; (8002bd4 <main+0xec>)
 8002b02:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b04:	f001 f80c 	bl	8003b20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b08:	f000 f86a 	bl	8002be0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b0c:	f7ff fdaa 	bl	8002664 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002b10:	f7ff fee0 	bl	80028d4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002b14:	f7ff ff1e 	bl	8002954 <MX_I2C2_Init>
  MX_TIM7_Init();
 8002b18:	f000 ff90 	bl	8003a3c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  prepare_CO2_sensor();
 8002b1c:	f000 f910 	bl	8002d40 <prepare_CO2_sensor>
  prepare_PM_sensor();
 8002b20:	f000 fa7c 	bl	800301c <prepare_PM_sensor>
  prepare_INA_sensor();
 8002b24:	f000 fb1e 	bl	8003164 <prepare_INA_sensor>

  rc_ssd1306_init();
 8002b28:	f000 fd37 	bl	800359a <rc_ssd1306_init>
  rc_ssd1309_display_clear();
 8002b2c:	f000 fdda 	bl	80036e4 <rc_ssd1309_display_clear>
  rc_ssd1309_display();
 8002b30:	f000 fda0 	bl	8003674 <rc_ssd1309_display>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (pStateFunc)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d009      	beq.n	8002b4e <main+0x66>
      {
          nextstate = (*pStateFunc) (btn_state);  //Call state function
 8002b3a:	4b27      	ldr	r3, [pc, #156]	; (8002bd8 <main+0xf0>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	230f      	movs	r3, #15
 8002b42:	18fc      	adds	r4, r7, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	0010      	movs	r0, r2
 8002b48:	4798      	blx	r3
 8002b4a:	0003      	movs	r3, r0
 8002b4c:	7023      	strb	r3, [r4, #0]
      }

      if (btn_state != KEY_NULL)   //when user press any button
 8002b4e:	4b22      	ldr	r3, [pc, #136]	; (8002bd8 <main+0xf0>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00d      	beq.n	8002b74 <main+0x8c>
      {
          nextstate = StateMachine(state, btn_state);   //state machine is checking what is the next state
 8002b58:	4b1f      	ldr	r3, [pc, #124]	; (8002bd8 <main+0xf0>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	230f      	movs	r3, #15
 8002b60:	18fc      	adds	r4, r7, r3
 8002b62:	230e      	movs	r3, #14
 8002b64:	18fb      	adds	r3, r7, r3
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	0011      	movs	r1, r2
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f000 f8fa 	bl	8002d64 <StateMachine>
 8002b70:	0003      	movs	r3, r0
 8002b72:	7023      	strb	r3, [r4, #0]
      }

      if (nextstate != state)
 8002b74:	210f      	movs	r1, #15
 8002b76:	187a      	adds	r2, r7, r1
 8002b78:	200e      	movs	r0, #14
 8002b7a:	183b      	adds	r3, r7, r0
 8002b7c:	7812      	ldrb	r2, [r2, #0]
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d0d7      	beq.n	8002b34 <main+0x4c>
      {
          state = nextstate;
 8002b84:	183b      	adds	r3, r7, r0
 8002b86:	187a      	adds	r2, r7, r1
 8002b88:	7812      	ldrb	r2, [r2, #0]
 8002b8a:	701a      	strb	r2, [r3, #0]
          for (uint8_t i=0; menu_state[i].state; i++)   // scan state structure
 8002b8c:	1dfb      	adds	r3, r7, #7
 8002b8e:	2200      	movs	r2, #0
 8002b90:	701a      	strb	r2, [r3, #0]
 8002b92:	e017      	b.n	8002bc4 <main+0xdc>
          {
              if (menu_state[i].state == state)
 8002b94:	1dfb      	adds	r3, r7, #7
 8002b96:	781a      	ldrb	r2, [r3, #0]
 8002b98:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <main+0xf4>)
 8002b9a:	00d2      	lsls	r2, r2, #3
 8002b9c:	5cd3      	ldrb	r3, [r2, r3]
 8002b9e:	220e      	movs	r2, #14
 8002ba0:	18ba      	adds	r2, r7, r2
 8002ba2:	7812      	ldrb	r2, [r2, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d108      	bne.n	8002bba <main+0xd2>
              {
                  pStateFunc = menu_state[i].pFunc;
 8002ba8:	1dfb      	adds	r3, r7, #7
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	4a0b      	ldr	r2, [pc, #44]	; (8002bdc <main+0xf4>)
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	18d3      	adds	r3, r2, r3
 8002bb2:	3304      	adds	r3, #4
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	60bb      	str	r3, [r7, #8]
                  break;
 8002bb8:	e00b      	b.n	8002bd2 <main+0xea>
          for (uint8_t i=0; menu_state[i].state; i++)   // scan state structure
 8002bba:	1dfb      	adds	r3, r7, #7
 8002bbc:	781a      	ldrb	r2, [r3, #0]
 8002bbe:	1dfb      	adds	r3, r7, #7
 8002bc0:	3201      	adds	r2, #1
 8002bc2:	701a      	strb	r2, [r3, #0]
 8002bc4:	1dfb      	adds	r3, r7, #7
 8002bc6:	781a      	ldrb	r2, [r3, #0]
 8002bc8:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <main+0xf4>)
 8002bca:	00d2      	lsls	r2, r2, #3
 8002bcc:	5cd3      	ldrb	r3, [r2, r3]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1e0      	bne.n	8002b94 <main+0xac>
	  if (pStateFunc)
 8002bd2:	e7af      	b.n	8002b34 <main+0x4c>
 8002bd4:	08002e91 	.word	0x08002e91
 8002bd8:	20000620 	.word	0x20000620
 8002bdc:	20000010 	.word	0x20000010

08002be0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002be0:	b590      	push	{r4, r7, lr}
 8002be2:	b095      	sub	sp, #84	; 0x54
 8002be4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002be6:	2420      	movs	r4, #32
 8002be8:	193b      	adds	r3, r7, r4
 8002bea:	0018      	movs	r0, r3
 8002bec:	2330      	movs	r3, #48	; 0x30
 8002bee:	001a      	movs	r2, r3
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	f002 ffc3 	bl	8005b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bf6:	2310      	movs	r3, #16
 8002bf8:	18fb      	adds	r3, r7, r3
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	2310      	movs	r3, #16
 8002bfe:	001a      	movs	r2, r3
 8002c00:	2100      	movs	r1, #0
 8002c02:	f002 ffbb 	bl	8005b7c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c06:	003b      	movs	r3, r7
 8002c08:	0018      	movs	r0, r3
 8002c0a:	2310      	movs	r3, #16
 8002c0c:	001a      	movs	r2, r3
 8002c0e:	2100      	movs	r1, #0
 8002c10:	f002 ffb4 	bl	8005b7c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c14:	0021      	movs	r1, r4
 8002c16:	187b      	adds	r3, r7, r1
 8002c18:	2202      	movs	r2, #2
 8002c1a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c1c:	187b      	adds	r3, r7, r1
 8002c1e:	2201      	movs	r2, #1
 8002c20:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c22:	187b      	adds	r3, r7, r1
 8002c24:	2210      	movs	r2, #16
 8002c26:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002c28:	187b      	adds	r3, r7, r1
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c2e:	187b      	adds	r3, r7, r1
 8002c30:	0018      	movs	r0, r3
 8002c32:	f001 ffd7 	bl	8004be4 <HAL_RCC_OscConfig>
 8002c36:	1e03      	subs	r3, r0, #0
 8002c38:	d001      	beq.n	8002c3e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002c3a:	f000 f88e 	bl	8002d5a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c3e:	2110      	movs	r1, #16
 8002c40:	187b      	adds	r3, r7, r1
 8002c42:	2207      	movs	r2, #7
 8002c44:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002c46:	187b      	adds	r3, r7, r1
 8002c48:	2200      	movs	r2, #0
 8002c4a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c4c:	187b      	adds	r3, r7, r1
 8002c4e:	2200      	movs	r2, #0
 8002c50:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c52:	187b      	adds	r3, r7, r1
 8002c54:	2200      	movs	r2, #0
 8002c56:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002c58:	187b      	adds	r3, r7, r1
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f002 fadf 	bl	8005220 <HAL_RCC_ClockConfig>
 8002c62:	1e03      	subs	r3, r0, #0
 8002c64:	d001      	beq.n	8002c6a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002c66:	f000 f878 	bl	8002d5a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002c6a:	003b      	movs	r3, r7
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002c70:	003b      	movs	r3, r7
 8002c72:	2200      	movs	r2, #0
 8002c74:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c76:	003b      	movs	r3, r7
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f002 fc01 	bl	8005480 <HAL_RCCEx_PeriphCLKConfig>
 8002c7e:	1e03      	subs	r3, r0, #0
 8002c80:	d001      	beq.n	8002c86 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002c82:	f000 f86a 	bl	8002d5a <Error_Handler>
  }
}
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b015      	add	sp, #84	; 0x54
 8002c8c:	bd90      	pop	{r4, r7, pc}
	...

08002c90 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	0002      	movs	r2, r0
 8002c98:	1dbb      	adds	r3, r7, #6
 8002c9a:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == ENCODER_SW_Pin && btn_flag == true){
 8002c9c:	1dbb      	adds	r3, r7, #6
 8002c9e:	881b      	ldrh	r3, [r3, #0]
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d10b      	bne.n	8002cbc <HAL_GPIO_EXTI_Callback+0x2c>
 8002ca4:	4b11      	ldr	r3, [pc, #68]	; (8002cec <HAL_GPIO_EXTI_Callback+0x5c>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d006      	beq.n	8002cbc <HAL_GPIO_EXTI_Callback+0x2c>
		HAL_TIM_Base_Start_IT(&htim7);   // button debouncing timer
 8002cae:	4b10      	ldr	r3, [pc, #64]	; (8002cf0 <HAL_GPIO_EXTI_Callback+0x60>)
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f002 fd03 	bl	80056bc <HAL_TIM_Base_Start_IT>
		btn_flag = false;
 8002cb6:	4b0d      	ldr	r3, [pc, #52]	; (8002cec <HAL_GPIO_EXTI_Callback+0x5c>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == CO2_RDY_Pin)   //Check if callback is from CO2 sensor
 8002cbc:	1dbb      	adds	r3, r7, #6
 8002cbe:	881a      	ldrh	r2, [r3, #0]
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	021b      	lsls	r3, r3, #8
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d10c      	bne.n	8002ce2 <HAL_GPIO_EXTI_Callback+0x52>
	{
		HAL_GPIO_WritePin(LED_1_GPIO_Port,LED_1_Pin,GPIO_PIN_SET);  //turn on RED led
 8002cc8:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <HAL_GPIO_EXTI_Callback+0x64>)
 8002cca:	2201      	movs	r2, #1
 8002ccc:	2104      	movs	r1, #4
 8002cce:	0018      	movs	r0, r3
 8002cd0:	f001 fa19 	bl	8004106 <HAL_GPIO_WritePin>
		CO2_irq_event++; //set flag
 8002cd4:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <HAL_GPIO_EXTI_Callback+0x68>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	3301      	adds	r3, #1
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <HAL_GPIO_EXTI_Callback+0x68>)
 8002ce0:	701a      	strb	r2, [r3, #0]
	}
}
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	b002      	add	sp, #8
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	20000000 	.word	0x20000000
 8002cf0:	200006cc 	.word	0x200006cc
 8002cf4:	48000400 	.word	0x48000400
 8002cf8:	200006c8 	.word	0x200006c8

08002cfc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(ENCODER_SW_GPIO_Port,ENCODER_SW_Pin)==GPIO_PIN_RESET)  //check encoder sw pin again after some time
 8002d04:	4b0a      	ldr	r3, [pc, #40]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002d06:	2108      	movs	r1, #8
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f001 f9df 	bl	80040cc <HAL_GPIO_ReadPin>
 8002d0e:	1e03      	subs	r3, r0, #0
 8002d10:	d109      	bne.n	8002d26 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		btn_state = ENC_SW_ON;
 8002d12:	4b08      	ldr	r3, [pc, #32]	; (8002d34 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002d14:	2204      	movs	r2, #4
 8002d16:	701a      	strb	r2, [r3, #0]
		btn_flag = true;
 8002d18:	4b07      	ldr	r3, [pc, #28]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim7);
 8002d1e:	4b07      	ldr	r3, [pc, #28]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002d20:	0018      	movs	r0, r3
 8002d22:	f002 fd17 	bl	8005754 <HAL_TIM_Base_Stop_IT>
	}
}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b002      	add	sp, #8
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	48000400 	.word	0x48000400
 8002d34:	20000620 	.word	0x20000620
 8002d38:	20000000 	.word	0x20000000
 8002d3c:	200006cc 	.word	0x200006cc

08002d40 <prepare_CO2_sensor>:


void prepare_CO2_sensor(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PWR_ON_CO2_GPIO_Port,PWR_ON_CO2_Pin,GPIO_PIN_RESET); // switch on power supply for CO2 sensor
 8002d44:	2380      	movs	r3, #128	; 0x80
 8002d46:	0159      	lsls	r1, r3, #5
 8002d48:	2390      	movs	r3, #144	; 0x90
 8002d4a:	05db      	lsls	r3, r3, #23
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f001 f9d9 	bl	8004106 <HAL_GPIO_WritePin>
}
 8002d54:	46c0      	nop			; (mov r8, r8)
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d5e:	b672      	cpsid	i
}
 8002d60:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d62:	e7fe      	b.n	8002d62 <Error_Handler+0x8>

08002d64 <StateMachine>:
*
*   Purpose :       Shifts between the different states
*
*****************************************************************************/
uint8_t StateMachine(uint8_t state, uint8_t stimuli)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	0002      	movs	r2, r0
 8002d6c:	1dfb      	adds	r3, r7, #7
 8002d6e:	701a      	strb	r2, [r3, #0]
 8002d70:	1dbb      	adds	r3, r7, #6
 8002d72:	1c0a      	adds	r2, r1, #0
 8002d74:	701a      	strb	r2, [r3, #0]
    uint8_t nextstate;
    unsigned char i;

    btn_state = KEY_NULL;
 8002d76:	4b25      	ldr	r3, [pc, #148]	; (8002e0c <StateMachine+0xa8>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	701a      	strb	r2, [r3, #0]

    nextstate = state;    // Default stay in same state
 8002d7c:	230f      	movs	r3, #15
 8002d7e:	18fb      	adds	r3, r7, r3
 8002d80:	1dfa      	adds	r2, r7, #7
 8002d82:	7812      	ldrb	r2, [r2, #0]
 8002d84:	701a      	strb	r2, [r3, #0]
    for (i=0; menu_nextstate[i].state; i++)
 8002d86:	230e      	movs	r3, #14
 8002d88:	18fb      	adds	r3, r7, r3
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	701a      	strb	r2, [r3, #0]
 8002d8e:	e02b      	b.n	8002de8 <StateMachine+0x84>
    {
        if (menu_nextstate[i].state == state && menu_nextstate[i].input == stimuli)
 8002d90:	200e      	movs	r0, #14
 8002d92:	183b      	adds	r3, r7, r0
 8002d94:	781a      	ldrb	r2, [r3, #0]
 8002d96:	491e      	ldr	r1, [pc, #120]	; (8002e10 <StateMachine+0xac>)
 8002d98:	0013      	movs	r3, r2
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	189b      	adds	r3, r3, r2
 8002d9e:	5c5b      	ldrb	r3, [r3, r1]
 8002da0:	1dfa      	adds	r2, r7, #7
 8002da2:	7812      	ldrb	r2, [r2, #0]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d119      	bne.n	8002ddc <StateMachine+0x78>
 8002da8:	183b      	adds	r3, r7, r0
 8002daa:	781a      	ldrb	r2, [r3, #0]
 8002dac:	4918      	ldr	r1, [pc, #96]	; (8002e10 <StateMachine+0xac>)
 8002dae:	0013      	movs	r3, r2
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	189b      	adds	r3, r3, r2
 8002db4:	18cb      	adds	r3, r1, r3
 8002db6:	3301      	adds	r3, #1
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	1dba      	adds	r2, r7, #6
 8002dbc:	7812      	ldrb	r2, [r2, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d10c      	bne.n	8002ddc <StateMachine+0x78>
        {
            // This is the one!
            nextstate = menu_nextstate[i].nextstate;
 8002dc2:	183b      	adds	r3, r7, r0
 8002dc4:	781a      	ldrb	r2, [r3, #0]
 8002dc6:	230f      	movs	r3, #15
 8002dc8:	18f9      	adds	r1, r7, r3
 8002dca:	4811      	ldr	r0, [pc, #68]	; (8002e10 <StateMachine+0xac>)
 8002dcc:	0013      	movs	r3, r2
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	189b      	adds	r3, r3, r2
 8002dd2:	18c3      	adds	r3, r0, r3
 8002dd4:	3302      	adds	r3, #2
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	700b      	strb	r3, [r1, #0]
            break;
 8002dda:	e00f      	b.n	8002dfc <StateMachine+0x98>
    for (i=0; menu_nextstate[i].state; i++)
 8002ddc:	210e      	movs	r1, #14
 8002dde:	187b      	adds	r3, r7, r1
 8002de0:	781a      	ldrb	r2, [r3, #0]
 8002de2:	187b      	adds	r3, r7, r1
 8002de4:	3201      	adds	r2, #1
 8002de6:	701a      	strb	r2, [r3, #0]
 8002de8:	230e      	movs	r3, #14
 8002dea:	18fb      	adds	r3, r7, r3
 8002dec:	781a      	ldrb	r2, [r3, #0]
 8002dee:	4908      	ldr	r1, [pc, #32]	; (8002e10 <StateMachine+0xac>)
 8002df0:	0013      	movs	r3, r2
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	189b      	adds	r3, r3, r2
 8002df6:	5c5b      	ldrb	r3, [r3, r1]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1c9      	bne.n	8002d90 <StateMachine+0x2c>
        }
    }

    return nextstate;
 8002dfc:	230f      	movs	r3, #15
 8002dfe:	18fb      	adds	r3, r7, r3
 8002e00:	781b      	ldrb	r3, [r3, #0]
}
 8002e02:	0018      	movs	r0, r3
 8002e04:	46bd      	mov	sp, r7
 8002e06:	b004      	add	sp, #16
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	46c0      	nop			; (mov r8, r8)
 8002e0c:	20000620 	.word	0x20000620
 8002e10:	20000004 	.word	0x20000004

08002e14 <DrawSecondScreen>:

uint8_t DrawSecondScreen(uint8_t input)
{
 8002e14:	b590      	push	{r4, r7, lr}
 8002e16:	b08d      	sub	sp, #52	; 0x34
 8002e18:	af02      	add	r7, sp, #8
 8002e1a:	0002      	movs	r2, r0
 8002e1c:	1dfb      	adds	r3, r7, #7
 8002e1e:	701a      	strb	r2, [r3, #0]

	char buffer5[25];
	static uint8_t dane = 0;
	rc_ssd1309_display_clear();
 8002e20:	f000 fc60 	bl	80036e4 <rc_ssd1309_display_clear>
    dane = dane+1;
 8002e24:	4b17      	ldr	r3, [pc, #92]	; (8002e84 <DrawSecondScreen+0x70>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <DrawSecondScreen+0x70>)
 8002e2e:	701a      	strb	r2, [r3, #0]

	sprintf(buffer5,"second = %d",dane);
 8002e30:	4b14      	ldr	r3, [pc, #80]	; (8002e84 <DrawSecondScreen+0x70>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	001a      	movs	r2, r3
 8002e36:	4914      	ldr	r1, [pc, #80]	; (8002e88 <DrawSecondScreen+0x74>)
 8002e38:	240c      	movs	r4, #12
 8002e3a:	193b      	adds	r3, r7, r4
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	f003 fb1f 	bl	8006480 <siprintf>
	rc_ssd1309_puts(0,0,buffer5,1,0);
 8002e42:	193a      	adds	r2, r7, r4
 8002e44:	2300      	movs	r3, #0
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	2301      	movs	r3, #1
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	f000 fb27 	bl	80034a0 <rc_ssd1309_puts>
	sprintf(buffer5,"input = %d",input);
 8002e52:	1dfb      	adds	r3, r7, #7
 8002e54:	781a      	ldrb	r2, [r3, #0]
 8002e56:	490d      	ldr	r1, [pc, #52]	; (8002e8c <DrawSecondScreen+0x78>)
 8002e58:	193b      	adds	r3, r7, r4
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f003 fb10 	bl	8006480 <siprintf>
	rc_ssd1309_puts(0,10,buffer5,1,0);
 8002e60:	193a      	adds	r2, r7, r4
 8002e62:	2300      	movs	r3, #0
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	2301      	movs	r3, #1
 8002e68:	210a      	movs	r1, #10
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	f000 fb18 	bl	80034a0 <rc_ssd1309_puts>


	rc_ssd1309_display();
 8002e70:	f000 fc00 	bl	8003674 <rc_ssd1309_display>
	HAL_Delay(100);
 8002e74:	2064      	movs	r0, #100	; 0x64
 8002e76:	f000 feb7 	bl	8003be8 <HAL_Delay>

	return ST_SECOND_SCREEN;
 8002e7a:	230b      	movs	r3, #11
}
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b00b      	add	sp, #44	; 0x2c
 8002e82:	bd90      	pop	{r4, r7, pc}
 8002e84:	20000621 	.word	0x20000621
 8002e88:	08008a40 	.word	0x08008a40
 8002e8c:	08008a4c 	.word	0x08008a4c

08002e90 <DrawMainScreen>:


uint8_t DrawMainScreen(uint8_t input)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	0002      	movs	r2, r0
 8002e98:	1dfb      	adds	r3, r7, #7
 8002e9a:	701a      	strb	r2, [r3, #0]

	if(CO2_irq_event>0)
 8002e9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <DrawMainScreen+0x40>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d010      	beq.n	8002ec6 <DrawMainScreen+0x36>
	  {
  		measure_and_display_CO2_concentration();
 8002ea4:	f000 f818 	bl	8002ed8 <measure_and_display_CO2_concentration>
  		measure_and_display_PM_concentration();
 8002ea8:	f000 f8e4 	bl	8003074 <measure_and_display_PM_concentration>
  		measure_and_dispaly_voltage_and_current();
 8002eac:	f000 f9be 	bl	800322c <measure_and_dispaly_voltage_and_current>

  		rc_ssd1309_display();  // send display frame buffer to OLED
 8002eb0:	f000 fbe0 	bl	8003674 <rc_ssd1309_display>

  		HAL_GPIO_WritePin(LED_1_GPIO_Port,LED_1_Pin,GPIO_PIN_RESET);  //turn off RED led
 8002eb4:	4b07      	ldr	r3, [pc, #28]	; (8002ed4 <DrawMainScreen+0x44>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2104      	movs	r1, #4
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f001 f923 	bl	8004106 <HAL_GPIO_WritePin>

  		CO2_irq_event=0;
 8002ec0:	4b03      	ldr	r3, [pc, #12]	; (8002ed0 <DrawMainScreen+0x40>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	701a      	strb	r2, [r3, #0]
	}

	return ST_MAIN_SCREEN;
 8002ec6:	230a      	movs	r3, #10
}
 8002ec8:	0018      	movs	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	b002      	add	sp, #8
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	200006c8 	.word	0x200006c8
 8002ed4:	48000400 	.word	0x48000400

08002ed8 <measure_and_display_CO2_concentration>:


void measure_and_display_CO2_concentration(void)
{
 8002ed8:	b590      	push	{r4, r7, lr}
 8002eda:	b095      	sub	sp, #84	; 0x54
 8002edc:	af02      	add	r7, sp, #8
	uint8_t CO2_wr_adr=0xC2;
 8002ede:	2147      	movs	r1, #71	; 0x47
 8002ee0:	187b      	adds	r3, r7, r1
 8002ee2:	22c2      	movs	r2, #194	; 0xc2
 8002ee4:	701a      	strb	r2, [r3, #0]
	uint8_t CO2_rd_adr=0xC3;
 8002ee6:	2446      	movs	r4, #70	; 0x46
 8002ee8:	193b      	adds	r3, r7, r4
 8002eea:	22c3      	movs	r2, #195	; 0xc3
 8002eec:	701a      	strb	r2, [r3, #0]
	uint8_t CO2_meas_prep[2]={0x03,0x00};
 8002eee:	2034      	movs	r0, #52	; 0x34
 8002ef0:	183b      	adds	r3, r7, r0
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	801a      	strh	r2, [r3, #0]
	unsigned int tempU32;
	char buffer5[25];


	/* Measure CO2 concentration */
	HAL_I2C_Master_Transmit(&hi2c2,CO2_wr_adr,CO2_meas_prep,2,500);         // co2 measure request
 8002ef6:	187b      	adds	r3, r7, r1
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	b299      	uxth	r1, r3
 8002efc:	183a      	adds	r2, r7, r0
 8002efe:	4843      	ldr	r0, [pc, #268]	; (800300c <measure_and_display_CO2_concentration+0x134>)
 8002f00:	23fa      	movs	r3, #250	; 0xfa
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	2302      	movs	r3, #2
 8002f08:	f001 f9cc 	bl	80042a4 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8002f0c:	2005      	movs	r0, #5
 8002f0e:	f000 fe6b 	bl	8003be8 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2,CO2_rd_adr,CO2_meas_read_buff,18,100);    // co2 read sensor data
 8002f12:	193b      	adds	r3, r7, r4
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	b299      	uxth	r1, r3
 8002f18:	2420      	movs	r4, #32
 8002f1a:	193a      	adds	r2, r7, r4
 8002f1c:	483b      	ldr	r0, [pc, #236]	; (800300c <measure_and_display_CO2_concentration+0x134>)
 8002f1e:	2364      	movs	r3, #100	; 0x64
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	2312      	movs	r3, #18
 8002f24:	f001 fac6 	bl	80044b4 <HAL_I2C_Master_Receive>


	/*    Calculation of temperature, humidity and CO2 concentration    */
	tempU32=	(CO2_meas_read_buff[0] << 24 |	CO2_meas_read_buff[1] << 16 |	CO2_meas_read_buff[3] << 8 |	CO2_meas_read_buff[4])	;
 8002f28:	0021      	movs	r1, r4
 8002f2a:	187b      	adds	r3, r7, r1
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	061a      	lsls	r2, r3, #24
 8002f30:	187b      	adds	r3, r7, r1
 8002f32:	785b      	ldrb	r3, [r3, #1]
 8002f34:	041b      	lsls	r3, r3, #16
 8002f36:	431a      	orrs	r2, r3
 8002f38:	187b      	adds	r3, r7, r1
 8002f3a:	78db      	ldrb	r3, [r3, #3]
 8002f3c:	021b      	lsls	r3, r3, #8
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	187a      	adds	r2, r7, r1
 8002f42:	7912      	ldrb	r2, [r2, #4]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	61fb      	str	r3, [r7, #28]
	co2Concentration = *(float*)&tempU32;
 8002f48:	201c      	movs	r0, #28
 8002f4a:	183b      	adds	r3, r7, r0
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	643b      	str	r3, [r7, #64]	; 0x40

	tempU32=	(CO2_meas_read_buff[6] << 24 |	CO2_meas_read_buff[7] << 16 |	CO2_meas_read_buff[9] << 8 |	CO2_meas_read_buff[10])	;
 8002f50:	187b      	adds	r3, r7, r1
 8002f52:	799b      	ldrb	r3, [r3, #6]
 8002f54:	061a      	lsls	r2, r3, #24
 8002f56:	187b      	adds	r3, r7, r1
 8002f58:	79db      	ldrb	r3, [r3, #7]
 8002f5a:	041b      	lsls	r3, r3, #16
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	187b      	adds	r3, r7, r1
 8002f60:	7a5b      	ldrb	r3, [r3, #9]
 8002f62:	021b      	lsls	r3, r3, #8
 8002f64:	4313      	orrs	r3, r2
 8002f66:	187a      	adds	r2, r7, r1
 8002f68:	7a92      	ldrb	r2, [r2, #10]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	61fb      	str	r3, [r7, #28]
	temperature = *(float*)&tempU32;
 8002f6e:	183b      	adds	r3, r7, r0
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	63fb      	str	r3, [r7, #60]	; 0x3c

	tempU32=	(CO2_meas_read_buff[12] << 24 |	CO2_meas_read_buff[13] << 16 |	CO2_meas_read_buff[15] << 8 |	CO2_meas_read_buff[16])	;
 8002f74:	187b      	adds	r3, r7, r1
 8002f76:	7b1b      	ldrb	r3, [r3, #12]
 8002f78:	061a      	lsls	r2, r3, #24
 8002f7a:	187b      	adds	r3, r7, r1
 8002f7c:	7b5b      	ldrb	r3, [r3, #13]
 8002f7e:	041b      	lsls	r3, r3, #16
 8002f80:	431a      	orrs	r2, r3
 8002f82:	187b      	adds	r3, r7, r1
 8002f84:	7bdb      	ldrb	r3, [r3, #15]
 8002f86:	021b      	lsls	r3, r3, #8
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	187a      	adds	r2, r7, r1
 8002f8c:	7c12      	ldrb	r2, [r2, #16]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	61fb      	str	r3, [r7, #28]
	humidity = *(float*)&tempU32;
 8002f92:	183b      	adds	r3, r7, r0
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	63bb      	str	r3, [r7, #56]	; 0x38

	/*    Put results on display frame buffer    */
	rc_ssd1309_display_clear();
 8002f98:	f000 fba4 	bl	80036e4 <rc_ssd1309_display_clear>
	sprintf(buffer5,"CO2 = %3.0f",co2Concentration);
 8002f9c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002f9e:	f7ff fafb 	bl	8002598 <__aeabi_f2d>
 8002fa2:	0002      	movs	r2, r0
 8002fa4:	000b      	movs	r3, r1
 8002fa6:	491a      	ldr	r1, [pc, #104]	; (8003010 <measure_and_display_CO2_concentration+0x138>)
 8002fa8:	0038      	movs	r0, r7
 8002faa:	f003 fa69 	bl	8006480 <siprintf>
	rc_ssd1309_puts(0,0,buffer5,1,0);
 8002fae:	003a      	movs	r2, r7
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	2000      	movs	r0, #0
 8002fba:	f000 fa71 	bl	80034a0 <rc_ssd1309_puts>
	sprintf(buffer5,"Temperature= %2.0f",temperature);
 8002fbe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002fc0:	f7ff faea 	bl	8002598 <__aeabi_f2d>
 8002fc4:	0002      	movs	r2, r0
 8002fc6:	000b      	movs	r3, r1
 8002fc8:	4912      	ldr	r1, [pc, #72]	; (8003014 <measure_and_display_CO2_concentration+0x13c>)
 8002fca:	0038      	movs	r0, r7
 8002fcc:	f003 fa58 	bl	8006480 <siprintf>
	rc_ssd1309_puts(0,9,buffer5,1,0);
 8002fd0:	003a      	movs	r2, r7
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	2109      	movs	r1, #9
 8002fda:	2000      	movs	r0, #0
 8002fdc:	f000 fa60 	bl	80034a0 <rc_ssd1309_puts>
	sprintf(buffer5,"Humidity= %2.0f",humidity);
 8002fe0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002fe2:	f7ff fad9 	bl	8002598 <__aeabi_f2d>
 8002fe6:	0002      	movs	r2, r0
 8002fe8:	000b      	movs	r3, r1
 8002fea:	490b      	ldr	r1, [pc, #44]	; (8003018 <measure_and_display_CO2_concentration+0x140>)
 8002fec:	0038      	movs	r0, r7
 8002fee:	f003 fa47 	bl	8006480 <siprintf>
	rc_ssd1309_puts(0,20,buffer5,1,0);
 8002ff2:	003a      	movs	r2, r7
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	2114      	movs	r1, #20
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	f000 fa4f 	bl	80034a0 <rc_ssd1309_puts>
}
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	46bd      	mov	sp, r7
 8003006:	b013      	add	sp, #76	; 0x4c
 8003008:	bd90      	pop	{r4, r7, pc}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	2000067c 	.word	0x2000067c
 8003010:	08008a58 	.word	0x08008a58
 8003014:	08008a64 	.word	0x08008a64
 8003018:	08008a78 	.word	0x08008a78

0800301c <prepare_PM_sensor>:

void prepare_PM_sensor(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af02      	add	r7, sp, #8
	uint8_t PM_sensor_wr_adr=0xD2;
 8003022:	1dfb      	adds	r3, r7, #7
 8003024:	22d2      	movs	r2, #210	; 0xd2
 8003026:	701a      	strb	r2, [r3, #0]
	uint8_t PM_sensor_start_measure[5]={0x00,0x10,0x03,0x00,0xAC};
 8003028:	003b      	movs	r3, r7
 800302a:	4a10      	ldr	r2, [pc, #64]	; (800306c <prepare_PM_sensor+0x50>)
 800302c:	6811      	ldr	r1, [r2, #0]
 800302e:	6019      	str	r1, [r3, #0]
 8003030:	7912      	ldrb	r2, [r2, #4]
 8003032:	711a      	strb	r2, [r3, #4]

	HAL_GPIO_WritePin(PWR_ON_SPS30_GPIO_Port,PWR_ON_SPS30_Pin,GPIO_PIN_SET);
 8003034:	2380      	movs	r3, #128	; 0x80
 8003036:	0119      	lsls	r1, r3, #4
 8003038:	2390      	movs	r3, #144	; 0x90
 800303a:	05db      	lsls	r3, r3, #23
 800303c:	2201      	movs	r2, #1
 800303e:	0018      	movs	r0, r3
 8003040:	f001 f861 	bl	8004106 <HAL_GPIO_WritePin>
	HAL_Delay(1000);   //wait till sensor powers on
 8003044:	23fa      	movs	r3, #250	; 0xfa
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	0018      	movs	r0, r3
 800304a:	f000 fdcd 	bl	8003be8 <HAL_Delay>

	HAL_I2C_Master_Transmit(&hi2c1,PM_sensor_wr_adr,PM_sensor_start_measure,5,500);
 800304e:	1dfb      	adds	r3, r7, #7
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	b299      	uxth	r1, r3
 8003054:	003a      	movs	r2, r7
 8003056:	4806      	ldr	r0, [pc, #24]	; (8003070 <prepare_PM_sensor+0x54>)
 8003058:	23fa      	movs	r3, #250	; 0xfa
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	2305      	movs	r3, #5
 8003060:	f001 f920 	bl	80042a4 <HAL_I2C_Master_Transmit>
}
 8003064:	46c0      	nop			; (mov r8, r8)
 8003066:	46bd      	mov	sp, r7
 8003068:	b002      	add	sp, #8
 800306a:	bd80      	pop	{r7, pc}
 800306c:	08008a88 	.word	0x08008a88
 8003070:	20000630 	.word	0x20000630

08003074 <measure_and_display_PM_concentration>:




void measure_and_display_PM_concentration(void)
{
 8003074:	b590      	push	{r4, r7, lr}
 8003076:	b09f      	sub	sp, #124	; 0x7c
 8003078:	af02      	add	r7, sp, #8
	uint8_t PM_sensor_wr_adr=0xD2;
 800307a:	216f      	movs	r1, #111	; 0x6f
 800307c:	187b      	adds	r3, r7, r1
 800307e:	22d2      	movs	r2, #210	; 0xd2
 8003080:	701a      	strb	r2, [r3, #0]
	uint8_t PM_sensor_rd_adr=0xD3;
 8003082:	246e      	movs	r4, #110	; 0x6e
 8003084:	193b      	adds	r3, r7, r4
 8003086:	22d3      	movs	r2, #211	; 0xd3
 8003088:	701a      	strb	r2, [r3, #0]
	uint8_t PM_sensor_read_measurement[2]={0x03,0x00};
 800308a:	2060      	movs	r0, #96	; 0x60
 800308c:	183b      	adds	r3, r7, r0
 800308e:	2203      	movs	r2, #3
 8003090:	801a      	strh	r2, [r3, #0]
	float PM_2_5_concentration;
	float PM_10_concentration;
	char buffer5[25];
	unsigned int tempU32;

	HAL_I2C_Master_Transmit(&hi2c1,PM_sensor_wr_adr,PM_sensor_read_measurement,2,500);   // PM sensor, measure request
 8003092:	187b      	adds	r3, r7, r1
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	b299      	uxth	r1, r3
 8003098:	183a      	adds	r2, r7, r0
 800309a:	482f      	ldr	r0, [pc, #188]	; (8003158 <measure_and_display_PM_concentration+0xe4>)
 800309c:	23fa      	movs	r3, #250	; 0xfa
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	2302      	movs	r3, #2
 80030a4:	f001 f8fe 	bl	80042a4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1,PM_sensor_rd_adr,PM_sensor_measurement_data,60,1000);  //	P
 80030a8:	193b      	adds	r3, r7, r4
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	b299      	uxth	r1, r3
 80030ae:	2424      	movs	r4, #36	; 0x24
 80030b0:	193a      	adds	r2, r7, r4
 80030b2:	4829      	ldr	r0, [pc, #164]	; (8003158 <measure_and_display_PM_concentration+0xe4>)
 80030b4:	23fa      	movs	r3, #250	; 0xfa
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	233c      	movs	r3, #60	; 0x3c
 80030bc:	f001 f9fa 	bl	80044b4 <HAL_I2C_Master_Receive>


	tempU32=(PM_sensor_measurement_data[6] << 24 |	PM_sensor_measurement_data[7] << 16 |	PM_sensor_measurement_data[9] << 8 |	PM_sensor_measurement_data[10])	;
 80030c0:	0021      	movs	r1, r4
 80030c2:	187b      	adds	r3, r7, r1
 80030c4:	799b      	ldrb	r3, [r3, #6]
 80030c6:	061a      	lsls	r2, r3, #24
 80030c8:	187b      	adds	r3, r7, r1
 80030ca:	79db      	ldrb	r3, [r3, #7]
 80030cc:	041b      	lsls	r3, r3, #16
 80030ce:	431a      	orrs	r2, r3
 80030d0:	187b      	adds	r3, r7, r1
 80030d2:	7a5b      	ldrb	r3, [r3, #9]
 80030d4:	021b      	lsls	r3, r3, #8
 80030d6:	4313      	orrs	r3, r2
 80030d8:	187a      	adds	r2, r7, r1
 80030da:	7a92      	ldrb	r2, [r2, #10]
 80030dc:	4313      	orrs	r3, r2
 80030de:	607b      	str	r3, [r7, #4]
	PM_2_5_concentration = *(float*)&tempU32;
 80030e0:	1d3b      	adds	r3, r7, #4
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	66bb      	str	r3, [r7, #104]	; 0x68

	tempU32=(PM_sensor_measurement_data[18] << 24 |	PM_sensor_measurement_data[19] << 16 |	PM_sensor_measurement_data[21] << 8 |	PM_sensor_measurement_data[22])	;
 80030e6:	187b      	adds	r3, r7, r1
 80030e8:	7c9b      	ldrb	r3, [r3, #18]
 80030ea:	061a      	lsls	r2, r3, #24
 80030ec:	187b      	adds	r3, r7, r1
 80030ee:	7cdb      	ldrb	r3, [r3, #19]
 80030f0:	041b      	lsls	r3, r3, #16
 80030f2:	431a      	orrs	r2, r3
 80030f4:	187b      	adds	r3, r7, r1
 80030f6:	7d5b      	ldrb	r3, [r3, #21]
 80030f8:	021b      	lsls	r3, r3, #8
 80030fa:	4313      	orrs	r3, r2
 80030fc:	187a      	adds	r2, r7, r1
 80030fe:	7d92      	ldrb	r2, [r2, #22]
 8003100:	4313      	orrs	r3, r2
 8003102:	607b      	str	r3, [r7, #4]
	PM_10_concentration = *(float*)&tempU32;
 8003104:	1d3b      	adds	r3, r7, #4
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	667b      	str	r3, [r7, #100]	; 0x64

	sprintf(buffer5,"PM 2.5 = %3.2f",PM_2_5_concentration);
 800310a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800310c:	f7ff fa44 	bl	8002598 <__aeabi_f2d>
 8003110:	0002      	movs	r2, r0
 8003112:	000b      	movs	r3, r1
 8003114:	4911      	ldr	r1, [pc, #68]	; (800315c <measure_and_display_PM_concentration+0xe8>)
 8003116:	2408      	movs	r4, #8
 8003118:	1938      	adds	r0, r7, r4
 800311a:	f003 f9b1 	bl	8006480 <siprintf>
	rc_ssd1309_puts(0,30,buffer5,1,0);
 800311e:	193a      	adds	r2, r7, r4
 8003120:	2300      	movs	r3, #0
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	2301      	movs	r3, #1
 8003126:	211e      	movs	r1, #30
 8003128:	2000      	movs	r0, #0
 800312a:	f000 f9b9 	bl	80034a0 <rc_ssd1309_puts>
	sprintf(buffer5,"PM 10 = %3.2f",PM_10_concentration);
 800312e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003130:	f7ff fa32 	bl	8002598 <__aeabi_f2d>
 8003134:	0002      	movs	r2, r0
 8003136:	000b      	movs	r3, r1
 8003138:	4909      	ldr	r1, [pc, #36]	; (8003160 <measure_and_display_PM_concentration+0xec>)
 800313a:	1938      	adds	r0, r7, r4
 800313c:	f003 f9a0 	bl	8006480 <siprintf>
	rc_ssd1309_puts(0,40,buffer5,1,0);
 8003140:	193a      	adds	r2, r7, r4
 8003142:	2300      	movs	r3, #0
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	2301      	movs	r3, #1
 8003148:	2128      	movs	r1, #40	; 0x28
 800314a:	2000      	movs	r0, #0
 800314c:	f000 f9a8 	bl	80034a0 <rc_ssd1309_puts>
}
 8003150:	46c0      	nop			; (mov r8, r8)
 8003152:	46bd      	mov	sp, r7
 8003154:	b01d      	add	sp, #116	; 0x74
 8003156:	bd90      	pop	{r4, r7, pc}
 8003158:	20000630 	.word	0x20000630
 800315c:	08008a90 	.word	0x08008a90
 8003160:	08008aa0 	.word	0x08008aa0

08003164 <prepare_INA_sensor>:



void prepare_INA_sensor(void)
{
 8003164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003166:	b089      	sub	sp, #36	; 0x24
 8003168:	af02      	add	r7, sp, #8
	uint8_t INA_wr_adr_in=0x80;
 800316a:	2017      	movs	r0, #23
 800316c:	183b      	adds	r3, r7, r0
 800316e:	2280      	movs	r2, #128	; 0x80
 8003170:	701a      	strb	r2, [r3, #0]
	uint8_t INA_rd_adr_in=0x81;
 8003172:	2516      	movs	r5, #22
 8003174:	197b      	adds	r3, r7, r5
 8003176:	2281      	movs	r2, #129	; 0x81
 8003178:	701a      	strb	r2, [r3, #0]
	uint8_t INA_read_val[5];
	uint8_t INA_man_id[1]={0xfe};
 800317a:	260c      	movs	r6, #12
 800317c:	19bb      	adds	r3, r7, r6
 800317e:	4a27      	ldr	r2, [pc, #156]	; (800321c <prepare_INA_sensor+0xb8>)
 8003180:	7812      	ldrb	r2, [r2, #0]
 8003182:	701a      	strb	r2, [r3, #0]
	uint8_t INA_calib_value_in[3]={0x05,0x01,0xd6};
 8003184:	2308      	movs	r3, #8
 8003186:	18fb      	adds	r3, r7, r3
 8003188:	4a25      	ldr	r2, [pc, #148]	; (8003220 <prepare_INA_sensor+0xbc>)
 800318a:	8811      	ldrh	r1, [r2, #0]
 800318c:	8019      	strh	r1, [r3, #0]
 800318e:	7892      	ldrb	r2, [r2, #2]
 8003190:	709a      	strb	r2, [r3, #2]
	uint8_t INA_conf_value[3]={0x00,0x47,0x27};
 8003192:	1d3b      	adds	r3, r7, #4
 8003194:	4a23      	ldr	r2, [pc, #140]	; (8003224 <prepare_INA_sensor+0xc0>)
 8003196:	8811      	ldrh	r1, [r2, #0]
 8003198:	8019      	strh	r1, [r3, #0]
 800319a:	7892      	ldrb	r2, [r2, #2]
 800319c:	709a      	strb	r2, [r3, #2]


	HAL_I2C_Master_Transmit(&hi2c1,INA_wr_adr_in,INA_man_id,1,500);
 800319e:	0004      	movs	r4, r0
 80031a0:	183b      	adds	r3, r7, r0
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	b299      	uxth	r1, r3
 80031a6:	19ba      	adds	r2, r7, r6
 80031a8:	481f      	ldr	r0, [pc, #124]	; (8003228 <prepare_INA_sensor+0xc4>)
 80031aa:	23fa      	movs	r3, #250	; 0xfa
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	2301      	movs	r3, #1
 80031b2:	f001 f877 	bl	80042a4 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80031b6:	2005      	movs	r0, #5
 80031b8:	f000 fd16 	bl	8003be8 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1,INA_rd_adr_in,INA_read_val,2,100);
 80031bc:	197b      	adds	r3, r7, r5
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	b299      	uxth	r1, r3
 80031c2:	2210      	movs	r2, #16
 80031c4:	18ba      	adds	r2, r7, r2
 80031c6:	4818      	ldr	r0, [pc, #96]	; (8003228 <prepare_INA_sensor+0xc4>)
 80031c8:	2364      	movs	r3, #100	; 0x64
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	2302      	movs	r3, #2
 80031ce:	f001 f971 	bl	80044b4 <HAL_I2C_Master_Receive>
	HAL_Delay(5);
 80031d2:	2005      	movs	r0, #5
 80031d4:	f000 fd08 	bl	8003be8 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1,INA_wr_adr_in,INA_conf_value,3,500);
 80031d8:	193b      	adds	r3, r7, r4
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	b299      	uxth	r1, r3
 80031de:	1d3a      	adds	r2, r7, #4
 80031e0:	4811      	ldr	r0, [pc, #68]	; (8003228 <prepare_INA_sensor+0xc4>)
 80031e2:	23fa      	movs	r3, #250	; 0xfa
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	2303      	movs	r3, #3
 80031ea:	f001 f85b 	bl	80042a4 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80031ee:	2005      	movs	r0, #5
 80031f0:	f000 fcfa 	bl	8003be8 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1,INA_wr_adr_in,INA_calib_value_in,3,500);
 80031f4:	193b      	adds	r3, r7, r4
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	b299      	uxth	r1, r3
 80031fa:	2308      	movs	r3, #8
 80031fc:	18fa      	adds	r2, r7, r3
 80031fe:	480a      	ldr	r0, [pc, #40]	; (8003228 <prepare_INA_sensor+0xc4>)
 8003200:	23fa      	movs	r3, #250	; 0xfa
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	2303      	movs	r3, #3
 8003208:	f001 f84c 	bl	80042a4 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 800320c:	2005      	movs	r0, #5
 800320e:	f000 fceb 	bl	8003be8 <HAL_Delay>

}
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	46bd      	mov	sp, r7
 8003216:	b007      	add	sp, #28
 8003218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	08008ab0 	.word	0x08008ab0
 8003220:	08008ab4 	.word	0x08008ab4
 8003224:	08008ab8 	.word	0x08008ab8
 8003228:	20000630 	.word	0x20000630

0800322c <measure_and_dispaly_voltage_and_current>:


void measure_and_dispaly_voltage_and_current(void)
{
 800322c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800322e:	b093      	sub	sp, #76	; 0x4c
 8003230:	af02      	add	r7, sp, #8
	uint8_t INA_wr_adr_in=0x80;
 8003232:	253f      	movs	r5, #63	; 0x3f
 8003234:	197b      	adds	r3, r7, r5
 8003236:	2280      	movs	r2, #128	; 0x80
 8003238:	701a      	strb	r2, [r3, #0]
	uint8_t INA_rd_adr_in=0x81;
 800323a:	263e      	movs	r6, #62	; 0x3e
 800323c:	19bb      	adds	r3, r7, r6
 800323e:	2281      	movs	r2, #129	; 0x81
 8003240:	701a      	strb	r2, [r3, #0]

	uint8_t INA_read_val[5];
	uint8_t INA_bus_vol_reg[1]={0x02};
 8003242:	2320      	movs	r3, #32
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	4a45      	ldr	r2, [pc, #276]	; (800335c <measure_and_dispaly_voltage_and_current+0x130>)
 8003248:	7812      	ldrb	r2, [r2, #0]
 800324a:	701a      	strb	r2, [r3, #0]
	uint8_t INA_curr_reg[1]={0x04};
 800324c:	201c      	movs	r0, #28
 800324e:	183b      	adds	r3, r7, r0
 8003250:	4a43      	ldr	r2, [pc, #268]	; (8003360 <measure_and_dispaly_voltage_and_current+0x134>)
 8003252:	7812      	ldrb	r2, [r2, #0]
 8003254:	701a      	strb	r2, [r3, #0]
	float current_in;
	float voltage_in;
	char buffer5[25];

	//current measurements
	HAL_I2C_Master_Transmit(&hi2c1,INA_wr_adr_in,INA_curr_reg,1,500);
 8003256:	197b      	adds	r3, r7, r5
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	b299      	uxth	r1, r3
 800325c:	183a      	adds	r2, r7, r0
 800325e:	4841      	ldr	r0, [pc, #260]	; (8003364 <measure_and_dispaly_voltage_and_current+0x138>)
 8003260:	23fa      	movs	r3, #250	; 0xfa
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	2301      	movs	r3, #1
 8003268:	f001 f81c 	bl	80042a4 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 800326c:	2005      	movs	r0, #5
 800326e:	f000 fcbb 	bl	8003be8 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1,INA_rd_adr_in,INA_read_val,2,100);
 8003272:	19bb      	adds	r3, r7, r6
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	b299      	uxth	r1, r3
 8003278:	2424      	movs	r4, #36	; 0x24
 800327a:	193a      	adds	r2, r7, r4
 800327c:	4839      	ldr	r0, [pc, #228]	; (8003364 <measure_and_dispaly_voltage_and_current+0x138>)
 800327e:	2364      	movs	r3, #100	; 0x64
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	2302      	movs	r3, #2
 8003284:	f001 f916 	bl	80044b4 <HAL_I2C_Master_Receive>
	current_value= (0 << 24 |	0 << 16 | INA_read_val[0]<<8 | INA_read_val[1]);
 8003288:	193b      	adds	r3, r7, r4
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	021b      	lsls	r3, r3, #8
 800328e:	193a      	adds	r2, r7, r4
 8003290:	7852      	ldrb	r2, [r2, #1]
 8003292:	4313      	orrs	r3, r2
 8003294:	63bb      	str	r3, [r7, #56]	; 0x38
	current_in=(float)current_value;
 8003296:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003298:	f7fd fb2a 	bl	80008f0 <__aeabi_ui2f>
 800329c:	1c03      	adds	r3, r0, #0
 800329e:	637b      	str	r3, [r7, #52]	; 0x34
	current_in=current_in/1000;
 80032a0:	4931      	ldr	r1, [pc, #196]	; (8003368 <measure_and_dispaly_voltage_and_current+0x13c>)
 80032a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80032a4:	f7fd f8fe 	bl	80004a4 <__aeabi_fdiv>
 80032a8:	1c03      	adds	r3, r0, #0
 80032aa:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf(buffer5,"%3.3fA",current_in);
 80032ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80032ae:	f7ff f973 	bl	8002598 <__aeabi_f2d>
 80032b2:	0002      	movs	r2, r0
 80032b4:	000b      	movs	r3, r1
 80032b6:	492d      	ldr	r1, [pc, #180]	; (800336c <measure_and_dispaly_voltage_and_current+0x140>)
 80032b8:	0038      	movs	r0, r7
 80032ba:	f003 f8e1 	bl	8006480 <siprintf>
	rc_ssd1309_puts(0,50,buffer5,1,0);
 80032be:	003a      	movs	r2, r7
 80032c0:	2300      	movs	r3, #0
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	2301      	movs	r3, #1
 80032c6:	2132      	movs	r1, #50	; 0x32
 80032c8:	2000      	movs	r0, #0
 80032ca:	f000 f8e9 	bl	80034a0 <rc_ssd1309_puts>

	//Voltage measurements
	HAL_I2C_Master_Transmit(&hi2c1,INA_wr_adr_in,INA_bus_vol_reg,1,500);
 80032ce:	197b      	adds	r3, r7, r5
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	b299      	uxth	r1, r3
 80032d4:	2320      	movs	r3, #32
 80032d6:	18fa      	adds	r2, r7, r3
 80032d8:	4822      	ldr	r0, [pc, #136]	; (8003364 <measure_and_dispaly_voltage_and_current+0x138>)
 80032da:	23fa      	movs	r3, #250	; 0xfa
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	2301      	movs	r3, #1
 80032e2:	f000 ffdf 	bl	80042a4 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80032e6:	2005      	movs	r0, #5
 80032e8:	f000 fc7e 	bl	8003be8 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1,INA_rd_adr_in,INA_read_val,2,100);
 80032ec:	19bb      	adds	r3, r7, r6
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	b299      	uxth	r1, r3
 80032f2:	193a      	adds	r2, r7, r4
 80032f4:	481b      	ldr	r0, [pc, #108]	; (8003364 <measure_and_dispaly_voltage_and_current+0x138>)
 80032f6:	2364      	movs	r3, #100	; 0x64
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	2302      	movs	r3, #2
 80032fc:	f001 f8da 	bl	80044b4 <HAL_I2C_Master_Receive>
	voltage_value= (0 << 24 |	0 << 16 | INA_read_val[0]<<8 | INA_read_val[1]);
 8003300:	193b      	adds	r3, r7, r4
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	021b      	lsls	r3, r3, #8
 8003306:	193a      	adds	r2, r7, r4
 8003308:	7852      	ldrb	r2, [r2, #1]
 800330a:	4313      	orrs	r3, r2
 800330c:	633b      	str	r3, [r7, #48]	; 0x30
	voltage_in=(float)voltage_value;
 800330e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003310:	f7fd faee 	bl	80008f0 <__aeabi_ui2f>
 8003314:	1c03      	adds	r3, r0, #0
 8003316:	62fb      	str	r3, [r7, #44]	; 0x2c
	voltage_in=voltage_in*1.251f;
 8003318:	4915      	ldr	r1, [pc, #84]	; (8003370 <measure_and_dispaly_voltage_and_current+0x144>)
 800331a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800331c:	f7fd f9ce 	bl	80006bc <__aeabi_fmul>
 8003320:	1c03      	adds	r3, r0, #0
 8003322:	62fb      	str	r3, [r7, #44]	; 0x2c
	voltage_in=voltage_in/1000;
 8003324:	4910      	ldr	r1, [pc, #64]	; (8003368 <measure_and_dispaly_voltage_and_current+0x13c>)
 8003326:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003328:	f7fd f8bc 	bl	80004a4 <__aeabi_fdiv>
 800332c:	1c03      	adds	r3, r0, #0
 800332e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(buffer5,"%3.3fV",voltage_in);
 8003330:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003332:	f7ff f931 	bl	8002598 <__aeabi_f2d>
 8003336:	0002      	movs	r2, r0
 8003338:	000b      	movs	r3, r1
 800333a:	490e      	ldr	r1, [pc, #56]	; (8003374 <measure_and_dispaly_voltage_and_current+0x148>)
 800333c:	0038      	movs	r0, r7
 800333e:	f003 f89f 	bl	8006480 <siprintf>
	rc_ssd1309_puts(64,50,buffer5,1,0);
 8003342:	003a      	movs	r2, r7
 8003344:	2300      	movs	r3, #0
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	2301      	movs	r3, #1
 800334a:	2132      	movs	r1, #50	; 0x32
 800334c:	2040      	movs	r0, #64	; 0x40
 800334e:	f000 f8a7 	bl	80034a0 <rc_ssd1309_puts>

}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	46bd      	mov	sp, r7
 8003356:	b011      	add	sp, #68	; 0x44
 8003358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800335a:	46c0      	nop			; (mov r8, r8)
 800335c:	08008acc 	.word	0x08008acc
 8003360:	08008ad0 	.word	0x08008ad0
 8003364:	20000630 	.word	0x20000630
 8003368:	447a0000 	.word	0x447a0000
 800336c:	08008abc 	.word	0x08008abc
 8003370:	3fa020c5 	.word	0x3fa020c5
 8003374:	08008ac4 	.word	0x08008ac4

08003378 <rc_ssd1309_drawchar>:
    }
}


void rc_ssd1309_drawchar(int x, int y, char c, uint8_t color, uint8_t bg )
{
 8003378:	b5b0      	push	{r4, r5, r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	0019      	movs	r1, r3
 8003384:	1dfb      	adds	r3, r7, #7
 8003386:	701a      	strb	r2, [r3, #0]
 8003388:	1dbb      	adds	r3, r7, #6
 800338a:	1c0a      	adds	r2, r1, #0
 800338c:	701a      	strb	r2, [r3, #0]
    if ((x >= SSD1309_WIDTH) || (y >= SSD1309_HEIGHT) || ((x + 6 - 1) < 0) || ((y + 8 - 1) < 0)) return;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2b7f      	cmp	r3, #127	; 0x7f
 8003392:	dd00      	ble.n	8003396 <rc_ssd1309_drawchar+0x1e>
 8003394:	e07e      	b.n	8003494 <rc_ssd1309_drawchar+0x11c>
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2b3f      	cmp	r3, #63	; 0x3f
 800339a:	dd00      	ble.n	800339e <rc_ssd1309_drawchar+0x26>
 800339c:	e07a      	b.n	8003494 <rc_ssd1309_drawchar+0x11c>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	3305      	adds	r3, #5
 80033a2:	da00      	bge.n	80033a6 <rc_ssd1309_drawchar+0x2e>
 80033a4:	e076      	b.n	8003494 <rc_ssd1309_drawchar+0x11c>
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	3307      	adds	r3, #7
 80033aa:	da00      	bge.n	80033ae <rc_ssd1309_drawchar+0x36>
 80033ac:	e072      	b.n	8003494 <rc_ssd1309_drawchar+0x11c>

    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 80033ae:	2317      	movs	r3, #23
 80033b0:	18fb      	adds	r3, r7, r3
 80033b2:	2200      	movs	r2, #0
 80033b4:	701a      	strb	r2, [r3, #0]
 80033b6:	e066      	b.n	8003486 <rc_ssd1309_drawchar+0x10e>
      uint8_t line = *(font + c * 5 + i);
 80033b8:	1dfb      	adds	r3, r7, #7
 80033ba:	781a      	ldrb	r2, [r3, #0]
 80033bc:	0013      	movs	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	189b      	adds	r3, r3, r2
 80033c2:	001a      	movs	r2, r3
 80033c4:	2317      	movs	r3, #23
 80033c6:	18fb      	adds	r3, r7, r3
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	b25b      	sxtb	r3, r3
 80033cc:	18d2      	adds	r2, r2, r3
 80033ce:	4b33      	ldr	r3, [pc, #204]	; (800349c <rc_ssd1309_drawchar+0x124>)
 80033d0:	18d2      	adds	r2, r2, r3
 80033d2:	2316      	movs	r3, #22
 80033d4:	18fb      	adds	r3, r7, r3
 80033d6:	7812      	ldrb	r2, [r2, #0]
 80033d8:	701a      	strb	r2, [r3, #0]
      for (int8_t j = 0; j < 8; j++, line >>= 1)
 80033da:	2315      	movs	r3, #21
 80033dc:	18fb      	adds	r3, r7, r3
 80033de:	2200      	movs	r2, #0
 80033e0:	701a      	strb	r2, [r3, #0]
 80033e2:	e041      	b.n	8003468 <rc_ssd1309_drawchar+0xf0>
      {
    	  if (line & 1) {
 80033e4:	2316      	movs	r3, #22
 80033e6:	18fb      	adds	r3, r7, r3
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2201      	movs	r2, #1
 80033ec:	4013      	ands	r3, r2
 80033ee:	d011      	beq.n	8003414 <rc_ssd1309_drawchar+0x9c>
        	rc_ssd1309_setPixel(x + i, y + j, color);
 80033f0:	2317      	movs	r3, #23
 80033f2:	18fb      	adds	r3, r7, r3
 80033f4:	2200      	movs	r2, #0
 80033f6:	569a      	ldrsb	r2, [r3, r2]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	18d0      	adds	r0, r2, r3
 80033fc:	2315      	movs	r3, #21
 80033fe:	18fb      	adds	r3, r7, r3
 8003400:	2200      	movs	r2, #0
 8003402:	569a      	ldrsb	r2, [r3, r2]
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	18d1      	adds	r1, r2, r3
 8003408:	1dbb      	adds	r3, r7, #6
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	001a      	movs	r2, r3
 800340e:	f000 f99f 	bl	8003750 <rc_ssd1309_setPixel>
 8003412:	e01a      	b.n	800344a <rc_ssd1309_drawchar+0xd2>
        } else if (bg != color) {
 8003414:	2420      	movs	r4, #32
 8003416:	2508      	movs	r5, #8
 8003418:	197b      	adds	r3, r7, r5
 800341a:	191b      	adds	r3, r3, r4
 800341c:	1db9      	adds	r1, r7, #6
 800341e:	781a      	ldrb	r2, [r3, #0]
 8003420:	780b      	ldrb	r3, [r1, #0]
 8003422:	429a      	cmp	r2, r3
 8003424:	d011      	beq.n	800344a <rc_ssd1309_drawchar+0xd2>
        	rc_ssd1309_setPixel(x + i, y + j, bg);
 8003426:	2317      	movs	r3, #23
 8003428:	18fb      	adds	r3, r7, r3
 800342a:	2200      	movs	r2, #0
 800342c:	569a      	ldrsb	r2, [r3, r2]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	18d0      	adds	r0, r2, r3
 8003432:	2315      	movs	r3, #21
 8003434:	18fb      	adds	r3, r7, r3
 8003436:	2200      	movs	r2, #0
 8003438:	569a      	ldrsb	r2, [r3, r2]
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	18d1      	adds	r1, r2, r3
 800343e:	197b      	adds	r3, r7, r5
 8003440:	191b      	adds	r3, r3, r4
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	001a      	movs	r2, r3
 8003446:	f000 f983 	bl	8003750 <rc_ssd1309_setPixel>
      for (int8_t j = 0; j < 8; j++, line >>= 1)
 800344a:	2115      	movs	r1, #21
 800344c:	187b      	adds	r3, r7, r1
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	b25b      	sxtb	r3, r3
 8003452:	b2db      	uxtb	r3, r3
 8003454:	3301      	adds	r3, #1
 8003456:	b2da      	uxtb	r2, r3
 8003458:	187b      	adds	r3, r7, r1
 800345a:	701a      	strb	r2, [r3, #0]
 800345c:	2216      	movs	r2, #22
 800345e:	18bb      	adds	r3, r7, r2
 8003460:	18ba      	adds	r2, r7, r2
 8003462:	7812      	ldrb	r2, [r2, #0]
 8003464:	0852      	lsrs	r2, r2, #1
 8003466:	701a      	strb	r2, [r3, #0]
 8003468:	2315      	movs	r3, #21
 800346a:	18fb      	adds	r3, r7, r3
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	b25b      	sxtb	r3, r3
 8003470:	2b07      	cmp	r3, #7
 8003472:	ddb7      	ble.n	80033e4 <rc_ssd1309_drawchar+0x6c>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 8003474:	2117      	movs	r1, #23
 8003476:	187b      	adds	r3, r7, r1
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	b25b      	sxtb	r3, r3
 800347c:	b2db      	uxtb	r3, r3
 800347e:	3301      	adds	r3, #1
 8003480:	b2da      	uxtb	r2, r3
 8003482:	187b      	adds	r3, r7, r1
 8003484:	701a      	strb	r2, [r3, #0]
 8003486:	2317      	movs	r3, #23
 8003488:	18fb      	adds	r3, r7, r3
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	b25b      	sxtb	r3, r3
 800348e:	2b04      	cmp	r3, #4
 8003490:	dd92      	ble.n	80033b8 <rc_ssd1309_drawchar+0x40>
 8003492:	e000      	b.n	8003496 <rc_ssd1309_drawchar+0x11e>
    if ((x >= SSD1309_WIDTH) || (y >= SSD1309_HEIGHT) || ((x + 6 - 1) < 0) || ((y + 8 - 1) < 0)) return;
 8003494:	46c0      	nop			; (mov r8, r8)

        }
      }
    }
}
 8003496:	46bd      	mov	sp, r7
 8003498:	b006      	add	sp, #24
 800349a:	bdb0      	pop	{r4, r5, r7, pc}
 800349c:	08008c34 	.word	0x08008c34

080034a0 <rc_ssd1309_puts>:
    }
  }
}

void rc_ssd1309_puts(int x, int y, char *str, uint8_t color, uint8_t bg)
{
 80034a0:	b590      	push	{r4, r7, lr}
 80034a2:	b089      	sub	sp, #36	; 0x24
 80034a4:	af02      	add	r7, sp, #8
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
 80034ac:	001a      	movs	r2, r3
 80034ae:	1cfb      	adds	r3, r7, #3
 80034b0:	701a      	strb	r2, [r3, #0]
	int cursor_x = x;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	617b      	str	r3, [r7, #20]
	int cursor_y = y;
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	613b      	str	r3, [r7, #16]

	while( *str)
 80034ba:	e011      	b.n	80034e0 <rc_ssd1309_puts+0x40>
	{
		rc_ssd1309_drawchar(cursor_x, cursor_y, *str++, color, bg);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	607a      	str	r2, [r7, #4]
 80034c2:	781a      	ldrb	r2, [r3, #0]
 80034c4:	1cfb      	adds	r3, r7, #3
 80034c6:	781c      	ldrb	r4, [r3, #0]
 80034c8:	6939      	ldr	r1, [r7, #16]
 80034ca:	6978      	ldr	r0, [r7, #20]
 80034cc:	2328      	movs	r3, #40	; 0x28
 80034ce:	18fb      	adds	r3, r7, r3
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	0023      	movs	r3, r4
 80034d6:	f7ff ff4f 	bl	8003378 <rc_ssd1309_drawchar>
		cursor_x += 7;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	3307      	adds	r3, #7
 80034de:	617b      	str	r3, [r7, #20]
	while( *str)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1e9      	bne.n	80034bc <rc_ssd1309_puts+0x1c>
	}


}
 80034e8:	46c0      	nop			; (mov r8, r8)
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	46bd      	mov	sp, r7
 80034ee:	b007      	add	sp, #28
 80034f0:	bd90      	pop	{r4, r7, pc}

080034f2 <SPIwrite>:
			0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x3F,0x20,0x20,0x20,0x3F,0x1F,0x00,0x00,0x3F,
			0x3F,0x22,0x22,0x20,0x00,0x00,0x3F,0x3F,0x00,0x01,0x03,0x01,0x00,0x3F,0x3F,0x00,
			0x00,0x1F,0x3F,0x20,0x20,0x20,0x3F,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};

static void SPIwrite(uint8_t dat){
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b084      	sub	sp, #16
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	0002      	movs	r2, r0
 80034fa:	1dfb      	adds	r3, r7, #7
 80034fc:	701a      	strb	r2, [r3, #0]

	uint8_t i;
	for(i = 0x80; i; i>>=1){
 80034fe:	230f      	movs	r3, #15
 8003500:	18fb      	adds	r3, r7, r3
 8003502:	2280      	movs	r2, #128	; 0x80
 8003504:	701a      	strb	r2, [r3, #0]
 8003506:	e01f      	b.n	8003548 <SPIwrite+0x56>
		OLED_SCK_LO;
 8003508:	2390      	movs	r3, #144	; 0x90
 800350a:	05db      	lsls	r3, r3, #23
 800350c:	2220      	movs	r2, #32
 800350e:	629a      	str	r2, [r3, #40]	; 0x28
		if(dat & i) OLED_MOSI_HI;
 8003510:	1dfb      	adds	r3, r7, #7
 8003512:	220f      	movs	r2, #15
 8003514:	18ba      	adds	r2, r7, r2
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	7812      	ldrb	r2, [r2, #0]
 800351a:	4013      	ands	r3, r2
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d004      	beq.n	800352c <SPIwrite+0x3a>
 8003522:	2390      	movs	r3, #144	; 0x90
 8003524:	05db      	lsls	r3, r3, #23
 8003526:	2280      	movs	r2, #128	; 0x80
 8003528:	619a      	str	r2, [r3, #24]
 800352a:	e003      	b.n	8003534 <SPIwrite+0x42>
		else OLED_MOSI_LO;
 800352c:	2390      	movs	r3, #144	; 0x90
 800352e:	05db      	lsls	r3, r3, #23
 8003530:	2280      	movs	r2, #128	; 0x80
 8003532:	629a      	str	r2, [r3, #40]	; 0x28
		OLED_SCK_HI;
 8003534:	2390      	movs	r3, #144	; 0x90
 8003536:	05db      	lsls	r3, r3, #23
 8003538:	2220      	movs	r2, #32
 800353a:	619a      	str	r2, [r3, #24]
	for(i = 0x80; i; i>>=1){
 800353c:	220f      	movs	r2, #15
 800353e:	18bb      	adds	r3, r7, r2
 8003540:	18ba      	adds	r2, r7, r2
 8003542:	7812      	ldrb	r2, [r2, #0]
 8003544:	0852      	lsrs	r2, r2, #1
 8003546:	701a      	strb	r2, [r3, #0]
 8003548:	230f      	movs	r3, #15
 800354a:	18fb      	adds	r3, r7, r3
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1da      	bne.n	8003508 <SPIwrite+0x16>
	}
}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	46c0      	nop			; (mov r8, r8)
 8003556:	46bd      	mov	sp, r7
 8003558:	b004      	add	sp, #16
 800355a:	bd80      	pop	{r7, pc}

0800355c <rc_ssd1309_cmd>:

void rc_ssd1309_cmd(uint8_t cmd){
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	0002      	movs	r2, r0
 8003564:	1dfb      	adds	r3, r7, #7
 8003566:	701a      	strb	r2, [r3, #0]
	
	#if USE_CS == 1
	OLED_CS_HI;
 8003568:	2390      	movs	r3, #144	; 0x90
 800356a:	05db      	lsls	r3, r3, #23
 800356c:	2210      	movs	r2, #16
 800356e:	619a      	str	r2, [r3, #24]
	#endif
	
	OLED_DC_LO;
 8003570:	2390      	movs	r3, #144	; 0x90
 8003572:	05db      	lsls	r3, r3, #23
 8003574:	2204      	movs	r2, #4
 8003576:	629a      	str	r2, [r3, #40]	; 0x28
	
	#if USE_CS == 1
	OLED_CS_LO;
 8003578:	2390      	movs	r3, #144	; 0x90
 800357a:	05db      	lsls	r3, r3, #23
 800357c:	2210      	movs	r2, #16
 800357e:	629a      	str	r2, [r3, #40]	; 0x28
	#endif	
	
	SPIwrite(cmd);
 8003580:	1dfb      	adds	r3, r7, #7
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	0018      	movs	r0, r3
 8003586:	f7ff ffb4 	bl	80034f2 <SPIwrite>

	#if USE_CS == 1
	OLED_CS_HI;
 800358a:	2390      	movs	r3, #144	; 0x90
 800358c:	05db      	lsls	r3, r3, #23
 800358e:	2210      	movs	r2, #16
 8003590:	619a      	str	r2, [r3, #24]
	#endif		
}
 8003592:	46c0      	nop			; (mov r8, r8)
 8003594:	46bd      	mov	sp, r7
 8003596:	b002      	add	sp, #8
 8003598:	bd80      	pop	{r7, pc}

0800359a <rc_ssd1306_init>:





void rc_ssd1306_init (void){
 800359a:	b580      	push	{r7, lr}
 800359c:	af00      	add	r7, sp, #0
	
	OLED_RST_HI;
 800359e:	2390      	movs	r3, #144	; 0x90
 80035a0:	05db      	lsls	r3, r3, #23
 80035a2:	2208      	movs	r2, #8
 80035a4:	619a      	str	r2, [r3, #24]
	HAL_Delay(50);
 80035a6:	2032      	movs	r0, #50	; 0x32
 80035a8:	f000 fb1e 	bl	8003be8 <HAL_Delay>
	OLED_RST_LO;
 80035ac:	2390      	movs	r3, #144	; 0x90
 80035ae:	05db      	lsls	r3, r3, #23
 80035b0:	2208      	movs	r2, #8
 80035b2:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(50);
 80035b4:	2032      	movs	r0, #50	; 0x32
 80035b6:	f000 fb17 	bl	8003be8 <HAL_Delay>
	OLED_RST_HI;
 80035ba:	2390      	movs	r3, #144	; 0x90
 80035bc:	05db      	lsls	r3, r3, #23
 80035be:	2208      	movs	r2, #8
 80035c0:	619a      	str	r2, [r3, #24]
		
	rc_ssd1309_cmd(0xAE);//--turn off oled panel
 80035c2:	20ae      	movs	r0, #174	; 0xae
 80035c4:	f7ff ffca 	bl	800355c <rc_ssd1309_cmd>
	rc_ssd1309_cmd(0x00);//---set low column address
 80035c8:	2000      	movs	r0, #0
 80035ca:	f7ff ffc7 	bl	800355c <rc_ssd1309_cmd>
	rc_ssd1309_cmd(0x10);//---set high column address
 80035ce:	2010      	movs	r0, #16
 80035d0:	f7ff ffc4 	bl	800355c <rc_ssd1309_cmd>
	rc_ssd1309_cmd(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 80035d4:	2040      	movs	r0, #64	; 0x40
 80035d6:	f7ff ffc1 	bl	800355c <rc_ssd1309_cmd>
	//rc_ssd1309_cmd(0x20);
	rc_ssd1309_cmd(0x81);//--set contrast control register
 80035da:	2081      	movs	r0, #129	; 0x81
 80035dc:	f7ff ffbe 	bl	800355c <rc_ssd1309_cmd>
	rc_ssd1309_cmd(0x7F);// Set SEG Output Current Brightness  cf
 80035e0:	207f      	movs	r0, #127	; 0x7f
 80035e2:	f7ff ffbb 	bl	800355c <rc_ssd1309_cmd>
	rc_ssd1309_cmd(0xA1);//--Set SEG/Column Mapping  A0
 80035e6:	20a1      	movs	r0, #161	; 0xa1
 80035e8:	f7ff ffb8 	bl	800355c <rc_ssd1309_cmd>
	rc_ssd1309_cmd(0xC8);//Set COM/Row Scan Direction  C0
 80035ec:	20c8      	movs	r0, #200	; 0xc8
 80035ee:	f7ff ffb5 	bl	800355c <rc_ssd1309_cmd>
	rc_ssd1309_cmd(0xA6);//--set normal display
 80035f2:	20a6      	movs	r0, #166	; 0xa6
 80035f4:	f7ff ffb2 	bl	800355c <rc_ssd1309_cmd>
	rc_ssd1309_cmd(0xA8);//--set multiplex ratio(1 to 64)
 80035f8:	20a8      	movs	r0, #168	; 0xa8
 80035fa:	f7ff ffaf 	bl	800355c <rc_ssd1309_cmd>
	rc_ssd1309_cmd(0x3F);//--1/64 duty
 80035fe:	203f      	movs	r0, #63	; 0x3f
 8003600:	f7ff ffac 	bl	800355c <rc_ssd1309_cmd>
	rc_ssd1309_cmd(0xD3);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 8003604:	20d3      	movs	r0, #211	; 0xd3
 8003606:	f7ff ffa9 	bl	800355c <rc_ssd1309_cmd>
	rc_ssd1309_cmd(0x00);//-not offset
 800360a:	2000      	movs	r0, #0
 800360c:	f7ff ffa6 	bl	800355c <rc_ssd1309_cmd>
	rc_ssd1309_cmd(0xD5);//--set display clock divide ratio/oscillator frequency
 8003610:	20d5      	movs	r0, #213	; 0xd5
 8003612:	f7ff ffa3 	bl	800355c <rc_ssd1309_cmd>
	rc_ssd1309_cmd(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
 8003616:	2080      	movs	r0, #128	; 0x80
 8003618:	f7ff ffa0 	bl	800355c <rc_ssd1309_cmd>
	rc_ssd1309_cmd(0xD9);//--set pre-charge period
 800361c:	20d9      	movs	r0, #217	; 0xd9
 800361e:	f7ff ff9d 	bl	800355c <rc_ssd1309_cmd>
	rc_ssd1309_cmd(0xF1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock	
 8003622:	20f1      	movs	r0, #241	; 0xf1
 8003624:	f7ff ff9a 	bl	800355c <rc_ssd1309_cmd>
	rc_ssd1309_cmd(0xDA);//--set com pins hardware configuration
 8003628:	20da      	movs	r0, #218	; 0xda
 800362a:	f7ff ff97 	bl	800355c <rc_ssd1309_cmd>
	rc_ssd1309_cmd(0x12);
 800362e:	2012      	movs	r0, #18
 8003630:	f7ff ff94 	bl	800355c <rc_ssd1309_cmd>
	rc_ssd1309_cmd(0xDB);//--set vcomh
 8003634:	20db      	movs	r0, #219	; 0xdb
 8003636:	f7ff ff91 	bl	800355c <rc_ssd1309_cmd>
	rc_ssd1309_cmd(0x40);//Set VCOM Deselect Level
 800363a:	2040      	movs	r0, #64	; 0x40
 800363c:	f7ff ff8e 	bl	800355c <rc_ssd1309_cmd>
	rc_ssd1309_cmd(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
 8003640:	2020      	movs	r0, #32
 8003642:	f7ff ff8b 	bl	800355c <rc_ssd1309_cmd>
	rc_ssd1309_cmd(0x00);//02-default
 8003646:	2000      	movs	r0, #0
 8003648:	f7ff ff88 	bl	800355c <rc_ssd1309_cmd>
	rc_ssd1309_cmd(0x8D);//--set Charge Pump enable/disable		
 800364c:	208d      	movs	r0, #141	; 0x8d
 800364e:	f7ff ff85 	bl	800355c <rc_ssd1309_cmd>
	rc_ssd1309_cmd(0x14);//--set(0x10) disable
 8003652:	2014      	movs	r0, #20
 8003654:	f7ff ff82 	bl	800355c <rc_ssd1309_cmd>
	rc_ssd1309_cmd(0xA4);// Disable Entire Display On (0xa4/0xa5)
 8003658:	20a4      	movs	r0, #164	; 0xa4
 800365a:	f7ff ff7f 	bl	800355c <rc_ssd1309_cmd>
	rc_ssd1309_cmd(0xA6);// Disable Inverse Display On (0xa6/a7)
 800365e:	20a6      	movs	r0, #166	; 0xa6
 8003660:	f7ff ff7c 	bl	800355c <rc_ssd1309_cmd>
	rc_ssd1309_cmd(0xAF);//--turn on oled panel		
 8003664:	20af      	movs	r0, #175	; 0xaf
 8003666:	f7ff ff79 	bl	800355c <rc_ssd1309_cmd>
	

	rc_ssd1309_display_clear();
 800366a:	f000 f83b 	bl	80036e4 <rc_ssd1309_display_clear>


}
 800366e:	46c0      	nop			; (mov r8, r8)
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <rc_ssd1309_display>:

void rc_ssd1309_display(void){
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
	rc_ssd1309_cmd(SSD1306_SETLOWCOLUMN | 0x0);//--turn off oled panel
 800367a:	2000      	movs	r0, #0
 800367c:	f7ff ff6e 	bl	800355c <rc_ssd1309_cmd>
	rc_ssd1309_cmd(SSD1306_SETHIGHCOLUMN | 0x0);//---set low column address
 8003680:	2010      	movs	r0, #16
 8003682:	f7ff ff6b 	bl	800355c <rc_ssd1309_cmd>
	rc_ssd1309_cmd(SSD1306_SETSTARTLINE | 0x0);//---set high column address
 8003686:	2040      	movs	r0, #64	; 0x40
 8003688:	f7ff ff68 	bl	800355c <rc_ssd1309_cmd>
	//rc_ssd1309_cmd(0x21);
	#if USE_CS == 1
	OLED_CS_HI;
 800368c:	2390      	movs	r3, #144	; 0x90
 800368e:	05db      	lsls	r3, r3, #23
 8003690:	2210      	movs	r2, #16
 8003692:	619a      	str	r2, [r3, #24]
	#endif

	OLED_DC_HI;
 8003694:	2390      	movs	r3, #144	; 0x90
 8003696:	05db      	lsls	r3, r3, #23
 8003698:	2204      	movs	r2, #4
 800369a:	619a      	str	r2, [r3, #24]

	#if USE_CS == 1
	OLED_CS_LO;
 800369c:	2390      	movs	r3, #144	; 0x90
 800369e:	05db      	lsls	r3, r3, #23
 80036a0:	2210      	movs	r2, #16
 80036a2:	629a      	str	r2, [r3, #40]	; 0x28
	#endif

	for(uint16_t i=0; i<(SSD1309_WIDTH*SSD1309_HEIGHT/8); i++)
 80036a4:	1dbb      	adds	r3, r7, #6
 80036a6:	2200      	movs	r2, #0
 80036a8:	801a      	strh	r2, [r3, #0]
 80036aa:	e00b      	b.n	80036c4 <rc_ssd1309_display+0x50>
	{
		SPIwrite(ssd1309_buf[i]);
 80036ac:	1dbb      	adds	r3, r7, #6
 80036ae:	881b      	ldrh	r3, [r3, #0]
 80036b0:	4a0b      	ldr	r2, [pc, #44]	; (80036e0 <rc_ssd1309_display+0x6c>)
 80036b2:	5cd3      	ldrb	r3, [r2, r3]
 80036b4:	0018      	movs	r0, r3
 80036b6:	f7ff ff1c 	bl	80034f2 <SPIwrite>
	for(uint16_t i=0; i<(SSD1309_WIDTH*SSD1309_HEIGHT/8); i++)
 80036ba:	1dbb      	adds	r3, r7, #6
 80036bc:	881a      	ldrh	r2, [r3, #0]
 80036be:	1dbb      	adds	r3, r7, #6
 80036c0:	3201      	adds	r2, #1
 80036c2:	801a      	strh	r2, [r3, #0]
 80036c4:	1dbb      	adds	r3, r7, #6
 80036c6:	881a      	ldrh	r2, [r3, #0]
 80036c8:	2380      	movs	r3, #128	; 0x80
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d3ed      	bcc.n	80036ac <rc_ssd1309_display+0x38>

	}

	#if USE_CS == 1
	OLED_CS_HI;
 80036d0:	2390      	movs	r3, #144	; 0x90
 80036d2:	05db      	lsls	r3, r3, #23
 80036d4:	2210      	movs	r2, #16
 80036d6:	619a      	str	r2, [r3, #24]
	#endif
}
 80036d8:	46c0      	nop			; (mov r8, r8)
 80036da:	46bd      	mov	sp, r7
 80036dc:	b002      	add	sp, #8
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	20000028 	.word	0x20000028

080036e4 <rc_ssd1309_display_clear>:

void rc_ssd1309_display_clear(void){
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
	rc_ssd1309_cmd(SSD1306_SETLOWCOLUMN | 0x0);//--turn off oled panel
 80036ea:	2000      	movs	r0, #0
 80036ec:	f7ff ff36 	bl	800355c <rc_ssd1309_cmd>
	rc_ssd1309_cmd(SSD1306_SETHIGHCOLUMN | 0x0);//---set low column address
 80036f0:	2010      	movs	r0, #16
 80036f2:	f7ff ff33 	bl	800355c <rc_ssd1309_cmd>
	rc_ssd1309_cmd(SSD1306_SETSTARTLINE | 0x0);//---set high column address
 80036f6:	2040      	movs	r0, #64	; 0x40
 80036f8:	f7ff ff30 	bl	800355c <rc_ssd1309_cmd>
	//rc_ssd1309_cmd(0x21);
	#if USE_CS == 1
	OLED_CS_HI;
 80036fc:	2390      	movs	r3, #144	; 0x90
 80036fe:	05db      	lsls	r3, r3, #23
 8003700:	2210      	movs	r2, #16
 8003702:	619a      	str	r2, [r3, #24]
	#endif

	OLED_DC_HI;
 8003704:	2390      	movs	r3, #144	; 0x90
 8003706:	05db      	lsls	r3, r3, #23
 8003708:	2204      	movs	r2, #4
 800370a:	619a      	str	r2, [r3, #24]

	#if USE_CS == 1
	OLED_CS_LO;
 800370c:	2390      	movs	r3, #144	; 0x90
 800370e:	05db      	lsls	r3, r3, #23
 8003710:	2210      	movs	r2, #16
 8003712:	629a      	str	r2, [r3, #40]	; 0x28
	#endif

	for(uint16_t i=0; i<(SSD1309_WIDTH*SSD1309_HEIGHT/8); i++)
 8003714:	1dbb      	adds	r3, r7, #6
 8003716:	2200      	movs	r2, #0
 8003718:	801a      	strh	r2, [r3, #0]
 800371a:	e009      	b.n	8003730 <rc_ssd1309_display_clear+0x4c>
	{
		ssd1309_buf[i]=0;
 800371c:	1dbb      	adds	r3, r7, #6
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	4a0a      	ldr	r2, [pc, #40]	; (800374c <rc_ssd1309_display_clear+0x68>)
 8003722:	2100      	movs	r1, #0
 8003724:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0; i<(SSD1309_WIDTH*SSD1309_HEIGHT/8); i++)
 8003726:	1dbb      	adds	r3, r7, #6
 8003728:	881a      	ldrh	r2, [r3, #0]
 800372a:	1dbb      	adds	r3, r7, #6
 800372c:	3201      	adds	r2, #1
 800372e:	801a      	strh	r2, [r3, #0]
 8003730:	1dbb      	adds	r3, r7, #6
 8003732:	881a      	ldrh	r2, [r3, #0]
 8003734:	2380      	movs	r3, #128	; 0x80
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	429a      	cmp	r2, r3
 800373a:	d3ef      	bcc.n	800371c <rc_ssd1309_display_clear+0x38>
		//SPIwrite(ssd1309_buf2[i]);

	}

	#if USE_CS == 1
	OLED_CS_HI;
 800373c:	2390      	movs	r3, #144	; 0x90
 800373e:	05db      	lsls	r3, r3, #23
 8003740:	2210      	movs	r2, #16
 8003742:	619a      	str	r2, [r3, #24]
	#endif
}
 8003744:	46c0      	nop			; (mov r8, r8)
 8003746:	46bd      	mov	sp, r7
 8003748:	b002      	add	sp, #8
 800374a:	bd80      	pop	{r7, pc}
 800374c:	20000028 	.word	0x20000028

08003750 <rc_ssd1309_setPixel>:

void rc_ssd1309_setPixel(int x, int y, uint8_t bw){
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	1dfb      	adds	r3, r7, #7
 800375c:	701a      	strb	r2, [r3, #0]

	if(bw) ssd1309_buf[x + (y/8)*128] |= (1<<(y%8));
 800375e:	1dfb      	adds	r3, r7, #7
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d021      	beq.n	80037aa <rc_ssd1309_setPixel+0x5a>
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	da00      	bge.n	800376e <rc_ssd1309_setPixel+0x1e>
 800376c:	3307      	adds	r3, #7
 800376e:	10db      	asrs	r3, r3, #3
 8003770:	001a      	movs	r2, r3
 8003772:	01d1      	lsls	r1, r2, #7
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	18cb      	adds	r3, r1, r3
 8003778:	491f      	ldr	r1, [pc, #124]	; (80037f8 <rc_ssd1309_setPixel+0xa8>)
 800377a:	5ccb      	ldrb	r3, [r1, r3]
 800377c:	b259      	sxtb	r1, r3
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	481e      	ldr	r0, [pc, #120]	; (80037fc <rc_ssd1309_setPixel+0xac>)
 8003782:	4003      	ands	r3, r0
 8003784:	d504      	bpl.n	8003790 <rc_ssd1309_setPixel+0x40>
 8003786:	3b01      	subs	r3, #1
 8003788:	2008      	movs	r0, #8
 800378a:	4240      	negs	r0, r0
 800378c:	4303      	orrs	r3, r0
 800378e:	3301      	adds	r3, #1
 8003790:	0018      	movs	r0, r3
 8003792:	2301      	movs	r3, #1
 8003794:	4083      	lsls	r3, r0
 8003796:	b25b      	sxtb	r3, r3
 8003798:	430b      	orrs	r3, r1
 800379a:	b259      	sxtb	r1, r3
 800379c:	01d2      	lsls	r2, r2, #7
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	18d3      	adds	r3, r2, r3
 80037a2:	b2c9      	uxtb	r1, r1
 80037a4:	4a14      	ldr	r2, [pc, #80]	; (80037f8 <rc_ssd1309_setPixel+0xa8>)
 80037a6:	54d1      	strb	r1, [r2, r3]
	else ssd1309_buf[x + (y/8)*128] &= ~(1<<(y%8));
}
 80037a8:	e022      	b.n	80037f0 <rc_ssd1309_setPixel+0xa0>
	else ssd1309_buf[x + (y/8)*128] &= ~(1<<(y%8));
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	da00      	bge.n	80037b2 <rc_ssd1309_setPixel+0x62>
 80037b0:	3307      	adds	r3, #7
 80037b2:	10db      	asrs	r3, r3, #3
 80037b4:	001a      	movs	r2, r3
 80037b6:	01d1      	lsls	r1, r2, #7
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	18cb      	adds	r3, r1, r3
 80037bc:	490e      	ldr	r1, [pc, #56]	; (80037f8 <rc_ssd1309_setPixel+0xa8>)
 80037be:	5ccb      	ldrb	r3, [r1, r3]
 80037c0:	b259      	sxtb	r1, r3
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	480d      	ldr	r0, [pc, #52]	; (80037fc <rc_ssd1309_setPixel+0xac>)
 80037c6:	4003      	ands	r3, r0
 80037c8:	d504      	bpl.n	80037d4 <rc_ssd1309_setPixel+0x84>
 80037ca:	3b01      	subs	r3, #1
 80037cc:	2008      	movs	r0, #8
 80037ce:	4240      	negs	r0, r0
 80037d0:	4303      	orrs	r3, r0
 80037d2:	3301      	adds	r3, #1
 80037d4:	0018      	movs	r0, r3
 80037d6:	2301      	movs	r3, #1
 80037d8:	4083      	lsls	r3, r0
 80037da:	b25b      	sxtb	r3, r3
 80037dc:	43db      	mvns	r3, r3
 80037de:	b25b      	sxtb	r3, r3
 80037e0:	400b      	ands	r3, r1
 80037e2:	b259      	sxtb	r1, r3
 80037e4:	01d2      	lsls	r2, r2, #7
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	18d3      	adds	r3, r2, r3
 80037ea:	b2c9      	uxtb	r1, r1
 80037ec:	4a02      	ldr	r2, [pc, #8]	; (80037f8 <rc_ssd1309_setPixel+0xa8>)
 80037ee:	54d1      	strb	r1, [r2, r3]
}
 80037f0:	46c0      	nop			; (mov r8, r8)
 80037f2:	46bd      	mov	sp, r7
 80037f4:	b004      	add	sp, #16
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	20000028 	.word	0x20000028
 80037fc:	80000007 	.word	0x80000007

08003800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003806:	4b0f      	ldr	r3, [pc, #60]	; (8003844 <HAL_MspInit+0x44>)
 8003808:	699a      	ldr	r2, [r3, #24]
 800380a:	4b0e      	ldr	r3, [pc, #56]	; (8003844 <HAL_MspInit+0x44>)
 800380c:	2101      	movs	r1, #1
 800380e:	430a      	orrs	r2, r1
 8003810:	619a      	str	r2, [r3, #24]
 8003812:	4b0c      	ldr	r3, [pc, #48]	; (8003844 <HAL_MspInit+0x44>)
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	2201      	movs	r2, #1
 8003818:	4013      	ands	r3, r2
 800381a:	607b      	str	r3, [r7, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800381e:	4b09      	ldr	r3, [pc, #36]	; (8003844 <HAL_MspInit+0x44>)
 8003820:	69da      	ldr	r2, [r3, #28]
 8003822:	4b08      	ldr	r3, [pc, #32]	; (8003844 <HAL_MspInit+0x44>)
 8003824:	2180      	movs	r1, #128	; 0x80
 8003826:	0549      	lsls	r1, r1, #21
 8003828:	430a      	orrs	r2, r1
 800382a:	61da      	str	r2, [r3, #28]
 800382c:	4b05      	ldr	r3, [pc, #20]	; (8003844 <HAL_MspInit+0x44>)
 800382e:	69da      	ldr	r2, [r3, #28]
 8003830:	2380      	movs	r3, #128	; 0x80
 8003832:	055b      	lsls	r3, r3, #21
 8003834:	4013      	ands	r3, r2
 8003836:	603b      	str	r3, [r7, #0]
 8003838:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	46bd      	mov	sp, r7
 800383e:	b002      	add	sp, #8
 8003840:	bd80      	pop	{r7, pc}
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	40021000 	.word	0x40021000

08003848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800384c:	e7fe      	b.n	800384c <NMI_Handler+0x4>

0800384e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003852:	e7fe      	b.n	8003852 <HardFault_Handler+0x4>

08003854 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003858:	46c0      	nop			; (mov r8, r8)
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003862:	46c0      	nop			; (mov r8, r8)
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800386c:	f000 f9a0 	bl	8003bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003870:	46c0      	nop			; (mov r8, r8)
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800387a:	2008      	movs	r0, #8
 800387c:	f000 fc60 	bl	8004140 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8003880:	46c0      	nop			; (mov r8, r8)
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800388a:	2380      	movs	r3, #128	; 0x80
 800388c:	021b      	lsls	r3, r3, #8
 800388e:	0018      	movs	r0, r3
 8003890:	f000 fc56 	bl	8004140 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003894:	46c0      	nop			; (mov r8, r8)
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
	...

0800389c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80038a0:	4b03      	ldr	r3, [pc, #12]	; (80038b0 <TIM7_IRQHandler+0x14>)
 80038a2:	0018      	movs	r0, r3
 80038a4:	f001 ff84 	bl	80057b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80038a8:	46c0      	nop			; (mov r8, r8)
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	46c0      	nop			; (mov r8, r8)
 80038b0:	200006cc 	.word	0x200006cc

080038b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
	return 1;
 80038b8:	2301      	movs	r3, #1
}
 80038ba:	0018      	movs	r0, r3
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <_kill>:

int _kill(int pid, int sig)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80038ca:	f002 f92d 	bl	8005b28 <__errno>
 80038ce:	0003      	movs	r3, r0
 80038d0:	2216      	movs	r2, #22
 80038d2:	601a      	str	r2, [r3, #0]
	return -1;
 80038d4:	2301      	movs	r3, #1
 80038d6:	425b      	negs	r3, r3
}
 80038d8:	0018      	movs	r0, r3
 80038da:	46bd      	mov	sp, r7
 80038dc:	b002      	add	sp, #8
 80038de:	bd80      	pop	{r7, pc}

080038e0 <_exit>:

void _exit (int status)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80038e8:	2301      	movs	r3, #1
 80038ea:	425a      	negs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	0011      	movs	r1, r2
 80038f0:	0018      	movs	r0, r3
 80038f2:	f7ff ffe5 	bl	80038c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80038f6:	e7fe      	b.n	80038f6 <_exit+0x16>

080038f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003904:	2300      	movs	r3, #0
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	e00a      	b.n	8003920 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800390a:	e000      	b.n	800390e <_read+0x16>
 800390c:	bf00      	nop
 800390e:	0001      	movs	r1, r0
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	60ba      	str	r2, [r7, #8]
 8003916:	b2ca      	uxtb	r2, r1
 8003918:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	3301      	adds	r3, #1
 800391e:	617b      	str	r3, [r7, #20]
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	429a      	cmp	r2, r3
 8003926:	dbf0      	blt.n	800390a <_read+0x12>
	}

return len;
 8003928:	687b      	ldr	r3, [r7, #4]
}
 800392a:	0018      	movs	r0, r3
 800392c:	46bd      	mov	sp, r7
 800392e:	b006      	add	sp, #24
 8003930:	bd80      	pop	{r7, pc}

08003932 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b086      	sub	sp, #24
 8003936:	af00      	add	r7, sp, #0
 8003938:	60f8      	str	r0, [r7, #12]
 800393a:	60b9      	str	r1, [r7, #8]
 800393c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800393e:	2300      	movs	r3, #0
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	e009      	b.n	8003958 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	1c5a      	adds	r2, r3, #1
 8003948:	60ba      	str	r2, [r7, #8]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	0018      	movs	r0, r3
 800394e:	e000      	b.n	8003952 <_write+0x20>
 8003950:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	3301      	adds	r3, #1
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	429a      	cmp	r2, r3
 800395e:	dbf1      	blt.n	8003944 <_write+0x12>
	}
	return len;
 8003960:	687b      	ldr	r3, [r7, #4]
}
 8003962:	0018      	movs	r0, r3
 8003964:	46bd      	mov	sp, r7
 8003966:	b006      	add	sp, #24
 8003968:	bd80      	pop	{r7, pc}

0800396a <_close>:

int _close(int file)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b082      	sub	sp, #8
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
	return -1;
 8003972:	2301      	movs	r3, #1
 8003974:	425b      	negs	r3, r3
}
 8003976:	0018      	movs	r0, r3
 8003978:	46bd      	mov	sp, r7
 800397a:	b002      	add	sp, #8
 800397c:	bd80      	pop	{r7, pc}

0800397e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b082      	sub	sp, #8
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
 8003986:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	2280      	movs	r2, #128	; 0x80
 800398c:	0192      	lsls	r2, r2, #6
 800398e:	605a      	str	r2, [r3, #4]
	return 0;
 8003990:	2300      	movs	r3, #0
}
 8003992:	0018      	movs	r0, r3
 8003994:	46bd      	mov	sp, r7
 8003996:	b002      	add	sp, #8
 8003998:	bd80      	pop	{r7, pc}

0800399a <_isatty>:

int _isatty(int file)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b082      	sub	sp, #8
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
	return 1;
 80039a2:	2301      	movs	r3, #1
}
 80039a4:	0018      	movs	r0, r3
 80039a6:	46bd      	mov	sp, r7
 80039a8:	b002      	add	sp, #8
 80039aa:	bd80      	pop	{r7, pc}

080039ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
	return 0;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	0018      	movs	r0, r3
 80039bc:	46bd      	mov	sp, r7
 80039be:	b004      	add	sp, #16
 80039c0:	bd80      	pop	{r7, pc}
	...

080039c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039cc:	4a14      	ldr	r2, [pc, #80]	; (8003a20 <_sbrk+0x5c>)
 80039ce:	4b15      	ldr	r3, [pc, #84]	; (8003a24 <_sbrk+0x60>)
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039d8:	4b13      	ldr	r3, [pc, #76]	; (8003a28 <_sbrk+0x64>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d102      	bne.n	80039e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039e0:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <_sbrk+0x64>)
 80039e2:	4a12      	ldr	r2, [pc, #72]	; (8003a2c <_sbrk+0x68>)
 80039e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039e6:	4b10      	ldr	r3, [pc, #64]	; (8003a28 <_sbrk+0x64>)
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	18d3      	adds	r3, r2, r3
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d207      	bcs.n	8003a04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039f4:	f002 f898 	bl	8005b28 <__errno>
 80039f8:	0003      	movs	r3, r0
 80039fa:	220c      	movs	r2, #12
 80039fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039fe:	2301      	movs	r3, #1
 8003a00:	425b      	negs	r3, r3
 8003a02:	e009      	b.n	8003a18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a04:	4b08      	ldr	r3, [pc, #32]	; (8003a28 <_sbrk+0x64>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a0a:	4b07      	ldr	r3, [pc, #28]	; (8003a28 <_sbrk+0x64>)
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	18d2      	adds	r2, r2, r3
 8003a12:	4b05      	ldr	r3, [pc, #20]	; (8003a28 <_sbrk+0x64>)
 8003a14:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003a16:	68fb      	ldr	r3, [r7, #12]
}
 8003a18:	0018      	movs	r0, r3
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	b006      	add	sp, #24
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	20008000 	.word	0x20008000
 8003a24:	00000400 	.word	0x00000400
 8003a28:	20000624 	.word	0x20000624
 8003a2c:	20000728 	.word	0x20000728

08003a30 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003a34:	46c0      	nop			; (mov r8, r8)
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM7_Init 0 */

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003a40:	4b0c      	ldr	r3, [pc, #48]	; (8003a74 <MX_TIM7_Init+0x38>)
 8003a42:	4a0d      	ldr	r2, [pc, #52]	; (8003a78 <MX_TIM7_Init+0x3c>)
 8003a44:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 8003a46:	4b0b      	ldr	r3, [pc, #44]	; (8003a74 <MX_TIM7_Init+0x38>)
 8003a48:	4a0c      	ldr	r2, [pc, #48]	; (8003a7c <MX_TIM7_Init+0x40>)
 8003a4a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a4c:	4b09      	ldr	r3, [pc, #36]	; (8003a74 <MX_TIM7_Init+0x38>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50;
 8003a52:	4b08      	ldr	r3, [pc, #32]	; (8003a74 <MX_TIM7_Init+0x38>)
 8003a54:	2232      	movs	r2, #50	; 0x32
 8003a56:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a58:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <MX_TIM7_Init+0x38>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003a5e:	4b05      	ldr	r3, [pc, #20]	; (8003a74 <MX_TIM7_Init+0x38>)
 8003a60:	0018      	movs	r0, r3
 8003a62:	f001 fddb 	bl	800561c <HAL_TIM_Base_Init>
 8003a66:	1e03      	subs	r3, r0, #0
 8003a68:	d001      	beq.n	8003a6e <MX_TIM7_Init+0x32>
  {
    Error_Handler();
 8003a6a:	f7ff f976 	bl	8002d5a <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	200006cc 	.word	0x200006cc
 8003a78:	40001400 	.word	0x40001400
 8003a7c:	00001f3f 	.word	0x00001f3f

08003a80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a0d      	ldr	r2, [pc, #52]	; (8003ac4 <HAL_TIM_Base_MspInit+0x44>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d113      	bne.n	8003aba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003a92:	4b0d      	ldr	r3, [pc, #52]	; (8003ac8 <HAL_TIM_Base_MspInit+0x48>)
 8003a94:	69da      	ldr	r2, [r3, #28]
 8003a96:	4b0c      	ldr	r3, [pc, #48]	; (8003ac8 <HAL_TIM_Base_MspInit+0x48>)
 8003a98:	2120      	movs	r1, #32
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	61da      	str	r2, [r3, #28]
 8003a9e:	4b0a      	ldr	r3, [pc, #40]	; (8003ac8 <HAL_TIM_Base_MspInit+0x48>)
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003aaa:	2200      	movs	r2, #0
 8003aac:	2100      	movs	r1, #0
 8003aae:	2012      	movs	r0, #18
 8003ab0:	f000 f96a 	bl	8003d88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003ab4:	2012      	movs	r0, #18
 8003ab6:	f000 f97c 	bl	8003db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	46bd      	mov	sp, r7
 8003abe:	b004      	add	sp, #16
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	46c0      	nop			; (mov r8, r8)
 8003ac4:	40001400 	.word	0x40001400
 8003ac8:	40021000 	.word	0x40021000

08003acc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003acc:	480d      	ldr	r0, [pc, #52]	; (8003b04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003ace:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ad0:	480d      	ldr	r0, [pc, #52]	; (8003b08 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ad2:	490e      	ldr	r1, [pc, #56]	; (8003b0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ad4:	4a0e      	ldr	r2, [pc, #56]	; (8003b10 <LoopForever+0xe>)
  movs r3, #0
 8003ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ad8:	e002      	b.n	8003ae0 <LoopCopyDataInit>

08003ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ade:	3304      	adds	r3, #4

08003ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ae4:	d3f9      	bcc.n	8003ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ae6:	4a0b      	ldr	r2, [pc, #44]	; (8003b14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ae8:	4c0b      	ldr	r4, [pc, #44]	; (8003b18 <LoopForever+0x16>)
  movs r3, #0
 8003aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003aec:	e001      	b.n	8003af2 <LoopFillZerobss>

08003aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003af0:	3204      	adds	r2, #4

08003af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003af4:	d3fb      	bcc.n	8003aee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003af6:	f7ff ff9b 	bl	8003a30 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003afa:	f002 f81b 	bl	8005b34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003afe:	f7fe fff3 	bl	8002ae8 <main>

08003b02 <LoopForever>:

LoopForever:
    b LoopForever
 8003b02:	e7fe      	b.n	8003b02 <LoopForever>
  ldr   r0, =_estack
 8003b04:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b0c:	20000604 	.word	0x20000604
  ldr r2, =_sidata
 8003b10:	0800952c 	.word	0x0800952c
  ldr r2, =_sbss
 8003b14:	20000604 	.word	0x20000604
  ldr r4, =_ebss
 8003b18:	20000728 	.word	0x20000728

08003b1c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b1c:	e7fe      	b.n	8003b1c <ADC1_IRQHandler>
	...

08003b20 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b24:	4b07      	ldr	r3, [pc, #28]	; (8003b44 <HAL_Init+0x24>)
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <HAL_Init+0x24>)
 8003b2a:	2110      	movs	r1, #16
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003b30:	2003      	movs	r0, #3
 8003b32:	f000 f809 	bl	8003b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b36:	f7ff fe63 	bl	8003800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	40022000 	.word	0x40022000

08003b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b48:	b590      	push	{r4, r7, lr}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b50:	4b14      	ldr	r3, [pc, #80]	; (8003ba4 <HAL_InitTick+0x5c>)
 8003b52:	681c      	ldr	r4, [r3, #0]
 8003b54:	4b14      	ldr	r3, [pc, #80]	; (8003ba8 <HAL_InitTick+0x60>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	0019      	movs	r1, r3
 8003b5a:	23fa      	movs	r3, #250	; 0xfa
 8003b5c:	0098      	lsls	r0, r3, #2
 8003b5e:	f7fc faed 	bl	800013c <__udivsi3>
 8003b62:	0003      	movs	r3, r0
 8003b64:	0019      	movs	r1, r3
 8003b66:	0020      	movs	r0, r4
 8003b68:	f7fc fae8 	bl	800013c <__udivsi3>
 8003b6c:	0003      	movs	r3, r0
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f000 f92f 	bl	8003dd2 <HAL_SYSTICK_Config>
 8003b74:	1e03      	subs	r3, r0, #0
 8003b76:	d001      	beq.n	8003b7c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e00f      	b.n	8003b9c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b03      	cmp	r3, #3
 8003b80:	d80b      	bhi.n	8003b9a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	2301      	movs	r3, #1
 8003b86:	425b      	negs	r3, r3
 8003b88:	2200      	movs	r2, #0
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f000 f8fc 	bl	8003d88 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b90:	4b06      	ldr	r3, [pc, #24]	; (8003bac <HAL_InitTick+0x64>)
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
 8003b98:	e000      	b.n	8003b9c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
}
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	b003      	add	sp, #12
 8003ba2:	bd90      	pop	{r4, r7, pc}
 8003ba4:	20000428 	.word	0x20000428
 8003ba8:	20000430 	.word	0x20000430
 8003bac:	2000042c 	.word	0x2000042c

08003bb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bb4:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <HAL_IncTick+0x1c>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	001a      	movs	r2, r3
 8003bba:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <HAL_IncTick+0x20>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	18d2      	adds	r2, r2, r3
 8003bc0:	4b03      	ldr	r3, [pc, #12]	; (8003bd0 <HAL_IncTick+0x20>)
 8003bc2:	601a      	str	r2, [r3, #0]
}
 8003bc4:	46c0      	nop			; (mov r8, r8)
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	20000430 	.word	0x20000430
 8003bd0:	20000714 	.word	0x20000714

08003bd4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8003bd8:	4b02      	ldr	r3, [pc, #8]	; (8003be4 <HAL_GetTick+0x10>)
 8003bda:	681b      	ldr	r3, [r3, #0]
}
 8003bdc:	0018      	movs	r0, r3
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	46c0      	nop			; (mov r8, r8)
 8003be4:	20000714 	.word	0x20000714

08003be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bf0:	f7ff fff0 	bl	8003bd4 <HAL_GetTick>
 8003bf4:	0003      	movs	r3, r0
 8003bf6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	d005      	beq.n	8003c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c02:	4b0a      	ldr	r3, [pc, #40]	; (8003c2c <HAL_Delay+0x44>)
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	001a      	movs	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	189b      	adds	r3, r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003c0e:	46c0      	nop			; (mov r8, r8)
 8003c10:	f7ff ffe0 	bl	8003bd4 <HAL_GetTick>
 8003c14:	0002      	movs	r2, r0
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d8f7      	bhi.n	8003c10 <HAL_Delay+0x28>
  {
  }
}
 8003c20:	46c0      	nop			; (mov r8, r8)
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	46bd      	mov	sp, r7
 8003c26:	b004      	add	sp, #16
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	46c0      	nop			; (mov r8, r8)
 8003c2c:	20000430 	.word	0x20000430

08003c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	0002      	movs	r2, r0
 8003c38:	1dfb      	adds	r3, r7, #7
 8003c3a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c3c:	1dfb      	adds	r3, r7, #7
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2b7f      	cmp	r3, #127	; 0x7f
 8003c42:	d809      	bhi.n	8003c58 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c44:	1dfb      	adds	r3, r7, #7
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	001a      	movs	r2, r3
 8003c4a:	231f      	movs	r3, #31
 8003c4c:	401a      	ands	r2, r3
 8003c4e:	4b04      	ldr	r3, [pc, #16]	; (8003c60 <__NVIC_EnableIRQ+0x30>)
 8003c50:	2101      	movs	r1, #1
 8003c52:	4091      	lsls	r1, r2
 8003c54:	000a      	movs	r2, r1
 8003c56:	601a      	str	r2, [r3, #0]
  }
}
 8003c58:	46c0      	nop			; (mov r8, r8)
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	b002      	add	sp, #8
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	e000e100 	.word	0xe000e100

08003c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c64:	b590      	push	{r4, r7, lr}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	0002      	movs	r2, r0
 8003c6c:	6039      	str	r1, [r7, #0]
 8003c6e:	1dfb      	adds	r3, r7, #7
 8003c70:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c72:	1dfb      	adds	r3, r7, #7
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	2b7f      	cmp	r3, #127	; 0x7f
 8003c78:	d828      	bhi.n	8003ccc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c7a:	4a2f      	ldr	r2, [pc, #188]	; (8003d38 <__NVIC_SetPriority+0xd4>)
 8003c7c:	1dfb      	adds	r3, r7, #7
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	b25b      	sxtb	r3, r3
 8003c82:	089b      	lsrs	r3, r3, #2
 8003c84:	33c0      	adds	r3, #192	; 0xc0
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	589b      	ldr	r3, [r3, r2]
 8003c8a:	1dfa      	adds	r2, r7, #7
 8003c8c:	7812      	ldrb	r2, [r2, #0]
 8003c8e:	0011      	movs	r1, r2
 8003c90:	2203      	movs	r2, #3
 8003c92:	400a      	ands	r2, r1
 8003c94:	00d2      	lsls	r2, r2, #3
 8003c96:	21ff      	movs	r1, #255	; 0xff
 8003c98:	4091      	lsls	r1, r2
 8003c9a:	000a      	movs	r2, r1
 8003c9c:	43d2      	mvns	r2, r2
 8003c9e:	401a      	ands	r2, r3
 8003ca0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	019b      	lsls	r3, r3, #6
 8003ca6:	22ff      	movs	r2, #255	; 0xff
 8003ca8:	401a      	ands	r2, r3
 8003caa:	1dfb      	adds	r3, r7, #7
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	0018      	movs	r0, r3
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	4003      	ands	r3, r0
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cb8:	481f      	ldr	r0, [pc, #124]	; (8003d38 <__NVIC_SetPriority+0xd4>)
 8003cba:	1dfb      	adds	r3, r7, #7
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	b25b      	sxtb	r3, r3
 8003cc0:	089b      	lsrs	r3, r3, #2
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	33c0      	adds	r3, #192	; 0xc0
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003cca:	e031      	b.n	8003d30 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ccc:	4a1b      	ldr	r2, [pc, #108]	; (8003d3c <__NVIC_SetPriority+0xd8>)
 8003cce:	1dfb      	adds	r3, r7, #7
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	0019      	movs	r1, r3
 8003cd4:	230f      	movs	r3, #15
 8003cd6:	400b      	ands	r3, r1
 8003cd8:	3b08      	subs	r3, #8
 8003cda:	089b      	lsrs	r3, r3, #2
 8003cdc:	3306      	adds	r3, #6
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	18d3      	adds	r3, r2, r3
 8003ce2:	3304      	adds	r3, #4
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	1dfa      	adds	r2, r7, #7
 8003ce8:	7812      	ldrb	r2, [r2, #0]
 8003cea:	0011      	movs	r1, r2
 8003cec:	2203      	movs	r2, #3
 8003cee:	400a      	ands	r2, r1
 8003cf0:	00d2      	lsls	r2, r2, #3
 8003cf2:	21ff      	movs	r1, #255	; 0xff
 8003cf4:	4091      	lsls	r1, r2
 8003cf6:	000a      	movs	r2, r1
 8003cf8:	43d2      	mvns	r2, r2
 8003cfa:	401a      	ands	r2, r3
 8003cfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	019b      	lsls	r3, r3, #6
 8003d02:	22ff      	movs	r2, #255	; 0xff
 8003d04:	401a      	ands	r2, r3
 8003d06:	1dfb      	adds	r3, r7, #7
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	4003      	ands	r3, r0
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d14:	4809      	ldr	r0, [pc, #36]	; (8003d3c <__NVIC_SetPriority+0xd8>)
 8003d16:	1dfb      	adds	r3, r7, #7
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	001c      	movs	r4, r3
 8003d1c:	230f      	movs	r3, #15
 8003d1e:	4023      	ands	r3, r4
 8003d20:	3b08      	subs	r3, #8
 8003d22:	089b      	lsrs	r3, r3, #2
 8003d24:	430a      	orrs	r2, r1
 8003d26:	3306      	adds	r3, #6
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	18c3      	adds	r3, r0, r3
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	601a      	str	r2, [r3, #0]
}
 8003d30:	46c0      	nop			; (mov r8, r8)
 8003d32:	46bd      	mov	sp, r7
 8003d34:	b003      	add	sp, #12
 8003d36:	bd90      	pop	{r4, r7, pc}
 8003d38:	e000e100 	.word	0xe000e100
 8003d3c:	e000ed00 	.word	0xe000ed00

08003d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	1e5a      	subs	r2, r3, #1
 8003d4c:	2380      	movs	r3, #128	; 0x80
 8003d4e:	045b      	lsls	r3, r3, #17
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d301      	bcc.n	8003d58 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d54:	2301      	movs	r3, #1
 8003d56:	e010      	b.n	8003d7a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d58:	4b0a      	ldr	r3, [pc, #40]	; (8003d84 <SysTick_Config+0x44>)
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	3a01      	subs	r2, #1
 8003d5e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d60:	2301      	movs	r3, #1
 8003d62:	425b      	negs	r3, r3
 8003d64:	2103      	movs	r1, #3
 8003d66:	0018      	movs	r0, r3
 8003d68:	f7ff ff7c 	bl	8003c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d6c:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <SysTick_Config+0x44>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d72:	4b04      	ldr	r3, [pc, #16]	; (8003d84 <SysTick_Config+0x44>)
 8003d74:	2207      	movs	r2, #7
 8003d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	b002      	add	sp, #8
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	46c0      	nop			; (mov r8, r8)
 8003d84:	e000e010 	.word	0xe000e010

08003d88 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60b9      	str	r1, [r7, #8]
 8003d90:	607a      	str	r2, [r7, #4]
 8003d92:	210f      	movs	r1, #15
 8003d94:	187b      	adds	r3, r7, r1
 8003d96:	1c02      	adds	r2, r0, #0
 8003d98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	187b      	adds	r3, r7, r1
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	b25b      	sxtb	r3, r3
 8003da2:	0011      	movs	r1, r2
 8003da4:	0018      	movs	r0, r3
 8003da6:	f7ff ff5d 	bl	8003c64 <__NVIC_SetPriority>
}
 8003daa:	46c0      	nop			; (mov r8, r8)
 8003dac:	46bd      	mov	sp, r7
 8003dae:	b004      	add	sp, #16
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b082      	sub	sp, #8
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	0002      	movs	r2, r0
 8003dba:	1dfb      	adds	r3, r7, #7
 8003dbc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dbe:	1dfb      	adds	r3, r7, #7
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	b25b      	sxtb	r3, r3
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f7ff ff33 	bl	8003c30 <__NVIC_EnableIRQ>
}
 8003dca:	46c0      	nop			; (mov r8, r8)
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	b002      	add	sp, #8
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b082      	sub	sp, #8
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	0018      	movs	r0, r3
 8003dde:	f7ff ffaf 	bl	8003d40 <SysTick_Config>
 8003de2:	0003      	movs	r3, r0
}
 8003de4:	0018      	movs	r0, r3
 8003de6:	46bd      	mov	sp, r7
 8003de8:	b002      	add	sp, #8
 8003dea:	bd80      	pop	{r7, pc}

08003dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003df6:	2300      	movs	r3, #0
 8003df8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dfa:	e14f      	b.n	800409c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2101      	movs	r1, #1
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	4091      	lsls	r1, r2
 8003e06:	000a      	movs	r2, r1
 8003e08:	4013      	ands	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d100      	bne.n	8003e14 <HAL_GPIO_Init+0x28>
 8003e12:	e140      	b.n	8004096 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2203      	movs	r2, #3
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d005      	beq.n	8003e2c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2203      	movs	r2, #3
 8003e26:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d130      	bne.n	8003e8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	2203      	movs	r2, #3
 8003e38:	409a      	lsls	r2, r3
 8003e3a:	0013      	movs	r3, r2
 8003e3c:	43da      	mvns	r2, r3
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	4013      	ands	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	409a      	lsls	r2, r3
 8003e4e:	0013      	movs	r3, r2
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e62:	2201      	movs	r2, #1
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	409a      	lsls	r2, r3
 8003e68:	0013      	movs	r3, r2
 8003e6a:	43da      	mvns	r2, r3
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	091b      	lsrs	r3, r3, #4
 8003e78:	2201      	movs	r2, #1
 8003e7a:	401a      	ands	r2, r3
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	409a      	lsls	r2, r3
 8003e80:	0013      	movs	r3, r2
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	2203      	movs	r2, #3
 8003e94:	4013      	ands	r3, r2
 8003e96:	2b03      	cmp	r3, #3
 8003e98:	d017      	beq.n	8003eca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	2203      	movs	r2, #3
 8003ea6:	409a      	lsls	r2, r3
 8003ea8:	0013      	movs	r3, r2
 8003eaa:	43da      	mvns	r2, r3
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	689a      	ldr	r2, [r3, #8]
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	409a      	lsls	r2, r3
 8003ebc:	0013      	movs	r3, r2
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2203      	movs	r2, #3
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d123      	bne.n	8003f1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	08da      	lsrs	r2, r3, #3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	3208      	adds	r2, #8
 8003ede:	0092      	lsls	r2, r2, #2
 8003ee0:	58d3      	ldr	r3, [r2, r3]
 8003ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	2207      	movs	r2, #7
 8003ee8:	4013      	ands	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	220f      	movs	r2, #15
 8003eee:	409a      	lsls	r2, r3
 8003ef0:	0013      	movs	r3, r2
 8003ef2:	43da      	mvns	r2, r3
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	691a      	ldr	r2, [r3, #16]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2107      	movs	r1, #7
 8003f02:	400b      	ands	r3, r1
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	409a      	lsls	r2, r3
 8003f08:	0013      	movs	r3, r2
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	08da      	lsrs	r2, r3, #3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3208      	adds	r2, #8
 8003f18:	0092      	lsls	r2, r2, #2
 8003f1a:	6939      	ldr	r1, [r7, #16]
 8003f1c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	2203      	movs	r2, #3
 8003f2a:	409a      	lsls	r2, r3
 8003f2c:	0013      	movs	r3, r2
 8003f2e:	43da      	mvns	r2, r3
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	4013      	ands	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2203      	movs	r2, #3
 8003f3c:	401a      	ands	r2, r3
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	409a      	lsls	r2, r3
 8003f44:	0013      	movs	r3, r2
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	23c0      	movs	r3, #192	; 0xc0
 8003f58:	029b      	lsls	r3, r3, #10
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	d100      	bne.n	8003f60 <HAL_GPIO_Init+0x174>
 8003f5e:	e09a      	b.n	8004096 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f60:	4b54      	ldr	r3, [pc, #336]	; (80040b4 <HAL_GPIO_Init+0x2c8>)
 8003f62:	699a      	ldr	r2, [r3, #24]
 8003f64:	4b53      	ldr	r3, [pc, #332]	; (80040b4 <HAL_GPIO_Init+0x2c8>)
 8003f66:	2101      	movs	r1, #1
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	619a      	str	r2, [r3, #24]
 8003f6c:	4b51      	ldr	r3, [pc, #324]	; (80040b4 <HAL_GPIO_Init+0x2c8>)
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	2201      	movs	r2, #1
 8003f72:	4013      	ands	r3, r2
 8003f74:	60bb      	str	r3, [r7, #8]
 8003f76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f78:	4a4f      	ldr	r2, [pc, #316]	; (80040b8 <HAL_GPIO_Init+0x2cc>)
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	089b      	lsrs	r3, r3, #2
 8003f7e:	3302      	adds	r3, #2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	589b      	ldr	r3, [r3, r2]
 8003f84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2203      	movs	r2, #3
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	220f      	movs	r2, #15
 8003f90:	409a      	lsls	r2, r3
 8003f92:	0013      	movs	r3, r2
 8003f94:	43da      	mvns	r2, r3
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	2390      	movs	r3, #144	; 0x90
 8003fa0:	05db      	lsls	r3, r3, #23
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d013      	beq.n	8003fce <HAL_GPIO_Init+0x1e2>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a44      	ldr	r2, [pc, #272]	; (80040bc <HAL_GPIO_Init+0x2d0>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d00d      	beq.n	8003fca <HAL_GPIO_Init+0x1de>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a43      	ldr	r2, [pc, #268]	; (80040c0 <HAL_GPIO_Init+0x2d4>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d007      	beq.n	8003fc6 <HAL_GPIO_Init+0x1da>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a42      	ldr	r2, [pc, #264]	; (80040c4 <HAL_GPIO_Init+0x2d8>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d101      	bne.n	8003fc2 <HAL_GPIO_Init+0x1d6>
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e006      	b.n	8003fd0 <HAL_GPIO_Init+0x1e4>
 8003fc2:	2305      	movs	r3, #5
 8003fc4:	e004      	b.n	8003fd0 <HAL_GPIO_Init+0x1e4>
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	e002      	b.n	8003fd0 <HAL_GPIO_Init+0x1e4>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e000      	b.n	8003fd0 <HAL_GPIO_Init+0x1e4>
 8003fce:	2300      	movs	r3, #0
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	2103      	movs	r1, #3
 8003fd4:	400a      	ands	r2, r1
 8003fd6:	0092      	lsls	r2, r2, #2
 8003fd8:	4093      	lsls	r3, r2
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003fe0:	4935      	ldr	r1, [pc, #212]	; (80040b8 <HAL_GPIO_Init+0x2cc>)
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	089b      	lsrs	r3, r3, #2
 8003fe6:	3302      	adds	r3, #2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fee:	4b36      	ldr	r3, [pc, #216]	; (80040c8 <HAL_GPIO_Init+0x2dc>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	43da      	mvns	r2, r3
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	2380      	movs	r3, #128	; 0x80
 8004004:	025b      	lsls	r3, r3, #9
 8004006:	4013      	ands	r3, r2
 8004008:	d003      	beq.n	8004012 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4313      	orrs	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004012:	4b2d      	ldr	r3, [pc, #180]	; (80040c8 <HAL_GPIO_Init+0x2dc>)
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004018:	4b2b      	ldr	r3, [pc, #172]	; (80040c8 <HAL_GPIO_Init+0x2dc>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	43da      	mvns	r2, r3
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	4013      	ands	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	2380      	movs	r3, #128	; 0x80
 800402e:	029b      	lsls	r3, r3, #10
 8004030:	4013      	ands	r3, r2
 8004032:	d003      	beq.n	800403c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	4313      	orrs	r3, r2
 800403a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800403c:	4b22      	ldr	r3, [pc, #136]	; (80040c8 <HAL_GPIO_Init+0x2dc>)
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004042:	4b21      	ldr	r3, [pc, #132]	; (80040c8 <HAL_GPIO_Init+0x2dc>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	43da      	mvns	r2, r3
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	4013      	ands	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	2380      	movs	r3, #128	; 0x80
 8004058:	035b      	lsls	r3, r3, #13
 800405a:	4013      	ands	r3, r2
 800405c:	d003      	beq.n	8004066 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004066:	4b18      	ldr	r3, [pc, #96]	; (80040c8 <HAL_GPIO_Init+0x2dc>)
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800406c:	4b16      	ldr	r3, [pc, #88]	; (80040c8 <HAL_GPIO_Init+0x2dc>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	43da      	mvns	r2, r3
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	4013      	ands	r3, r2
 800407a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	2380      	movs	r3, #128	; 0x80
 8004082:	039b      	lsls	r3, r3, #14
 8004084:	4013      	ands	r3, r2
 8004086:	d003      	beq.n	8004090 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	4313      	orrs	r3, r2
 800408e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004090:	4b0d      	ldr	r3, [pc, #52]	; (80040c8 <HAL_GPIO_Init+0x2dc>)
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	3301      	adds	r3, #1
 800409a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	40da      	lsrs	r2, r3
 80040a4:	1e13      	subs	r3, r2, #0
 80040a6:	d000      	beq.n	80040aa <HAL_GPIO_Init+0x2be>
 80040a8:	e6a8      	b.n	8003dfc <HAL_GPIO_Init+0x10>
  } 
}
 80040aa:	46c0      	nop			; (mov r8, r8)
 80040ac:	46c0      	nop			; (mov r8, r8)
 80040ae:	46bd      	mov	sp, r7
 80040b0:	b006      	add	sp, #24
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	40021000 	.word	0x40021000
 80040b8:	40010000 	.word	0x40010000
 80040bc:	48000400 	.word	0x48000400
 80040c0:	48000800 	.word	0x48000800
 80040c4:	48000c00 	.word	0x48000c00
 80040c8:	40010400 	.word	0x40010400

080040cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	000a      	movs	r2, r1
 80040d6:	1cbb      	adds	r3, r7, #2
 80040d8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	1cba      	adds	r2, r7, #2
 80040e0:	8812      	ldrh	r2, [r2, #0]
 80040e2:	4013      	ands	r3, r2
 80040e4:	d004      	beq.n	80040f0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80040e6:	230f      	movs	r3, #15
 80040e8:	18fb      	adds	r3, r7, r3
 80040ea:	2201      	movs	r2, #1
 80040ec:	701a      	strb	r2, [r3, #0]
 80040ee:	e003      	b.n	80040f8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040f0:	230f      	movs	r3, #15
 80040f2:	18fb      	adds	r3, r7, r3
 80040f4:	2200      	movs	r2, #0
 80040f6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80040f8:	230f      	movs	r3, #15
 80040fa:	18fb      	adds	r3, r7, r3
 80040fc:	781b      	ldrb	r3, [r3, #0]
  }
 80040fe:	0018      	movs	r0, r3
 8004100:	46bd      	mov	sp, r7
 8004102:	b004      	add	sp, #16
 8004104:	bd80      	pop	{r7, pc}

08004106 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b082      	sub	sp, #8
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
 800410e:	0008      	movs	r0, r1
 8004110:	0011      	movs	r1, r2
 8004112:	1cbb      	adds	r3, r7, #2
 8004114:	1c02      	adds	r2, r0, #0
 8004116:	801a      	strh	r2, [r3, #0]
 8004118:	1c7b      	adds	r3, r7, #1
 800411a:	1c0a      	adds	r2, r1, #0
 800411c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800411e:	1c7b      	adds	r3, r7, #1
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d004      	beq.n	8004130 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004126:	1cbb      	adds	r3, r7, #2
 8004128:	881a      	ldrh	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800412e:	e003      	b.n	8004138 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004130:	1cbb      	adds	r3, r7, #2
 8004132:	881a      	ldrh	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004138:	46c0      	nop			; (mov r8, r8)
 800413a:	46bd      	mov	sp, r7
 800413c:	b002      	add	sp, #8
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	0002      	movs	r2, r0
 8004148:	1dbb      	adds	r3, r7, #6
 800414a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800414c:	4b09      	ldr	r3, [pc, #36]	; (8004174 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	1dba      	adds	r2, r7, #6
 8004152:	8812      	ldrh	r2, [r2, #0]
 8004154:	4013      	ands	r3, r2
 8004156:	d008      	beq.n	800416a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004158:	4b06      	ldr	r3, [pc, #24]	; (8004174 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800415a:	1dba      	adds	r2, r7, #6
 800415c:	8812      	ldrh	r2, [r2, #0]
 800415e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004160:	1dbb      	adds	r3, r7, #6
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	0018      	movs	r0, r3
 8004166:	f7fe fd93 	bl	8002c90 <HAL_GPIO_EXTI_Callback>
  }
}
 800416a:	46c0      	nop			; (mov r8, r8)
 800416c:	46bd      	mov	sp, r7
 800416e:	b002      	add	sp, #8
 8004170:	bd80      	pop	{r7, pc}
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	40010400 	.word	0x40010400

08004178 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e082      	b.n	8004290 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2241      	movs	r2, #65	; 0x41
 800418e:	5c9b      	ldrb	r3, [r3, r2]
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d107      	bne.n	80041a6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2240      	movs	r2, #64	; 0x40
 800419a:	2100      	movs	r1, #0
 800419c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	0018      	movs	r0, r3
 80041a2:	f7fe fc17 	bl	80029d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2241      	movs	r2, #65	; 0x41
 80041aa:	2124      	movs	r1, #36	; 0x24
 80041ac:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2101      	movs	r1, #1
 80041ba:	438a      	bics	r2, r1
 80041bc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4934      	ldr	r1, [pc, #208]	; (8004298 <HAL_I2C_Init+0x120>)
 80041c8:	400a      	ands	r2, r1
 80041ca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4931      	ldr	r1, [pc, #196]	; (800429c <HAL_I2C_Init+0x124>)
 80041d8:	400a      	ands	r2, r1
 80041da:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d108      	bne.n	80041f6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2180      	movs	r1, #128	; 0x80
 80041ee:	0209      	lsls	r1, r1, #8
 80041f0:	430a      	orrs	r2, r1
 80041f2:	609a      	str	r2, [r3, #8]
 80041f4:	e007      	b.n	8004206 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689a      	ldr	r2, [r3, #8]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2184      	movs	r1, #132	; 0x84
 8004200:	0209      	lsls	r1, r1, #8
 8004202:	430a      	orrs	r2, r1
 8004204:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	2b02      	cmp	r3, #2
 800420c:	d104      	bne.n	8004218 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2280      	movs	r2, #128	; 0x80
 8004214:	0112      	lsls	r2, r2, #4
 8004216:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	491f      	ldr	r1, [pc, #124]	; (80042a0 <HAL_I2C_Init+0x128>)
 8004224:	430a      	orrs	r2, r1
 8004226:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	491a      	ldr	r1, [pc, #104]	; (800429c <HAL_I2C_Init+0x124>)
 8004234:	400a      	ands	r2, r1
 8004236:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691a      	ldr	r2, [r3, #16]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	431a      	orrs	r2, r3
 8004242:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69d9      	ldr	r1, [r3, #28]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1a      	ldr	r2, [r3, #32]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2101      	movs	r1, #1
 800426e:	430a      	orrs	r2, r1
 8004270:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2241      	movs	r2, #65	; 0x41
 800427c:	2120      	movs	r1, #32
 800427e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2242      	movs	r2, #66	; 0x42
 800428a:	2100      	movs	r1, #0
 800428c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	0018      	movs	r0, r3
 8004292:	46bd      	mov	sp, r7
 8004294:	b002      	add	sp, #8
 8004296:	bd80      	pop	{r7, pc}
 8004298:	f0ffffff 	.word	0xf0ffffff
 800429c:	ffff7fff 	.word	0xffff7fff
 80042a0:	02008000 	.word	0x02008000

080042a4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80042a4:	b590      	push	{r4, r7, lr}
 80042a6:	b089      	sub	sp, #36	; 0x24
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	0008      	movs	r0, r1
 80042ae:	607a      	str	r2, [r7, #4]
 80042b0:	0019      	movs	r1, r3
 80042b2:	230a      	movs	r3, #10
 80042b4:	18fb      	adds	r3, r7, r3
 80042b6:	1c02      	adds	r2, r0, #0
 80042b8:	801a      	strh	r2, [r3, #0]
 80042ba:	2308      	movs	r3, #8
 80042bc:	18fb      	adds	r3, r7, r3
 80042be:	1c0a      	adds	r2, r1, #0
 80042c0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2241      	movs	r2, #65	; 0x41
 80042c6:	5c9b      	ldrb	r3, [r3, r2]
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b20      	cmp	r3, #32
 80042cc:	d000      	beq.n	80042d0 <HAL_I2C_Master_Transmit+0x2c>
 80042ce:	e0e7      	b.n	80044a0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2240      	movs	r2, #64	; 0x40
 80042d4:	5c9b      	ldrb	r3, [r3, r2]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d101      	bne.n	80042de <HAL_I2C_Master_Transmit+0x3a>
 80042da:	2302      	movs	r3, #2
 80042dc:	e0e1      	b.n	80044a2 <HAL_I2C_Master_Transmit+0x1fe>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2240      	movs	r2, #64	; 0x40
 80042e2:	2101      	movs	r1, #1
 80042e4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042e6:	f7ff fc75 	bl	8003bd4 <HAL_GetTick>
 80042ea:	0003      	movs	r3, r0
 80042ec:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042ee:	2380      	movs	r3, #128	; 0x80
 80042f0:	0219      	lsls	r1, r3, #8
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	2319      	movs	r3, #25
 80042fa:	2201      	movs	r2, #1
 80042fc:	f000 fa04 	bl	8004708 <I2C_WaitOnFlagUntilTimeout>
 8004300:	1e03      	subs	r3, r0, #0
 8004302:	d001      	beq.n	8004308 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e0cc      	b.n	80044a2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2241      	movs	r2, #65	; 0x41
 800430c:	2121      	movs	r1, #33	; 0x21
 800430e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2242      	movs	r2, #66	; 0x42
 8004314:	2110      	movs	r1, #16
 8004316:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2208      	movs	r2, #8
 8004328:	18ba      	adds	r2, r7, r2
 800432a:	8812      	ldrh	r2, [r2, #0]
 800432c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004338:	b29b      	uxth	r3, r3
 800433a:	2bff      	cmp	r3, #255	; 0xff
 800433c:	d911      	bls.n	8004362 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	22ff      	movs	r2, #255	; 0xff
 8004342:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004348:	b2da      	uxtb	r2, r3
 800434a:	2380      	movs	r3, #128	; 0x80
 800434c:	045c      	lsls	r4, r3, #17
 800434e:	230a      	movs	r3, #10
 8004350:	18fb      	adds	r3, r7, r3
 8004352:	8819      	ldrh	r1, [r3, #0]
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	4b55      	ldr	r3, [pc, #340]	; (80044ac <HAL_I2C_Master_Transmit+0x208>)
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	0023      	movs	r3, r4
 800435c:	f000 fb74 	bl	8004a48 <I2C_TransferConfig>
 8004360:	e075      	b.n	800444e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004366:	b29a      	uxth	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004370:	b2da      	uxtb	r2, r3
 8004372:	2380      	movs	r3, #128	; 0x80
 8004374:	049c      	lsls	r4, r3, #18
 8004376:	230a      	movs	r3, #10
 8004378:	18fb      	adds	r3, r7, r3
 800437a:	8819      	ldrh	r1, [r3, #0]
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	4b4b      	ldr	r3, [pc, #300]	; (80044ac <HAL_I2C_Master_Transmit+0x208>)
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	0023      	movs	r3, r4
 8004384:	f000 fb60 	bl	8004a48 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004388:	e061      	b.n	800444e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	0018      	movs	r0, r3
 8004392:	f000 f9f8 	bl	8004786 <I2C_WaitOnTXISFlagUntilTimeout>
 8004396:	1e03      	subs	r3, r0, #0
 8004398:	d001      	beq.n	800439e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e081      	b.n	80044a2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	781a      	ldrb	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	3b01      	subs	r3, #1
 80043bc:	b29a      	uxth	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d03a      	beq.n	800444e <HAL_I2C_Master_Transmit+0x1aa>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d136      	bne.n	800444e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	0013      	movs	r3, r2
 80043ea:	2200      	movs	r2, #0
 80043ec:	2180      	movs	r1, #128	; 0x80
 80043ee:	f000 f98b 	bl	8004708 <I2C_WaitOnFlagUntilTimeout>
 80043f2:	1e03      	subs	r3, r0, #0
 80043f4:	d001      	beq.n	80043fa <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e053      	b.n	80044a2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fe:	b29b      	uxth	r3, r3
 8004400:	2bff      	cmp	r3, #255	; 0xff
 8004402:	d911      	bls.n	8004428 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	22ff      	movs	r2, #255	; 0xff
 8004408:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800440e:	b2da      	uxtb	r2, r3
 8004410:	2380      	movs	r3, #128	; 0x80
 8004412:	045c      	lsls	r4, r3, #17
 8004414:	230a      	movs	r3, #10
 8004416:	18fb      	adds	r3, r7, r3
 8004418:	8819      	ldrh	r1, [r3, #0]
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	2300      	movs	r3, #0
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	0023      	movs	r3, r4
 8004422:	f000 fb11 	bl	8004a48 <I2C_TransferConfig>
 8004426:	e012      	b.n	800444e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442c:	b29a      	uxth	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004436:	b2da      	uxtb	r2, r3
 8004438:	2380      	movs	r3, #128	; 0x80
 800443a:	049c      	lsls	r4, r3, #18
 800443c:	230a      	movs	r3, #10
 800443e:	18fb      	adds	r3, r7, r3
 8004440:	8819      	ldrh	r1, [r3, #0]
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	2300      	movs	r3, #0
 8004446:	9300      	str	r3, [sp, #0]
 8004448:	0023      	movs	r3, r4
 800444a:	f000 fafd 	bl	8004a48 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004452:	b29b      	uxth	r3, r3
 8004454:	2b00      	cmp	r3, #0
 8004456:	d198      	bne.n	800438a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	0018      	movs	r0, r3
 8004460:	f000 f9d0 	bl	8004804 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004464:	1e03      	subs	r3, r0, #0
 8004466:	d001      	beq.n	800446c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e01a      	b.n	80044a2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2220      	movs	r2, #32
 8004472:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	490c      	ldr	r1, [pc, #48]	; (80044b0 <HAL_I2C_Master_Transmit+0x20c>)
 8004480:	400a      	ands	r2, r1
 8004482:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2241      	movs	r2, #65	; 0x41
 8004488:	2120      	movs	r1, #32
 800448a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2242      	movs	r2, #66	; 0x42
 8004490:	2100      	movs	r1, #0
 8004492:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2240      	movs	r2, #64	; 0x40
 8004498:	2100      	movs	r1, #0
 800449a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800449c:	2300      	movs	r3, #0
 800449e:	e000      	b.n	80044a2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80044a0:	2302      	movs	r3, #2
  }
}
 80044a2:	0018      	movs	r0, r3
 80044a4:	46bd      	mov	sp, r7
 80044a6:	b007      	add	sp, #28
 80044a8:	bd90      	pop	{r4, r7, pc}
 80044aa:	46c0      	nop			; (mov r8, r8)
 80044ac:	80002000 	.word	0x80002000
 80044b0:	fe00e800 	.word	0xfe00e800

080044b4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80044b4:	b590      	push	{r4, r7, lr}
 80044b6:	b089      	sub	sp, #36	; 0x24
 80044b8:	af02      	add	r7, sp, #8
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	0008      	movs	r0, r1
 80044be:	607a      	str	r2, [r7, #4]
 80044c0:	0019      	movs	r1, r3
 80044c2:	230a      	movs	r3, #10
 80044c4:	18fb      	adds	r3, r7, r3
 80044c6:	1c02      	adds	r2, r0, #0
 80044c8:	801a      	strh	r2, [r3, #0]
 80044ca:	2308      	movs	r3, #8
 80044cc:	18fb      	adds	r3, r7, r3
 80044ce:	1c0a      	adds	r2, r1, #0
 80044d0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2241      	movs	r2, #65	; 0x41
 80044d6:	5c9b      	ldrb	r3, [r3, r2]
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b20      	cmp	r3, #32
 80044dc:	d000      	beq.n	80044e0 <HAL_I2C_Master_Receive+0x2c>
 80044de:	e0e8      	b.n	80046b2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2240      	movs	r2, #64	; 0x40
 80044e4:	5c9b      	ldrb	r3, [r3, r2]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <HAL_I2C_Master_Receive+0x3a>
 80044ea:	2302      	movs	r3, #2
 80044ec:	e0e2      	b.n	80046b4 <HAL_I2C_Master_Receive+0x200>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2240      	movs	r2, #64	; 0x40
 80044f2:	2101      	movs	r1, #1
 80044f4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80044f6:	f7ff fb6d 	bl	8003bd4 <HAL_GetTick>
 80044fa:	0003      	movs	r3, r0
 80044fc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80044fe:	2380      	movs	r3, #128	; 0x80
 8004500:	0219      	lsls	r1, r3, #8
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	2319      	movs	r3, #25
 800450a:	2201      	movs	r2, #1
 800450c:	f000 f8fc 	bl	8004708 <I2C_WaitOnFlagUntilTimeout>
 8004510:	1e03      	subs	r3, r0, #0
 8004512:	d001      	beq.n	8004518 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e0cd      	b.n	80046b4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2241      	movs	r2, #65	; 0x41
 800451c:	2122      	movs	r1, #34	; 0x22
 800451e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2242      	movs	r2, #66	; 0x42
 8004524:	2110      	movs	r1, #16
 8004526:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2208      	movs	r2, #8
 8004538:	18ba      	adds	r2, r7, r2
 800453a:	8812      	ldrh	r2, [r2, #0]
 800453c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004548:	b29b      	uxth	r3, r3
 800454a:	2bff      	cmp	r3, #255	; 0xff
 800454c:	d911      	bls.n	8004572 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	22ff      	movs	r2, #255	; 0xff
 8004552:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004558:	b2da      	uxtb	r2, r3
 800455a:	2380      	movs	r3, #128	; 0x80
 800455c:	045c      	lsls	r4, r3, #17
 800455e:	230a      	movs	r3, #10
 8004560:	18fb      	adds	r3, r7, r3
 8004562:	8819      	ldrh	r1, [r3, #0]
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	4b55      	ldr	r3, [pc, #340]	; (80046bc <HAL_I2C_Master_Receive+0x208>)
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	0023      	movs	r3, r4
 800456c:	f000 fa6c 	bl	8004a48 <I2C_TransferConfig>
 8004570:	e076      	b.n	8004660 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004576:	b29a      	uxth	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004580:	b2da      	uxtb	r2, r3
 8004582:	2380      	movs	r3, #128	; 0x80
 8004584:	049c      	lsls	r4, r3, #18
 8004586:	230a      	movs	r3, #10
 8004588:	18fb      	adds	r3, r7, r3
 800458a:	8819      	ldrh	r1, [r3, #0]
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	4b4b      	ldr	r3, [pc, #300]	; (80046bc <HAL_I2C_Master_Receive+0x208>)
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	0023      	movs	r3, r4
 8004594:	f000 fa58 	bl	8004a48 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004598:	e062      	b.n	8004660 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	0018      	movs	r0, r3
 80045a2:	f000 f96b 	bl	800487c <I2C_WaitOnRXNEFlagUntilTimeout>
 80045a6:	1e03      	subs	r3, r0, #0
 80045a8:	d001      	beq.n	80045ae <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e082      	b.n	80046b4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	b2d2      	uxtb	r2, r2
 80045ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ca:	3b01      	subs	r3, #1
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	3b01      	subs	r3, #1
 80045da:	b29a      	uxth	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d03a      	beq.n	8004660 <HAL_I2C_Master_Receive+0x1ac>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d136      	bne.n	8004660 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80045f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	0013      	movs	r3, r2
 80045fc:	2200      	movs	r2, #0
 80045fe:	2180      	movs	r1, #128	; 0x80
 8004600:	f000 f882 	bl	8004708 <I2C_WaitOnFlagUntilTimeout>
 8004604:	1e03      	subs	r3, r0, #0
 8004606:	d001      	beq.n	800460c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e053      	b.n	80046b4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004610:	b29b      	uxth	r3, r3
 8004612:	2bff      	cmp	r3, #255	; 0xff
 8004614:	d911      	bls.n	800463a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	22ff      	movs	r2, #255	; 0xff
 800461a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004620:	b2da      	uxtb	r2, r3
 8004622:	2380      	movs	r3, #128	; 0x80
 8004624:	045c      	lsls	r4, r3, #17
 8004626:	230a      	movs	r3, #10
 8004628:	18fb      	adds	r3, r7, r3
 800462a:	8819      	ldrh	r1, [r3, #0]
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	2300      	movs	r3, #0
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	0023      	movs	r3, r4
 8004634:	f000 fa08 	bl	8004a48 <I2C_TransferConfig>
 8004638:	e012      	b.n	8004660 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463e:	b29a      	uxth	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004648:	b2da      	uxtb	r2, r3
 800464a:	2380      	movs	r3, #128	; 0x80
 800464c:	049c      	lsls	r4, r3, #18
 800464e:	230a      	movs	r3, #10
 8004650:	18fb      	adds	r3, r7, r3
 8004652:	8819      	ldrh	r1, [r3, #0]
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	2300      	movs	r3, #0
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	0023      	movs	r3, r4
 800465c:	f000 f9f4 	bl	8004a48 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004664:	b29b      	uxth	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d197      	bne.n	800459a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	0018      	movs	r0, r3
 8004672:	f000 f8c7 	bl	8004804 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004676:	1e03      	subs	r3, r0, #0
 8004678:	d001      	beq.n	800467e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e01a      	b.n	80046b4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2220      	movs	r2, #32
 8004684:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	490b      	ldr	r1, [pc, #44]	; (80046c0 <HAL_I2C_Master_Receive+0x20c>)
 8004692:	400a      	ands	r2, r1
 8004694:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2241      	movs	r2, #65	; 0x41
 800469a:	2120      	movs	r1, #32
 800469c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2242      	movs	r2, #66	; 0x42
 80046a2:	2100      	movs	r1, #0
 80046a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2240      	movs	r2, #64	; 0x40
 80046aa:	2100      	movs	r1, #0
 80046ac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80046ae:	2300      	movs	r3, #0
 80046b0:	e000      	b.n	80046b4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80046b2:	2302      	movs	r3, #2
  }
}
 80046b4:	0018      	movs	r0, r3
 80046b6:	46bd      	mov	sp, r7
 80046b8:	b007      	add	sp, #28
 80046ba:	bd90      	pop	{r4, r7, pc}
 80046bc:	80002400 	.word	0x80002400
 80046c0:	fe00e800 	.word	0xfe00e800

080046c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	2202      	movs	r2, #2
 80046d4:	4013      	ands	r3, r2
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d103      	bne.n	80046e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2200      	movs	r2, #0
 80046e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	2201      	movs	r2, #1
 80046ea:	4013      	ands	r3, r2
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d007      	beq.n	8004700 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	699a      	ldr	r2, [r3, #24]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2101      	movs	r1, #1
 80046fc:	430a      	orrs	r2, r1
 80046fe:	619a      	str	r2, [r3, #24]
  }
}
 8004700:	46c0      	nop			; (mov r8, r8)
 8004702:	46bd      	mov	sp, r7
 8004704:	b002      	add	sp, #8
 8004706:	bd80      	pop	{r7, pc}

08004708 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	603b      	str	r3, [r7, #0]
 8004714:	1dfb      	adds	r3, r7, #7
 8004716:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004718:	e021      	b.n	800475e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	3301      	adds	r3, #1
 800471e:	d01e      	beq.n	800475e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004720:	f7ff fa58 	bl	8003bd4 <HAL_GetTick>
 8004724:	0002      	movs	r2, r0
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	429a      	cmp	r2, r3
 800472e:	d302      	bcc.n	8004736 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d113      	bne.n	800475e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473a:	2220      	movs	r2, #32
 800473c:	431a      	orrs	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2241      	movs	r2, #65	; 0x41
 8004746:	2120      	movs	r1, #32
 8004748:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2242      	movs	r2, #66	; 0x42
 800474e:	2100      	movs	r1, #0
 8004750:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2240      	movs	r2, #64	; 0x40
 8004756:	2100      	movs	r1, #0
 8004758:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e00f      	b.n	800477e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	4013      	ands	r3, r2
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	425a      	negs	r2, r3
 800476e:	4153      	adcs	r3, r2
 8004770:	b2db      	uxtb	r3, r3
 8004772:	001a      	movs	r2, r3
 8004774:	1dfb      	adds	r3, r7, #7
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	429a      	cmp	r2, r3
 800477a:	d0ce      	beq.n	800471a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	0018      	movs	r0, r3
 8004780:	46bd      	mov	sp, r7
 8004782:	b004      	add	sp, #16
 8004784:	bd80      	pop	{r7, pc}

08004786 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b084      	sub	sp, #16
 800478a:	af00      	add	r7, sp, #0
 800478c:	60f8      	str	r0, [r7, #12]
 800478e:	60b9      	str	r1, [r7, #8]
 8004790:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004792:	e02b      	b.n	80047ec <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	68b9      	ldr	r1, [r7, #8]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	0018      	movs	r0, r3
 800479c:	f000 f8da 	bl	8004954 <I2C_IsAcknowledgeFailed>
 80047a0:	1e03      	subs	r3, r0, #0
 80047a2:	d001      	beq.n	80047a8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e029      	b.n	80047fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	3301      	adds	r3, #1
 80047ac:	d01e      	beq.n	80047ec <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ae:	f7ff fa11 	bl	8003bd4 <HAL_GetTick>
 80047b2:	0002      	movs	r2, r0
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d302      	bcc.n	80047c4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d113      	bne.n	80047ec <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c8:	2220      	movs	r2, #32
 80047ca:	431a      	orrs	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2241      	movs	r2, #65	; 0x41
 80047d4:	2120      	movs	r1, #32
 80047d6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2242      	movs	r2, #66	; 0x42
 80047dc:	2100      	movs	r1, #0
 80047de:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2240      	movs	r2, #64	; 0x40
 80047e4:	2100      	movs	r1, #0
 80047e6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e007      	b.n	80047fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	2202      	movs	r2, #2
 80047f4:	4013      	ands	r3, r2
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d1cc      	bne.n	8004794 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	0018      	movs	r0, r3
 80047fe:	46bd      	mov	sp, r7
 8004800:	b004      	add	sp, #16
 8004802:	bd80      	pop	{r7, pc}

08004804 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004810:	e028      	b.n	8004864 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	68b9      	ldr	r1, [r7, #8]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	0018      	movs	r0, r3
 800481a:	f000 f89b 	bl	8004954 <I2C_IsAcknowledgeFailed>
 800481e:	1e03      	subs	r3, r0, #0
 8004820:	d001      	beq.n	8004826 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e026      	b.n	8004874 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004826:	f7ff f9d5 	bl	8003bd4 <HAL_GetTick>
 800482a:	0002      	movs	r2, r0
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	429a      	cmp	r2, r3
 8004834:	d302      	bcc.n	800483c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d113      	bne.n	8004864 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004840:	2220      	movs	r2, #32
 8004842:	431a      	orrs	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2241      	movs	r2, #65	; 0x41
 800484c:	2120      	movs	r1, #32
 800484e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2242      	movs	r2, #66	; 0x42
 8004854:	2100      	movs	r1, #0
 8004856:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2240      	movs	r2, #64	; 0x40
 800485c:	2100      	movs	r1, #0
 800485e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e007      	b.n	8004874 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	2220      	movs	r2, #32
 800486c:	4013      	ands	r3, r2
 800486e:	2b20      	cmp	r3, #32
 8004870:	d1cf      	bne.n	8004812 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	0018      	movs	r0, r3
 8004876:	46bd      	mov	sp, r7
 8004878:	b004      	add	sp, #16
 800487a:	bd80      	pop	{r7, pc}

0800487c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004888:	e055      	b.n	8004936 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	68b9      	ldr	r1, [r7, #8]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	0018      	movs	r0, r3
 8004892:	f000 f85f 	bl	8004954 <I2C_IsAcknowledgeFailed>
 8004896:	1e03      	subs	r3, r0, #0
 8004898:	d001      	beq.n	800489e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e053      	b.n	8004946 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	2220      	movs	r2, #32
 80048a6:	4013      	ands	r3, r2
 80048a8:	2b20      	cmp	r3, #32
 80048aa:	d129      	bne.n	8004900 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	2204      	movs	r2, #4
 80048b4:	4013      	ands	r3, r2
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d105      	bne.n	80048c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	e03f      	b.n	8004946 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2220      	movs	r2, #32
 80048cc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	491d      	ldr	r1, [pc, #116]	; (8004950 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80048da:	400a      	ands	r2, r1
 80048dc:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2241      	movs	r2, #65	; 0x41
 80048e8:	2120      	movs	r1, #32
 80048ea:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2242      	movs	r2, #66	; 0x42
 80048f0:	2100      	movs	r1, #0
 80048f2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2240      	movs	r2, #64	; 0x40
 80048f8:	2100      	movs	r1, #0
 80048fa:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e022      	b.n	8004946 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004900:	f7ff f968 	bl	8003bd4 <HAL_GetTick>
 8004904:	0002      	movs	r2, r0
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	429a      	cmp	r2, r3
 800490e:	d302      	bcc.n	8004916 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10f      	bne.n	8004936 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491a:	2220      	movs	r2, #32
 800491c:	431a      	orrs	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2241      	movs	r2, #65	; 0x41
 8004926:	2120      	movs	r1, #32
 8004928:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2240      	movs	r2, #64	; 0x40
 800492e:	2100      	movs	r1, #0
 8004930:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e007      	b.n	8004946 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	2204      	movs	r2, #4
 800493e:	4013      	ands	r3, r2
 8004940:	2b04      	cmp	r3, #4
 8004942:	d1a2      	bne.n	800488a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	0018      	movs	r0, r3
 8004948:	46bd      	mov	sp, r7
 800494a:	b004      	add	sp, #16
 800494c:	bd80      	pop	{r7, pc}
 800494e:	46c0      	nop			; (mov r8, r8)
 8004950:	fe00e800 	.word	0xfe00e800

08004954 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	2210      	movs	r2, #16
 8004968:	4013      	ands	r3, r2
 800496a:	2b10      	cmp	r3, #16
 800496c:	d164      	bne.n	8004a38 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	2380      	movs	r3, #128	; 0x80
 8004976:	049b      	lsls	r3, r3, #18
 8004978:	401a      	ands	r2, r3
 800497a:	2380      	movs	r3, #128	; 0x80
 800497c:	049b      	lsls	r3, r3, #18
 800497e:	429a      	cmp	r2, r3
 8004980:	d02b      	beq.n	80049da <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2180      	movs	r1, #128	; 0x80
 800498e:	01c9      	lsls	r1, r1, #7
 8004990:	430a      	orrs	r2, r1
 8004992:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004994:	e021      	b.n	80049da <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	3301      	adds	r3, #1
 800499a:	d01e      	beq.n	80049da <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800499c:	f7ff f91a 	bl	8003bd4 <HAL_GetTick>
 80049a0:	0002      	movs	r2, r0
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d302      	bcc.n	80049b2 <I2C_IsAcknowledgeFailed+0x5e>
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d113      	bne.n	80049da <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b6:	2220      	movs	r2, #32
 80049b8:	431a      	orrs	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2241      	movs	r2, #65	; 0x41
 80049c2:	2120      	movs	r1, #32
 80049c4:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2242      	movs	r2, #66	; 0x42
 80049ca:	2100      	movs	r1, #0
 80049cc:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2240      	movs	r2, #64	; 0x40
 80049d2:	2100      	movs	r1, #0
 80049d4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e02f      	b.n	8004a3a <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	2220      	movs	r2, #32
 80049e2:	4013      	ands	r3, r2
 80049e4:	2b20      	cmp	r3, #32
 80049e6:	d1d6      	bne.n	8004996 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2210      	movs	r2, #16
 80049ee:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2220      	movs	r2, #32
 80049f6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	0018      	movs	r0, r3
 80049fc:	f7ff fe62 	bl	80046c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	490e      	ldr	r1, [pc, #56]	; (8004a44 <I2C_IsAcknowledgeFailed+0xf0>)
 8004a0c:	400a      	ands	r2, r1
 8004a0e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a14:	2204      	movs	r2, #4
 8004a16:	431a      	orrs	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2241      	movs	r2, #65	; 0x41
 8004a20:	2120      	movs	r1, #32
 8004a22:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2242      	movs	r2, #66	; 0x42
 8004a28:	2100      	movs	r1, #0
 8004a2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2240      	movs	r2, #64	; 0x40
 8004a30:	2100      	movs	r1, #0
 8004a32:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e000      	b.n	8004a3a <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	b004      	add	sp, #16
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	46c0      	nop			; (mov r8, r8)
 8004a44:	fe00e800 	.word	0xfe00e800

08004a48 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a48:	b590      	push	{r4, r7, lr}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	0008      	movs	r0, r1
 8004a52:	0011      	movs	r1, r2
 8004a54:	607b      	str	r3, [r7, #4]
 8004a56:	240a      	movs	r4, #10
 8004a58:	193b      	adds	r3, r7, r4
 8004a5a:	1c02      	adds	r2, r0, #0
 8004a5c:	801a      	strh	r2, [r3, #0]
 8004a5e:	2009      	movs	r0, #9
 8004a60:	183b      	adds	r3, r7, r0
 8004a62:	1c0a      	adds	r2, r1, #0
 8004a64:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	6a3a      	ldr	r2, [r7, #32]
 8004a6e:	0d51      	lsrs	r1, r2, #21
 8004a70:	2280      	movs	r2, #128	; 0x80
 8004a72:	00d2      	lsls	r2, r2, #3
 8004a74:	400a      	ands	r2, r1
 8004a76:	490e      	ldr	r1, [pc, #56]	; (8004ab0 <I2C_TransferConfig+0x68>)
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	43d2      	mvns	r2, r2
 8004a7c:	401a      	ands	r2, r3
 8004a7e:	0011      	movs	r1, r2
 8004a80:	193b      	adds	r3, r7, r4
 8004a82:	881b      	ldrh	r3, [r3, #0]
 8004a84:	059b      	lsls	r3, r3, #22
 8004a86:	0d9a      	lsrs	r2, r3, #22
 8004a88:	183b      	adds	r3, r7, r0
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	0418      	lsls	r0, r3, #16
 8004a8e:	23ff      	movs	r3, #255	; 0xff
 8004a90:	041b      	lsls	r3, r3, #16
 8004a92:	4003      	ands	r3, r0
 8004a94:	431a      	orrs	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	6a3b      	ldr	r3, [r7, #32]
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004aa6:	46c0      	nop			; (mov r8, r8)
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	b005      	add	sp, #20
 8004aac:	bd90      	pop	{r4, r7, pc}
 8004aae:	46c0      	nop			; (mov r8, r8)
 8004ab0:	03ff63ff 	.word	0x03ff63ff

08004ab4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2241      	movs	r2, #65	; 0x41
 8004ac2:	5c9b      	ldrb	r3, [r3, r2]
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b20      	cmp	r3, #32
 8004ac8:	d138      	bne.n	8004b3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2240      	movs	r2, #64	; 0x40
 8004ace:	5c9b      	ldrb	r3, [r3, r2]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d101      	bne.n	8004ad8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	e032      	b.n	8004b3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2240      	movs	r2, #64	; 0x40
 8004adc:	2101      	movs	r1, #1
 8004ade:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2241      	movs	r2, #65	; 0x41
 8004ae4:	2124      	movs	r1, #36	; 0x24
 8004ae6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2101      	movs	r1, #1
 8004af4:	438a      	bics	r2, r1
 8004af6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4911      	ldr	r1, [pc, #68]	; (8004b48 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004b04:	400a      	ands	r2, r1
 8004b06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6819      	ldr	r1, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	430a      	orrs	r2, r1
 8004b16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2101      	movs	r1, #1
 8004b24:	430a      	orrs	r2, r1
 8004b26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2241      	movs	r2, #65	; 0x41
 8004b2c:	2120      	movs	r1, #32
 8004b2e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2240      	movs	r2, #64	; 0x40
 8004b34:	2100      	movs	r1, #0
 8004b36:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	e000      	b.n	8004b3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b3c:	2302      	movs	r3, #2
  }
}
 8004b3e:	0018      	movs	r0, r3
 8004b40:	46bd      	mov	sp, r7
 8004b42:	b002      	add	sp, #8
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	46c0      	nop			; (mov r8, r8)
 8004b48:	ffffefff 	.word	0xffffefff

08004b4c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2241      	movs	r2, #65	; 0x41
 8004b5a:	5c9b      	ldrb	r3, [r3, r2]
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b20      	cmp	r3, #32
 8004b60:	d139      	bne.n	8004bd6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2240      	movs	r2, #64	; 0x40
 8004b66:	5c9b      	ldrb	r3, [r3, r2]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d101      	bne.n	8004b70 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	e033      	b.n	8004bd8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2240      	movs	r2, #64	; 0x40
 8004b74:	2101      	movs	r1, #1
 8004b76:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2241      	movs	r2, #65	; 0x41
 8004b7c:	2124      	movs	r1, #36	; 0x24
 8004b7e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	438a      	bics	r2, r1
 8004b8e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	4a11      	ldr	r2, [pc, #68]	; (8004be0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	021b      	lsls	r3, r3, #8
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2241      	movs	r2, #65	; 0x41
 8004bc6:	2120      	movs	r1, #32
 8004bc8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2240      	movs	r2, #64	; 0x40
 8004bce:	2100      	movs	r1, #0
 8004bd0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	e000      	b.n	8004bd8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004bd6:	2302      	movs	r3, #2
  }
}
 8004bd8:	0018      	movs	r0, r3
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	b004      	add	sp, #16
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	fffff0ff 	.word	0xfffff0ff

08004be4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b088      	sub	sp, #32
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e305      	b.n	8005202 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	d100      	bne.n	8004c02 <HAL_RCC_OscConfig+0x1e>
 8004c00:	e08d      	b.n	8004d1e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004c02:	4bc5      	ldr	r3, [pc, #788]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	220c      	movs	r2, #12
 8004c08:	4013      	ands	r3, r2
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	d00e      	beq.n	8004c2c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c0e:	4bc2      	ldr	r3, [pc, #776]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	220c      	movs	r2, #12
 8004c14:	4013      	ands	r3, r2
 8004c16:	2b08      	cmp	r3, #8
 8004c18:	d116      	bne.n	8004c48 <HAL_RCC_OscConfig+0x64>
 8004c1a:	4bbf      	ldr	r3, [pc, #764]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	2380      	movs	r3, #128	; 0x80
 8004c20:	025b      	lsls	r3, r3, #9
 8004c22:	401a      	ands	r2, r3
 8004c24:	2380      	movs	r3, #128	; 0x80
 8004c26:	025b      	lsls	r3, r3, #9
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d10d      	bne.n	8004c48 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c2c:	4bba      	ldr	r3, [pc, #744]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	2380      	movs	r3, #128	; 0x80
 8004c32:	029b      	lsls	r3, r3, #10
 8004c34:	4013      	ands	r3, r2
 8004c36:	d100      	bne.n	8004c3a <HAL_RCC_OscConfig+0x56>
 8004c38:	e070      	b.n	8004d1c <HAL_RCC_OscConfig+0x138>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d000      	beq.n	8004c44 <HAL_RCC_OscConfig+0x60>
 8004c42:	e06b      	b.n	8004d1c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e2dc      	b.n	8005202 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d107      	bne.n	8004c60 <HAL_RCC_OscConfig+0x7c>
 8004c50:	4bb1      	ldr	r3, [pc, #708]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	4bb0      	ldr	r3, [pc, #704]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004c56:	2180      	movs	r1, #128	; 0x80
 8004c58:	0249      	lsls	r1, r1, #9
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	601a      	str	r2, [r3, #0]
 8004c5e:	e02f      	b.n	8004cc0 <HAL_RCC_OscConfig+0xdc>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10c      	bne.n	8004c82 <HAL_RCC_OscConfig+0x9e>
 8004c68:	4bab      	ldr	r3, [pc, #684]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	4baa      	ldr	r3, [pc, #680]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004c6e:	49ab      	ldr	r1, [pc, #684]	; (8004f1c <HAL_RCC_OscConfig+0x338>)
 8004c70:	400a      	ands	r2, r1
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	4ba8      	ldr	r3, [pc, #672]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	4ba7      	ldr	r3, [pc, #668]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004c7a:	49a9      	ldr	r1, [pc, #676]	; (8004f20 <HAL_RCC_OscConfig+0x33c>)
 8004c7c:	400a      	ands	r2, r1
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	e01e      	b.n	8004cc0 <HAL_RCC_OscConfig+0xdc>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2b05      	cmp	r3, #5
 8004c88:	d10e      	bne.n	8004ca8 <HAL_RCC_OscConfig+0xc4>
 8004c8a:	4ba3      	ldr	r3, [pc, #652]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	4ba2      	ldr	r3, [pc, #648]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004c90:	2180      	movs	r1, #128	; 0x80
 8004c92:	02c9      	lsls	r1, r1, #11
 8004c94:	430a      	orrs	r2, r1
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	4b9f      	ldr	r3, [pc, #636]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	4b9e      	ldr	r3, [pc, #632]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004c9e:	2180      	movs	r1, #128	; 0x80
 8004ca0:	0249      	lsls	r1, r1, #9
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	e00b      	b.n	8004cc0 <HAL_RCC_OscConfig+0xdc>
 8004ca8:	4b9b      	ldr	r3, [pc, #620]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	4b9a      	ldr	r3, [pc, #616]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004cae:	499b      	ldr	r1, [pc, #620]	; (8004f1c <HAL_RCC_OscConfig+0x338>)
 8004cb0:	400a      	ands	r2, r1
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	4b98      	ldr	r3, [pc, #608]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	4b97      	ldr	r3, [pc, #604]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004cba:	4999      	ldr	r1, [pc, #612]	; (8004f20 <HAL_RCC_OscConfig+0x33c>)
 8004cbc:	400a      	ands	r2, r1
 8004cbe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d014      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc8:	f7fe ff84 	bl	8003bd4 <HAL_GetTick>
 8004ccc:	0003      	movs	r3, r0
 8004cce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cd0:	e008      	b.n	8004ce4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cd2:	f7fe ff7f 	bl	8003bd4 <HAL_GetTick>
 8004cd6:	0002      	movs	r2, r0
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b64      	cmp	r3, #100	; 0x64
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e28e      	b.n	8005202 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ce4:	4b8c      	ldr	r3, [pc, #560]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	2380      	movs	r3, #128	; 0x80
 8004cea:	029b      	lsls	r3, r3, #10
 8004cec:	4013      	ands	r3, r2
 8004cee:	d0f0      	beq.n	8004cd2 <HAL_RCC_OscConfig+0xee>
 8004cf0:	e015      	b.n	8004d1e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf2:	f7fe ff6f 	bl	8003bd4 <HAL_GetTick>
 8004cf6:	0003      	movs	r3, r0
 8004cf8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cfa:	e008      	b.n	8004d0e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cfc:	f7fe ff6a 	bl	8003bd4 <HAL_GetTick>
 8004d00:	0002      	movs	r2, r0
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b64      	cmp	r3, #100	; 0x64
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e279      	b.n	8005202 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d0e:	4b82      	ldr	r3, [pc, #520]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	2380      	movs	r3, #128	; 0x80
 8004d14:	029b      	lsls	r3, r3, #10
 8004d16:	4013      	ands	r3, r2
 8004d18:	d1f0      	bne.n	8004cfc <HAL_RCC_OscConfig+0x118>
 8004d1a:	e000      	b.n	8004d1e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d1c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2202      	movs	r2, #2
 8004d24:	4013      	ands	r3, r2
 8004d26:	d100      	bne.n	8004d2a <HAL_RCC_OscConfig+0x146>
 8004d28:	e06c      	b.n	8004e04 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004d2a:	4b7b      	ldr	r3, [pc, #492]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	220c      	movs	r2, #12
 8004d30:	4013      	ands	r3, r2
 8004d32:	d00e      	beq.n	8004d52 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004d34:	4b78      	ldr	r3, [pc, #480]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	220c      	movs	r2, #12
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d11f      	bne.n	8004d80 <HAL_RCC_OscConfig+0x19c>
 8004d40:	4b75      	ldr	r3, [pc, #468]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	2380      	movs	r3, #128	; 0x80
 8004d46:	025b      	lsls	r3, r3, #9
 8004d48:	401a      	ands	r2, r3
 8004d4a:	2380      	movs	r3, #128	; 0x80
 8004d4c:	021b      	lsls	r3, r3, #8
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d116      	bne.n	8004d80 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d52:	4b71      	ldr	r3, [pc, #452]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2202      	movs	r2, #2
 8004d58:	4013      	ands	r3, r2
 8004d5a:	d005      	beq.n	8004d68 <HAL_RCC_OscConfig+0x184>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d001      	beq.n	8004d68 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e24c      	b.n	8005202 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d68:	4b6b      	ldr	r3, [pc, #428]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	22f8      	movs	r2, #248	; 0xf8
 8004d6e:	4393      	bics	r3, r2
 8004d70:	0019      	movs	r1, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	00da      	lsls	r2, r3, #3
 8004d78:	4b67      	ldr	r3, [pc, #412]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d7e:	e041      	b.n	8004e04 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d024      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d88:	4b63      	ldr	r3, [pc, #396]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	4b62      	ldr	r3, [pc, #392]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004d8e:	2101      	movs	r1, #1
 8004d90:	430a      	orrs	r2, r1
 8004d92:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d94:	f7fe ff1e 	bl	8003bd4 <HAL_GetTick>
 8004d98:	0003      	movs	r3, r0
 8004d9a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d9c:	e008      	b.n	8004db0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d9e:	f7fe ff19 	bl	8003bd4 <HAL_GetTick>
 8004da2:	0002      	movs	r2, r0
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d901      	bls.n	8004db0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e228      	b.n	8005202 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004db0:	4b59      	ldr	r3, [pc, #356]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2202      	movs	r2, #2
 8004db6:	4013      	ands	r3, r2
 8004db8:	d0f1      	beq.n	8004d9e <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dba:	4b57      	ldr	r3, [pc, #348]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	22f8      	movs	r2, #248	; 0xf8
 8004dc0:	4393      	bics	r3, r2
 8004dc2:	0019      	movs	r1, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	00da      	lsls	r2, r3, #3
 8004dca:	4b53      	ldr	r3, [pc, #332]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	e018      	b.n	8004e04 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dd2:	4b51      	ldr	r3, [pc, #324]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	4b50      	ldr	r3, [pc, #320]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004dd8:	2101      	movs	r1, #1
 8004dda:	438a      	bics	r2, r1
 8004ddc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dde:	f7fe fef9 	bl	8003bd4 <HAL_GetTick>
 8004de2:	0003      	movs	r3, r0
 8004de4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004de6:	e008      	b.n	8004dfa <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004de8:	f7fe fef4 	bl	8003bd4 <HAL_GetTick>
 8004dec:	0002      	movs	r2, r0
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e203      	b.n	8005202 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dfa:	4b47      	ldr	r3, [pc, #284]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	4013      	ands	r3, r2
 8004e02:	d1f1      	bne.n	8004de8 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2208      	movs	r2, #8
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	d036      	beq.n	8004e7c <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d019      	beq.n	8004e4a <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e16:	4b40      	ldr	r3, [pc, #256]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004e18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e1a:	4b3f      	ldr	r3, [pc, #252]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e22:	f7fe fed7 	bl	8003bd4 <HAL_GetTick>
 8004e26:	0003      	movs	r3, r0
 8004e28:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e2c:	f7fe fed2 	bl	8003bd4 <HAL_GetTick>
 8004e30:	0002      	movs	r2, r0
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e1e1      	b.n	8005202 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e3e:	4b36      	ldr	r3, [pc, #216]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	2202      	movs	r2, #2
 8004e44:	4013      	ands	r3, r2
 8004e46:	d0f1      	beq.n	8004e2c <HAL_RCC_OscConfig+0x248>
 8004e48:	e018      	b.n	8004e7c <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e4a:	4b33      	ldr	r3, [pc, #204]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004e4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e4e:	4b32      	ldr	r3, [pc, #200]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004e50:	2101      	movs	r1, #1
 8004e52:	438a      	bics	r2, r1
 8004e54:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e56:	f7fe febd 	bl	8003bd4 <HAL_GetTick>
 8004e5a:	0003      	movs	r3, r0
 8004e5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e60:	f7fe feb8 	bl	8003bd4 <HAL_GetTick>
 8004e64:	0002      	movs	r2, r0
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e1c7      	b.n	8005202 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e72:	4b29      	ldr	r3, [pc, #164]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	2202      	movs	r2, #2
 8004e78:	4013      	ands	r3, r2
 8004e7a:	d1f1      	bne.n	8004e60 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2204      	movs	r2, #4
 8004e82:	4013      	ands	r3, r2
 8004e84:	d100      	bne.n	8004e88 <HAL_RCC_OscConfig+0x2a4>
 8004e86:	e0b5      	b.n	8004ff4 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e88:	201f      	movs	r0, #31
 8004e8a:	183b      	adds	r3, r7, r0
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e90:	4b21      	ldr	r3, [pc, #132]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004e92:	69da      	ldr	r2, [r3, #28]
 8004e94:	2380      	movs	r3, #128	; 0x80
 8004e96:	055b      	lsls	r3, r3, #21
 8004e98:	4013      	ands	r3, r2
 8004e9a:	d110      	bne.n	8004ebe <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e9c:	4b1e      	ldr	r3, [pc, #120]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004e9e:	69da      	ldr	r2, [r3, #28]
 8004ea0:	4b1d      	ldr	r3, [pc, #116]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004ea2:	2180      	movs	r1, #128	; 0x80
 8004ea4:	0549      	lsls	r1, r1, #21
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	61da      	str	r2, [r3, #28]
 8004eaa:	4b1b      	ldr	r3, [pc, #108]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004eac:	69da      	ldr	r2, [r3, #28]
 8004eae:	2380      	movs	r3, #128	; 0x80
 8004eb0:	055b      	lsls	r3, r3, #21
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004eb8:	183b      	adds	r3, r7, r0
 8004eba:	2201      	movs	r2, #1
 8004ebc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ebe:	4b19      	ldr	r3, [pc, #100]	; (8004f24 <HAL_RCC_OscConfig+0x340>)
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	2380      	movs	r3, #128	; 0x80
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	d11a      	bne.n	8004f00 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004eca:	4b16      	ldr	r3, [pc, #88]	; (8004f24 <HAL_RCC_OscConfig+0x340>)
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	4b15      	ldr	r3, [pc, #84]	; (8004f24 <HAL_RCC_OscConfig+0x340>)
 8004ed0:	2180      	movs	r1, #128	; 0x80
 8004ed2:	0049      	lsls	r1, r1, #1
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ed8:	f7fe fe7c 	bl	8003bd4 <HAL_GetTick>
 8004edc:	0003      	movs	r3, r0
 8004ede:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee0:	e008      	b.n	8004ef4 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ee2:	f7fe fe77 	bl	8003bd4 <HAL_GetTick>
 8004ee6:	0002      	movs	r2, r0
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b64      	cmp	r3, #100	; 0x64
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e186      	b.n	8005202 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef4:	4b0b      	ldr	r3, [pc, #44]	; (8004f24 <HAL_RCC_OscConfig+0x340>)
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	2380      	movs	r3, #128	; 0x80
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	4013      	ands	r3, r2
 8004efe:	d0f0      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d10f      	bne.n	8004f28 <HAL_RCC_OscConfig+0x344>
 8004f08:	4b03      	ldr	r3, [pc, #12]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004f0a:	6a1a      	ldr	r2, [r3, #32]
 8004f0c:	4b02      	ldr	r3, [pc, #8]	; (8004f18 <HAL_RCC_OscConfig+0x334>)
 8004f0e:	2101      	movs	r1, #1
 8004f10:	430a      	orrs	r2, r1
 8004f12:	621a      	str	r2, [r3, #32]
 8004f14:	e036      	b.n	8004f84 <HAL_RCC_OscConfig+0x3a0>
 8004f16:	46c0      	nop			; (mov r8, r8)
 8004f18:	40021000 	.word	0x40021000
 8004f1c:	fffeffff 	.word	0xfffeffff
 8004f20:	fffbffff 	.word	0xfffbffff
 8004f24:	40007000 	.word	0x40007000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10c      	bne.n	8004f4a <HAL_RCC_OscConfig+0x366>
 8004f30:	4bb6      	ldr	r3, [pc, #728]	; (800520c <HAL_RCC_OscConfig+0x628>)
 8004f32:	6a1a      	ldr	r2, [r3, #32]
 8004f34:	4bb5      	ldr	r3, [pc, #724]	; (800520c <HAL_RCC_OscConfig+0x628>)
 8004f36:	2101      	movs	r1, #1
 8004f38:	438a      	bics	r2, r1
 8004f3a:	621a      	str	r2, [r3, #32]
 8004f3c:	4bb3      	ldr	r3, [pc, #716]	; (800520c <HAL_RCC_OscConfig+0x628>)
 8004f3e:	6a1a      	ldr	r2, [r3, #32]
 8004f40:	4bb2      	ldr	r3, [pc, #712]	; (800520c <HAL_RCC_OscConfig+0x628>)
 8004f42:	2104      	movs	r1, #4
 8004f44:	438a      	bics	r2, r1
 8004f46:	621a      	str	r2, [r3, #32]
 8004f48:	e01c      	b.n	8004f84 <HAL_RCC_OscConfig+0x3a0>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	2b05      	cmp	r3, #5
 8004f50:	d10c      	bne.n	8004f6c <HAL_RCC_OscConfig+0x388>
 8004f52:	4bae      	ldr	r3, [pc, #696]	; (800520c <HAL_RCC_OscConfig+0x628>)
 8004f54:	6a1a      	ldr	r2, [r3, #32]
 8004f56:	4bad      	ldr	r3, [pc, #692]	; (800520c <HAL_RCC_OscConfig+0x628>)
 8004f58:	2104      	movs	r1, #4
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	621a      	str	r2, [r3, #32]
 8004f5e:	4bab      	ldr	r3, [pc, #684]	; (800520c <HAL_RCC_OscConfig+0x628>)
 8004f60:	6a1a      	ldr	r2, [r3, #32]
 8004f62:	4baa      	ldr	r3, [pc, #680]	; (800520c <HAL_RCC_OscConfig+0x628>)
 8004f64:	2101      	movs	r1, #1
 8004f66:	430a      	orrs	r2, r1
 8004f68:	621a      	str	r2, [r3, #32]
 8004f6a:	e00b      	b.n	8004f84 <HAL_RCC_OscConfig+0x3a0>
 8004f6c:	4ba7      	ldr	r3, [pc, #668]	; (800520c <HAL_RCC_OscConfig+0x628>)
 8004f6e:	6a1a      	ldr	r2, [r3, #32]
 8004f70:	4ba6      	ldr	r3, [pc, #664]	; (800520c <HAL_RCC_OscConfig+0x628>)
 8004f72:	2101      	movs	r1, #1
 8004f74:	438a      	bics	r2, r1
 8004f76:	621a      	str	r2, [r3, #32]
 8004f78:	4ba4      	ldr	r3, [pc, #656]	; (800520c <HAL_RCC_OscConfig+0x628>)
 8004f7a:	6a1a      	ldr	r2, [r3, #32]
 8004f7c:	4ba3      	ldr	r3, [pc, #652]	; (800520c <HAL_RCC_OscConfig+0x628>)
 8004f7e:	2104      	movs	r1, #4
 8004f80:	438a      	bics	r2, r1
 8004f82:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d014      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f8c:	f7fe fe22 	bl	8003bd4 <HAL_GetTick>
 8004f90:	0003      	movs	r3, r0
 8004f92:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f94:	e009      	b.n	8004faa <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f96:	f7fe fe1d 	bl	8003bd4 <HAL_GetTick>
 8004f9a:	0002      	movs	r2, r0
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	4a9b      	ldr	r2, [pc, #620]	; (8005210 <HAL_RCC_OscConfig+0x62c>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e12b      	b.n	8005202 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004faa:	4b98      	ldr	r3, [pc, #608]	; (800520c <HAL_RCC_OscConfig+0x628>)
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	d0f0      	beq.n	8004f96 <HAL_RCC_OscConfig+0x3b2>
 8004fb4:	e013      	b.n	8004fde <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fb6:	f7fe fe0d 	bl	8003bd4 <HAL_GetTick>
 8004fba:	0003      	movs	r3, r0
 8004fbc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fbe:	e009      	b.n	8004fd4 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fc0:	f7fe fe08 	bl	8003bd4 <HAL_GetTick>
 8004fc4:	0002      	movs	r2, r0
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	4a91      	ldr	r2, [pc, #580]	; (8005210 <HAL_RCC_OscConfig+0x62c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d901      	bls.n	8004fd4 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e116      	b.n	8005202 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fd4:	4b8d      	ldr	r3, [pc, #564]	; (800520c <HAL_RCC_OscConfig+0x628>)
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	2202      	movs	r2, #2
 8004fda:	4013      	ands	r3, r2
 8004fdc:	d1f0      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004fde:	231f      	movs	r3, #31
 8004fe0:	18fb      	adds	r3, r7, r3
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d105      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fe8:	4b88      	ldr	r3, [pc, #544]	; (800520c <HAL_RCC_OscConfig+0x628>)
 8004fea:	69da      	ldr	r2, [r3, #28]
 8004fec:	4b87      	ldr	r3, [pc, #540]	; (800520c <HAL_RCC_OscConfig+0x628>)
 8004fee:	4989      	ldr	r1, [pc, #548]	; (8005214 <HAL_RCC_OscConfig+0x630>)
 8004ff0:	400a      	ands	r2, r1
 8004ff2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2210      	movs	r2, #16
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	d063      	beq.n	80050c6 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d12a      	bne.n	800505c <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005006:	4b81      	ldr	r3, [pc, #516]	; (800520c <HAL_RCC_OscConfig+0x628>)
 8005008:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800500a:	4b80      	ldr	r3, [pc, #512]	; (800520c <HAL_RCC_OscConfig+0x628>)
 800500c:	2104      	movs	r1, #4
 800500e:	430a      	orrs	r2, r1
 8005010:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005012:	4b7e      	ldr	r3, [pc, #504]	; (800520c <HAL_RCC_OscConfig+0x628>)
 8005014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005016:	4b7d      	ldr	r3, [pc, #500]	; (800520c <HAL_RCC_OscConfig+0x628>)
 8005018:	2101      	movs	r1, #1
 800501a:	430a      	orrs	r2, r1
 800501c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800501e:	f7fe fdd9 	bl	8003bd4 <HAL_GetTick>
 8005022:	0003      	movs	r3, r0
 8005024:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005028:	f7fe fdd4 	bl	8003bd4 <HAL_GetTick>
 800502c:	0002      	movs	r2, r0
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e0e3      	b.n	8005202 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800503a:	4b74      	ldr	r3, [pc, #464]	; (800520c <HAL_RCC_OscConfig+0x628>)
 800503c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800503e:	2202      	movs	r2, #2
 8005040:	4013      	ands	r3, r2
 8005042:	d0f1      	beq.n	8005028 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005044:	4b71      	ldr	r3, [pc, #452]	; (800520c <HAL_RCC_OscConfig+0x628>)
 8005046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005048:	22f8      	movs	r2, #248	; 0xf8
 800504a:	4393      	bics	r3, r2
 800504c:	0019      	movs	r1, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	00da      	lsls	r2, r3, #3
 8005054:	4b6d      	ldr	r3, [pc, #436]	; (800520c <HAL_RCC_OscConfig+0x628>)
 8005056:	430a      	orrs	r2, r1
 8005058:	635a      	str	r2, [r3, #52]	; 0x34
 800505a:	e034      	b.n	80050c6 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	3305      	adds	r3, #5
 8005062:	d111      	bne.n	8005088 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005064:	4b69      	ldr	r3, [pc, #420]	; (800520c <HAL_RCC_OscConfig+0x628>)
 8005066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005068:	4b68      	ldr	r3, [pc, #416]	; (800520c <HAL_RCC_OscConfig+0x628>)
 800506a:	2104      	movs	r1, #4
 800506c:	438a      	bics	r2, r1
 800506e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005070:	4b66      	ldr	r3, [pc, #408]	; (800520c <HAL_RCC_OscConfig+0x628>)
 8005072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005074:	22f8      	movs	r2, #248	; 0xf8
 8005076:	4393      	bics	r3, r2
 8005078:	0019      	movs	r1, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	00da      	lsls	r2, r3, #3
 8005080:	4b62      	ldr	r3, [pc, #392]	; (800520c <HAL_RCC_OscConfig+0x628>)
 8005082:	430a      	orrs	r2, r1
 8005084:	635a      	str	r2, [r3, #52]	; 0x34
 8005086:	e01e      	b.n	80050c6 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005088:	4b60      	ldr	r3, [pc, #384]	; (800520c <HAL_RCC_OscConfig+0x628>)
 800508a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800508c:	4b5f      	ldr	r3, [pc, #380]	; (800520c <HAL_RCC_OscConfig+0x628>)
 800508e:	2104      	movs	r1, #4
 8005090:	430a      	orrs	r2, r1
 8005092:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005094:	4b5d      	ldr	r3, [pc, #372]	; (800520c <HAL_RCC_OscConfig+0x628>)
 8005096:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005098:	4b5c      	ldr	r3, [pc, #368]	; (800520c <HAL_RCC_OscConfig+0x628>)
 800509a:	2101      	movs	r1, #1
 800509c:	438a      	bics	r2, r1
 800509e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050a0:	f7fe fd98 	bl	8003bd4 <HAL_GetTick>
 80050a4:	0003      	movs	r3, r0
 80050a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80050a8:	e008      	b.n	80050bc <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80050aa:	f7fe fd93 	bl	8003bd4 <HAL_GetTick>
 80050ae:	0002      	movs	r2, r0
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e0a2      	b.n	8005202 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80050bc:	4b53      	ldr	r3, [pc, #332]	; (800520c <HAL_RCC_OscConfig+0x628>)
 80050be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c0:	2202      	movs	r2, #2
 80050c2:	4013      	ands	r3, r2
 80050c4:	d1f1      	bne.n	80050aa <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d100      	bne.n	80050d0 <HAL_RCC_OscConfig+0x4ec>
 80050ce:	e097      	b.n	8005200 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050d0:	4b4e      	ldr	r3, [pc, #312]	; (800520c <HAL_RCC_OscConfig+0x628>)
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	220c      	movs	r2, #12
 80050d6:	4013      	ands	r3, r2
 80050d8:	2b08      	cmp	r3, #8
 80050da:	d100      	bne.n	80050de <HAL_RCC_OscConfig+0x4fa>
 80050dc:	e06b      	b.n	80051b6 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d14c      	bne.n	8005180 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050e6:	4b49      	ldr	r3, [pc, #292]	; (800520c <HAL_RCC_OscConfig+0x628>)
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	4b48      	ldr	r3, [pc, #288]	; (800520c <HAL_RCC_OscConfig+0x628>)
 80050ec:	494a      	ldr	r1, [pc, #296]	; (8005218 <HAL_RCC_OscConfig+0x634>)
 80050ee:	400a      	ands	r2, r1
 80050f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f2:	f7fe fd6f 	bl	8003bd4 <HAL_GetTick>
 80050f6:	0003      	movs	r3, r0
 80050f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050fa:	e008      	b.n	800510e <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050fc:	f7fe fd6a 	bl	8003bd4 <HAL_GetTick>
 8005100:	0002      	movs	r2, r0
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b02      	cmp	r3, #2
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e079      	b.n	8005202 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800510e:	4b3f      	ldr	r3, [pc, #252]	; (800520c <HAL_RCC_OscConfig+0x628>)
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	2380      	movs	r3, #128	; 0x80
 8005114:	049b      	lsls	r3, r3, #18
 8005116:	4013      	ands	r3, r2
 8005118:	d1f0      	bne.n	80050fc <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800511a:	4b3c      	ldr	r3, [pc, #240]	; (800520c <HAL_RCC_OscConfig+0x628>)
 800511c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511e:	220f      	movs	r2, #15
 8005120:	4393      	bics	r3, r2
 8005122:	0019      	movs	r1, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005128:	4b38      	ldr	r3, [pc, #224]	; (800520c <HAL_RCC_OscConfig+0x628>)
 800512a:	430a      	orrs	r2, r1
 800512c:	62da      	str	r2, [r3, #44]	; 0x2c
 800512e:	4b37      	ldr	r3, [pc, #220]	; (800520c <HAL_RCC_OscConfig+0x628>)
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	4a3a      	ldr	r2, [pc, #232]	; (800521c <HAL_RCC_OscConfig+0x638>)
 8005134:	4013      	ands	r3, r2
 8005136:	0019      	movs	r1, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	431a      	orrs	r2, r3
 8005142:	4b32      	ldr	r3, [pc, #200]	; (800520c <HAL_RCC_OscConfig+0x628>)
 8005144:	430a      	orrs	r2, r1
 8005146:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005148:	4b30      	ldr	r3, [pc, #192]	; (800520c <HAL_RCC_OscConfig+0x628>)
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	4b2f      	ldr	r3, [pc, #188]	; (800520c <HAL_RCC_OscConfig+0x628>)
 800514e:	2180      	movs	r1, #128	; 0x80
 8005150:	0449      	lsls	r1, r1, #17
 8005152:	430a      	orrs	r2, r1
 8005154:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005156:	f7fe fd3d 	bl	8003bd4 <HAL_GetTick>
 800515a:	0003      	movs	r3, r0
 800515c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005160:	f7fe fd38 	bl	8003bd4 <HAL_GetTick>
 8005164:	0002      	movs	r2, r0
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e047      	b.n	8005202 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005172:	4b26      	ldr	r3, [pc, #152]	; (800520c <HAL_RCC_OscConfig+0x628>)
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	2380      	movs	r3, #128	; 0x80
 8005178:	049b      	lsls	r3, r3, #18
 800517a:	4013      	ands	r3, r2
 800517c:	d0f0      	beq.n	8005160 <HAL_RCC_OscConfig+0x57c>
 800517e:	e03f      	b.n	8005200 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005180:	4b22      	ldr	r3, [pc, #136]	; (800520c <HAL_RCC_OscConfig+0x628>)
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	4b21      	ldr	r3, [pc, #132]	; (800520c <HAL_RCC_OscConfig+0x628>)
 8005186:	4924      	ldr	r1, [pc, #144]	; (8005218 <HAL_RCC_OscConfig+0x634>)
 8005188:	400a      	ands	r2, r1
 800518a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800518c:	f7fe fd22 	bl	8003bd4 <HAL_GetTick>
 8005190:	0003      	movs	r3, r0
 8005192:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005194:	e008      	b.n	80051a8 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005196:	f7fe fd1d 	bl	8003bd4 <HAL_GetTick>
 800519a:	0002      	movs	r2, r0
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d901      	bls.n	80051a8 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e02c      	b.n	8005202 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051a8:	4b18      	ldr	r3, [pc, #96]	; (800520c <HAL_RCC_OscConfig+0x628>)
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	2380      	movs	r3, #128	; 0x80
 80051ae:	049b      	lsls	r3, r3, #18
 80051b0:	4013      	ands	r3, r2
 80051b2:	d1f0      	bne.n	8005196 <HAL_RCC_OscConfig+0x5b2>
 80051b4:	e024      	b.n	8005200 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d101      	bne.n	80051c2 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e01f      	b.n	8005202 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80051c2:	4b12      	ldr	r3, [pc, #72]	; (800520c <HAL_RCC_OscConfig+0x628>)
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80051c8:	4b10      	ldr	r3, [pc, #64]	; (800520c <HAL_RCC_OscConfig+0x628>)
 80051ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051cc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	2380      	movs	r3, #128	; 0x80
 80051d2:	025b      	lsls	r3, r3, #9
 80051d4:	401a      	ands	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	429a      	cmp	r2, r3
 80051dc:	d10e      	bne.n	80051fc <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	220f      	movs	r2, #15
 80051e2:	401a      	ands	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d107      	bne.n	80051fc <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	23f0      	movs	r3, #240	; 0xf0
 80051f0:	039b      	lsls	r3, r3, #14
 80051f2:	401a      	ands	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d001      	beq.n	8005200 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e000      	b.n	8005202 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	0018      	movs	r0, r3
 8005204:	46bd      	mov	sp, r7
 8005206:	b008      	add	sp, #32
 8005208:	bd80      	pop	{r7, pc}
 800520a:	46c0      	nop			; (mov r8, r8)
 800520c:	40021000 	.word	0x40021000
 8005210:	00001388 	.word	0x00001388
 8005214:	efffffff 	.word	0xefffffff
 8005218:	feffffff 	.word	0xfeffffff
 800521c:	ffc2ffff 	.word	0xffc2ffff

08005220 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d101      	bne.n	8005234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e0b3      	b.n	800539c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005234:	4b5b      	ldr	r3, [pc, #364]	; (80053a4 <HAL_RCC_ClockConfig+0x184>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2201      	movs	r2, #1
 800523a:	4013      	ands	r3, r2
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	429a      	cmp	r2, r3
 8005240:	d911      	bls.n	8005266 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005242:	4b58      	ldr	r3, [pc, #352]	; (80053a4 <HAL_RCC_ClockConfig+0x184>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2201      	movs	r2, #1
 8005248:	4393      	bics	r3, r2
 800524a:	0019      	movs	r1, r3
 800524c:	4b55      	ldr	r3, [pc, #340]	; (80053a4 <HAL_RCC_ClockConfig+0x184>)
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005254:	4b53      	ldr	r3, [pc, #332]	; (80053a4 <HAL_RCC_ClockConfig+0x184>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2201      	movs	r2, #1
 800525a:	4013      	ands	r3, r2
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	429a      	cmp	r2, r3
 8005260:	d001      	beq.n	8005266 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e09a      	b.n	800539c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2202      	movs	r2, #2
 800526c:	4013      	ands	r3, r2
 800526e:	d015      	beq.n	800529c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2204      	movs	r2, #4
 8005276:	4013      	ands	r3, r2
 8005278:	d006      	beq.n	8005288 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800527a:	4b4b      	ldr	r3, [pc, #300]	; (80053a8 <HAL_RCC_ClockConfig+0x188>)
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	4b4a      	ldr	r3, [pc, #296]	; (80053a8 <HAL_RCC_ClockConfig+0x188>)
 8005280:	21e0      	movs	r1, #224	; 0xe0
 8005282:	00c9      	lsls	r1, r1, #3
 8005284:	430a      	orrs	r2, r1
 8005286:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005288:	4b47      	ldr	r3, [pc, #284]	; (80053a8 <HAL_RCC_ClockConfig+0x188>)
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	22f0      	movs	r2, #240	; 0xf0
 800528e:	4393      	bics	r3, r2
 8005290:	0019      	movs	r1, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	689a      	ldr	r2, [r3, #8]
 8005296:	4b44      	ldr	r3, [pc, #272]	; (80053a8 <HAL_RCC_ClockConfig+0x188>)
 8005298:	430a      	orrs	r2, r1
 800529a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2201      	movs	r2, #1
 80052a2:	4013      	ands	r3, r2
 80052a4:	d040      	beq.n	8005328 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d107      	bne.n	80052be <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ae:	4b3e      	ldr	r3, [pc, #248]	; (80053a8 <HAL_RCC_ClockConfig+0x188>)
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	2380      	movs	r3, #128	; 0x80
 80052b4:	029b      	lsls	r3, r3, #10
 80052b6:	4013      	ands	r3, r2
 80052b8:	d114      	bne.n	80052e4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e06e      	b.n	800539c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d107      	bne.n	80052d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052c6:	4b38      	ldr	r3, [pc, #224]	; (80053a8 <HAL_RCC_ClockConfig+0x188>)
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	2380      	movs	r3, #128	; 0x80
 80052cc:	049b      	lsls	r3, r3, #18
 80052ce:	4013      	ands	r3, r2
 80052d0:	d108      	bne.n	80052e4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e062      	b.n	800539c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052d6:	4b34      	ldr	r3, [pc, #208]	; (80053a8 <HAL_RCC_ClockConfig+0x188>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2202      	movs	r2, #2
 80052dc:	4013      	ands	r3, r2
 80052de:	d101      	bne.n	80052e4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e05b      	b.n	800539c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052e4:	4b30      	ldr	r3, [pc, #192]	; (80053a8 <HAL_RCC_ClockConfig+0x188>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	2203      	movs	r2, #3
 80052ea:	4393      	bics	r3, r2
 80052ec:	0019      	movs	r1, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	4b2d      	ldr	r3, [pc, #180]	; (80053a8 <HAL_RCC_ClockConfig+0x188>)
 80052f4:	430a      	orrs	r2, r1
 80052f6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052f8:	f7fe fc6c 	bl	8003bd4 <HAL_GetTick>
 80052fc:	0003      	movs	r3, r0
 80052fe:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005300:	e009      	b.n	8005316 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005302:	f7fe fc67 	bl	8003bd4 <HAL_GetTick>
 8005306:	0002      	movs	r2, r0
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	4a27      	ldr	r2, [pc, #156]	; (80053ac <HAL_RCC_ClockConfig+0x18c>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d901      	bls.n	8005316 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e042      	b.n	800539c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005316:	4b24      	ldr	r3, [pc, #144]	; (80053a8 <HAL_RCC_ClockConfig+0x188>)
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	220c      	movs	r2, #12
 800531c:	401a      	ands	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	429a      	cmp	r2, r3
 8005326:	d1ec      	bne.n	8005302 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005328:	4b1e      	ldr	r3, [pc, #120]	; (80053a4 <HAL_RCC_ClockConfig+0x184>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2201      	movs	r2, #1
 800532e:	4013      	ands	r3, r2
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d211      	bcs.n	800535a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005336:	4b1b      	ldr	r3, [pc, #108]	; (80053a4 <HAL_RCC_ClockConfig+0x184>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2201      	movs	r2, #1
 800533c:	4393      	bics	r3, r2
 800533e:	0019      	movs	r1, r3
 8005340:	4b18      	ldr	r3, [pc, #96]	; (80053a4 <HAL_RCC_ClockConfig+0x184>)
 8005342:	683a      	ldr	r2, [r7, #0]
 8005344:	430a      	orrs	r2, r1
 8005346:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005348:	4b16      	ldr	r3, [pc, #88]	; (80053a4 <HAL_RCC_ClockConfig+0x184>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2201      	movs	r2, #1
 800534e:	4013      	ands	r3, r2
 8005350:	683a      	ldr	r2, [r7, #0]
 8005352:	429a      	cmp	r2, r3
 8005354:	d001      	beq.n	800535a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e020      	b.n	800539c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2204      	movs	r2, #4
 8005360:	4013      	ands	r3, r2
 8005362:	d009      	beq.n	8005378 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005364:	4b10      	ldr	r3, [pc, #64]	; (80053a8 <HAL_RCC_ClockConfig+0x188>)
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	4a11      	ldr	r2, [pc, #68]	; (80053b0 <HAL_RCC_ClockConfig+0x190>)
 800536a:	4013      	ands	r3, r2
 800536c:	0019      	movs	r1, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68da      	ldr	r2, [r3, #12]
 8005372:	4b0d      	ldr	r3, [pc, #52]	; (80053a8 <HAL_RCC_ClockConfig+0x188>)
 8005374:	430a      	orrs	r2, r1
 8005376:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005378:	f000 f820 	bl	80053bc <HAL_RCC_GetSysClockFreq>
 800537c:	0001      	movs	r1, r0
 800537e:	4b0a      	ldr	r3, [pc, #40]	; (80053a8 <HAL_RCC_ClockConfig+0x188>)
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	091b      	lsrs	r3, r3, #4
 8005384:	220f      	movs	r2, #15
 8005386:	4013      	ands	r3, r2
 8005388:	4a0a      	ldr	r2, [pc, #40]	; (80053b4 <HAL_RCC_ClockConfig+0x194>)
 800538a:	5cd3      	ldrb	r3, [r2, r3]
 800538c:	000a      	movs	r2, r1
 800538e:	40da      	lsrs	r2, r3
 8005390:	4b09      	ldr	r3, [pc, #36]	; (80053b8 <HAL_RCC_ClockConfig+0x198>)
 8005392:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005394:	2003      	movs	r0, #3
 8005396:	f7fe fbd7 	bl	8003b48 <HAL_InitTick>
  
  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	0018      	movs	r0, r3
 800539e:	46bd      	mov	sp, r7
 80053a0:	b004      	add	sp, #16
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	40022000 	.word	0x40022000
 80053a8:	40021000 	.word	0x40021000
 80053ac:	00001388 	.word	0x00001388
 80053b0:	fffff8ff 	.word	0xfffff8ff
 80053b4:	08009134 	.word	0x08009134
 80053b8:	20000428 	.word	0x20000428

080053bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053bc:	b590      	push	{r4, r7, lr}
 80053be:	b08f      	sub	sp, #60	; 0x3c
 80053c0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80053c2:	2314      	movs	r3, #20
 80053c4:	18fb      	adds	r3, r7, r3
 80053c6:	4a2a      	ldr	r2, [pc, #168]	; (8005470 <HAL_RCC_GetSysClockFreq+0xb4>)
 80053c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80053ca:	c313      	stmia	r3!, {r0, r1, r4}
 80053cc:	6812      	ldr	r2, [r2, #0]
 80053ce:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80053d0:	1d3b      	adds	r3, r7, #4
 80053d2:	4a28      	ldr	r2, [pc, #160]	; (8005474 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053d4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80053d6:	c313      	stmia	r3!, {r0, r1, r4}
 80053d8:	6812      	ldr	r2, [r2, #0]
 80053da:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80053dc:	2300      	movs	r3, #0
 80053de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053e0:	2300      	movs	r3, #0
 80053e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80053e4:	2300      	movs	r3, #0
 80053e6:	637b      	str	r3, [r7, #52]	; 0x34
 80053e8:	2300      	movs	r3, #0
 80053ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80053ec:	2300      	movs	r3, #0
 80053ee:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80053f0:	4b21      	ldr	r3, [pc, #132]	; (8005478 <HAL_RCC_GetSysClockFreq+0xbc>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80053f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f8:	220c      	movs	r2, #12
 80053fa:	4013      	ands	r3, r2
 80053fc:	2b04      	cmp	r3, #4
 80053fe:	d002      	beq.n	8005406 <HAL_RCC_GetSysClockFreq+0x4a>
 8005400:	2b08      	cmp	r3, #8
 8005402:	d003      	beq.n	800540c <HAL_RCC_GetSysClockFreq+0x50>
 8005404:	e02c      	b.n	8005460 <HAL_RCC_GetSysClockFreq+0xa4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005406:	4b1d      	ldr	r3, [pc, #116]	; (800547c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005408:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800540a:	e02c      	b.n	8005466 <HAL_RCC_GetSysClockFreq+0xaa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800540c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540e:	0c9b      	lsrs	r3, r3, #18
 8005410:	220f      	movs	r2, #15
 8005412:	4013      	ands	r3, r2
 8005414:	2214      	movs	r2, #20
 8005416:	18ba      	adds	r2, r7, r2
 8005418:	5cd3      	ldrb	r3, [r2, r3]
 800541a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800541c:	4b16      	ldr	r3, [pc, #88]	; (8005478 <HAL_RCC_GetSysClockFreq+0xbc>)
 800541e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005420:	220f      	movs	r2, #15
 8005422:	4013      	ands	r3, r2
 8005424:	1d3a      	adds	r2, r7, #4
 8005426:	5cd3      	ldrb	r3, [r2, r3]
 8005428:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800542a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800542c:	2380      	movs	r3, #128	; 0x80
 800542e:	025b      	lsls	r3, r3, #9
 8005430:	4013      	ands	r3, r2
 8005432:	d009      	beq.n	8005448 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005434:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005436:	4811      	ldr	r0, [pc, #68]	; (800547c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005438:	f7fa fe80 	bl	800013c <__udivsi3>
 800543c:	0003      	movs	r3, r0
 800543e:	001a      	movs	r2, r3
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	4353      	muls	r3, r2
 8005444:	637b      	str	r3, [r7, #52]	; 0x34
 8005446:	e008      	b.n	800545a <HAL_RCC_GetSysClockFreq+0x9e>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005448:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800544a:	480c      	ldr	r0, [pc, #48]	; (800547c <HAL_RCC_GetSysClockFreq+0xc0>)
 800544c:	f7fa fe76 	bl	800013c <__udivsi3>
 8005450:	0003      	movs	r3, r0
 8005452:	001a      	movs	r2, r3
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	4353      	muls	r3, r2
 8005458:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800545a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800545c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800545e:	e002      	b.n	8005466 <HAL_RCC_GetSysClockFreq+0xaa>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005460:	4b06      	ldr	r3, [pc, #24]	; (800547c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005462:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005464:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005468:	0018      	movs	r0, r3
 800546a:	46bd      	mov	sp, r7
 800546c:	b00f      	add	sp, #60	; 0x3c
 800546e:	bd90      	pop	{r4, r7, pc}
 8005470:	08008ad4 	.word	0x08008ad4
 8005474:	08008ae4 	.word	0x08008ae4
 8005478:	40021000 	.word	0x40021000
 800547c:	007a1200 	.word	0x007a1200

08005480 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005488:	2300      	movs	r3, #0
 800548a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800548c:	2300      	movs	r3, #0
 800548e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	2380      	movs	r3, #128	; 0x80
 8005496:	025b      	lsls	r3, r3, #9
 8005498:	4013      	ands	r3, r2
 800549a:	d100      	bne.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800549c:	e08e      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800549e:	2017      	movs	r0, #23
 80054a0:	183b      	adds	r3, r7, r0
 80054a2:	2200      	movs	r2, #0
 80054a4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054a6:	4b57      	ldr	r3, [pc, #348]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80054a8:	69da      	ldr	r2, [r3, #28]
 80054aa:	2380      	movs	r3, #128	; 0x80
 80054ac:	055b      	lsls	r3, r3, #21
 80054ae:	4013      	ands	r3, r2
 80054b0:	d110      	bne.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80054b2:	4b54      	ldr	r3, [pc, #336]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80054b4:	69da      	ldr	r2, [r3, #28]
 80054b6:	4b53      	ldr	r3, [pc, #332]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80054b8:	2180      	movs	r1, #128	; 0x80
 80054ba:	0549      	lsls	r1, r1, #21
 80054bc:	430a      	orrs	r2, r1
 80054be:	61da      	str	r2, [r3, #28]
 80054c0:	4b50      	ldr	r3, [pc, #320]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80054c2:	69da      	ldr	r2, [r3, #28]
 80054c4:	2380      	movs	r3, #128	; 0x80
 80054c6:	055b      	lsls	r3, r3, #21
 80054c8:	4013      	ands	r3, r2
 80054ca:	60bb      	str	r3, [r7, #8]
 80054cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054ce:	183b      	adds	r3, r7, r0
 80054d0:	2201      	movs	r2, #1
 80054d2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054d4:	4b4c      	ldr	r3, [pc, #304]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	2380      	movs	r3, #128	; 0x80
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	4013      	ands	r3, r2
 80054de:	d11a      	bne.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054e0:	4b49      	ldr	r3, [pc, #292]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	4b48      	ldr	r3, [pc, #288]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80054e6:	2180      	movs	r1, #128	; 0x80
 80054e8:	0049      	lsls	r1, r1, #1
 80054ea:	430a      	orrs	r2, r1
 80054ec:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054ee:	f7fe fb71 	bl	8003bd4 <HAL_GetTick>
 80054f2:	0003      	movs	r3, r0
 80054f4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f6:	e008      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054f8:	f7fe fb6c 	bl	8003bd4 <HAL_GetTick>
 80054fc:	0002      	movs	r2, r0
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b64      	cmp	r3, #100	; 0x64
 8005504:	d901      	bls.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e077      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800550a:	4b3f      	ldr	r3, [pc, #252]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	2380      	movs	r3, #128	; 0x80
 8005510:	005b      	lsls	r3, r3, #1
 8005512:	4013      	ands	r3, r2
 8005514:	d0f0      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005516:	4b3b      	ldr	r3, [pc, #236]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005518:	6a1a      	ldr	r2, [r3, #32]
 800551a:	23c0      	movs	r3, #192	; 0xc0
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4013      	ands	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d034      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	23c0      	movs	r3, #192	; 0xc0
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4013      	ands	r3, r2
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	429a      	cmp	r2, r3
 8005536:	d02c      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005538:	4b32      	ldr	r3, [pc, #200]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	4a33      	ldr	r2, [pc, #204]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800553e:	4013      	ands	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005542:	4b30      	ldr	r3, [pc, #192]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005544:	6a1a      	ldr	r2, [r3, #32]
 8005546:	4b2f      	ldr	r3, [pc, #188]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005548:	2180      	movs	r1, #128	; 0x80
 800554a:	0249      	lsls	r1, r1, #9
 800554c:	430a      	orrs	r2, r1
 800554e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005550:	4b2c      	ldr	r3, [pc, #176]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005552:	6a1a      	ldr	r2, [r3, #32]
 8005554:	4b2b      	ldr	r3, [pc, #172]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005556:	492e      	ldr	r1, [pc, #184]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005558:	400a      	ands	r2, r1
 800555a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800555c:	4b29      	ldr	r3, [pc, #164]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2201      	movs	r2, #1
 8005566:	4013      	ands	r3, r2
 8005568:	d013      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800556a:	f7fe fb33 	bl	8003bd4 <HAL_GetTick>
 800556e:	0003      	movs	r3, r0
 8005570:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005572:	e009      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005574:	f7fe fb2e 	bl	8003bd4 <HAL_GetTick>
 8005578:	0002      	movs	r2, r0
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	4a25      	ldr	r2, [pc, #148]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d901      	bls.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e038      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005588:	4b1e      	ldr	r3, [pc, #120]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	2202      	movs	r2, #2
 800558e:	4013      	ands	r3, r2
 8005590:	d0f0      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005592:	4b1c      	ldr	r3, [pc, #112]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	4a1d      	ldr	r2, [pc, #116]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005598:	4013      	ands	r3, r2
 800559a:	0019      	movs	r1, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	4b18      	ldr	r3, [pc, #96]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80055a2:	430a      	orrs	r2, r1
 80055a4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80055a6:	2317      	movs	r3, #23
 80055a8:	18fb      	adds	r3, r7, r3
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d105      	bne.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055b0:	4b14      	ldr	r3, [pc, #80]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80055b2:	69da      	ldr	r2, [r3, #28]
 80055b4:	4b13      	ldr	r3, [pc, #76]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80055b6:	4918      	ldr	r1, [pc, #96]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80055b8:	400a      	ands	r2, r1
 80055ba:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2201      	movs	r2, #1
 80055c2:	4013      	ands	r3, r2
 80055c4:	d009      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055c6:	4b0f      	ldr	r3, [pc, #60]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80055c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ca:	2203      	movs	r2, #3
 80055cc:	4393      	bics	r3, r2
 80055ce:	0019      	movs	r1, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	4b0b      	ldr	r3, [pc, #44]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80055d6:	430a      	orrs	r2, r1
 80055d8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2220      	movs	r2, #32
 80055e0:	4013      	ands	r3, r2
 80055e2:	d009      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055e4:	4b07      	ldr	r3, [pc, #28]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80055e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e8:	2210      	movs	r2, #16
 80055ea:	4393      	bics	r3, r2
 80055ec:	0019      	movs	r1, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	4b04      	ldr	r3, [pc, #16]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80055f4:	430a      	orrs	r2, r1
 80055f6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	0018      	movs	r0, r3
 80055fc:	46bd      	mov	sp, r7
 80055fe:	b006      	add	sp, #24
 8005600:	bd80      	pop	{r7, pc}
 8005602:	46c0      	nop			; (mov r8, r8)
 8005604:	40021000 	.word	0x40021000
 8005608:	40007000 	.word	0x40007000
 800560c:	fffffcff 	.word	0xfffffcff
 8005610:	fffeffff 	.word	0xfffeffff
 8005614:	00001388 	.word	0x00001388
 8005618:	efffffff 	.word	0xefffffff

0800561c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e042      	b.n	80056b4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	223d      	movs	r2, #61	; 0x3d
 8005632:	5c9b      	ldrb	r3, [r3, r2]
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d107      	bne.n	800564a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	223c      	movs	r2, #60	; 0x3c
 800563e:	2100      	movs	r1, #0
 8005640:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	0018      	movs	r0, r3
 8005646:	f7fe fa1b 	bl	8003a80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	223d      	movs	r2, #61	; 0x3d
 800564e:	2102      	movs	r1, #2
 8005650:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	3304      	adds	r3, #4
 800565a:	0019      	movs	r1, r3
 800565c:	0010      	movs	r0, r2
 800565e:	f000 f9dd 	bl	8005a1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2246      	movs	r2, #70	; 0x46
 8005666:	2101      	movs	r1, #1
 8005668:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	223e      	movs	r2, #62	; 0x3e
 800566e:	2101      	movs	r1, #1
 8005670:	5499      	strb	r1, [r3, r2]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	223f      	movs	r2, #63	; 0x3f
 8005676:	2101      	movs	r1, #1
 8005678:	5499      	strb	r1, [r3, r2]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2240      	movs	r2, #64	; 0x40
 800567e:	2101      	movs	r1, #1
 8005680:	5499      	strb	r1, [r3, r2]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2241      	movs	r2, #65	; 0x41
 8005686:	2101      	movs	r1, #1
 8005688:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2242      	movs	r2, #66	; 0x42
 800568e:	2101      	movs	r1, #1
 8005690:	5499      	strb	r1, [r3, r2]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2243      	movs	r2, #67	; 0x43
 8005696:	2101      	movs	r1, #1
 8005698:	5499      	strb	r1, [r3, r2]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2244      	movs	r2, #68	; 0x44
 800569e:	2101      	movs	r1, #1
 80056a0:	5499      	strb	r1, [r3, r2]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2245      	movs	r2, #69	; 0x45
 80056a6:	2101      	movs	r1, #1
 80056a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	223d      	movs	r2, #61	; 0x3d
 80056ae:	2101      	movs	r1, #1
 80056b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	0018      	movs	r0, r3
 80056b6:	46bd      	mov	sp, r7
 80056b8:	b002      	add	sp, #8
 80056ba:	bd80      	pop	{r7, pc}

080056bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	223d      	movs	r2, #61	; 0x3d
 80056c8:	5c9b      	ldrb	r3, [r3, r2]
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d001      	beq.n	80056d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e035      	b.n	8005740 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	223d      	movs	r2, #61	; 0x3d
 80056d8:	2102      	movs	r1, #2
 80056da:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68da      	ldr	r2, [r3, #12]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2101      	movs	r1, #1
 80056e8:	430a      	orrs	r2, r1
 80056ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a15      	ldr	r2, [pc, #84]	; (8005748 <HAL_TIM_Base_Start_IT+0x8c>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d009      	beq.n	800570a <HAL_TIM_Base_Start_IT+0x4e>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a14      	ldr	r2, [pc, #80]	; (800574c <HAL_TIM_Base_Start_IT+0x90>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d004      	beq.n	800570a <HAL_TIM_Base_Start_IT+0x4e>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a12      	ldr	r2, [pc, #72]	; (8005750 <HAL_TIM_Base_Start_IT+0x94>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d111      	bne.n	800572e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	2207      	movs	r2, #7
 8005712:	4013      	ands	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2b06      	cmp	r3, #6
 800571a:	d010      	beq.n	800573e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2101      	movs	r1, #1
 8005728:	430a      	orrs	r2, r1
 800572a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800572c:	e007      	b.n	800573e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2101      	movs	r1, #1
 800573a:	430a      	orrs	r2, r1
 800573c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	0018      	movs	r0, r3
 8005742:	46bd      	mov	sp, r7
 8005744:	b004      	add	sp, #16
 8005746:	bd80      	pop	{r7, pc}
 8005748:	40012c00 	.word	0x40012c00
 800574c:	40000400 	.word	0x40000400
 8005750:	40014000 	.word	0x40014000

08005754 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68da      	ldr	r2, [r3, #12]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2101      	movs	r1, #1
 8005768:	438a      	bics	r2, r1
 800576a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	4a0d      	ldr	r2, [pc, #52]	; (80057a8 <HAL_TIM_Base_Stop_IT+0x54>)
 8005774:	4013      	ands	r3, r2
 8005776:	d10d      	bne.n	8005794 <HAL_TIM_Base_Stop_IT+0x40>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	4a0b      	ldr	r2, [pc, #44]	; (80057ac <HAL_TIM_Base_Stop_IT+0x58>)
 8005780:	4013      	ands	r3, r2
 8005782:	d107      	bne.n	8005794 <HAL_TIM_Base_Stop_IT+0x40>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2101      	movs	r1, #1
 8005790:	438a      	bics	r2, r1
 8005792:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	223d      	movs	r2, #61	; 0x3d
 8005798:	2101      	movs	r1, #1
 800579a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	0018      	movs	r0, r3
 80057a0:	46bd      	mov	sp, r7
 80057a2:	b002      	add	sp, #8
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	46c0      	nop			; (mov r8, r8)
 80057a8:	00001111 	.word	0x00001111
 80057ac:	00000444 	.word	0x00000444

080057b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	2202      	movs	r2, #2
 80057c0:	4013      	ands	r3, r2
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d124      	bne.n	8005810 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	2202      	movs	r2, #2
 80057ce:	4013      	ands	r3, r2
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d11d      	bne.n	8005810 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2203      	movs	r2, #3
 80057da:	4252      	negs	r2, r2
 80057dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	2203      	movs	r2, #3
 80057ec:	4013      	ands	r3, r2
 80057ee:	d004      	beq.n	80057fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	0018      	movs	r0, r3
 80057f4:	f000 f8fa 	bl	80059ec <HAL_TIM_IC_CaptureCallback>
 80057f8:	e007      	b.n	800580a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	0018      	movs	r0, r3
 80057fe:	f000 f8ed 	bl	80059dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	0018      	movs	r0, r3
 8005806:	f000 f8f9 	bl	80059fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	2204      	movs	r2, #4
 8005818:	4013      	ands	r3, r2
 800581a:	2b04      	cmp	r3, #4
 800581c:	d125      	bne.n	800586a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	2204      	movs	r2, #4
 8005826:	4013      	ands	r3, r2
 8005828:	2b04      	cmp	r3, #4
 800582a:	d11e      	bne.n	800586a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2205      	movs	r2, #5
 8005832:	4252      	negs	r2, r2
 8005834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2202      	movs	r2, #2
 800583a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	699a      	ldr	r2, [r3, #24]
 8005842:	23c0      	movs	r3, #192	; 0xc0
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4013      	ands	r3, r2
 8005848:	d004      	beq.n	8005854 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	0018      	movs	r0, r3
 800584e:	f000 f8cd 	bl	80059ec <HAL_TIM_IC_CaptureCallback>
 8005852:	e007      	b.n	8005864 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	0018      	movs	r0, r3
 8005858:	f000 f8c0 	bl	80059dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	0018      	movs	r0, r3
 8005860:	f000 f8cc 	bl	80059fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	2208      	movs	r2, #8
 8005872:	4013      	ands	r3, r2
 8005874:	2b08      	cmp	r3, #8
 8005876:	d124      	bne.n	80058c2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	2208      	movs	r2, #8
 8005880:	4013      	ands	r3, r2
 8005882:	2b08      	cmp	r3, #8
 8005884:	d11d      	bne.n	80058c2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2209      	movs	r2, #9
 800588c:	4252      	negs	r2, r2
 800588e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2204      	movs	r2, #4
 8005894:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	2203      	movs	r2, #3
 800589e:	4013      	ands	r3, r2
 80058a0:	d004      	beq.n	80058ac <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	0018      	movs	r0, r3
 80058a6:	f000 f8a1 	bl	80059ec <HAL_TIM_IC_CaptureCallback>
 80058aa:	e007      	b.n	80058bc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	0018      	movs	r0, r3
 80058b0:	f000 f894 	bl	80059dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	0018      	movs	r0, r3
 80058b8:	f000 f8a0 	bl	80059fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	2210      	movs	r2, #16
 80058ca:	4013      	ands	r3, r2
 80058cc:	2b10      	cmp	r3, #16
 80058ce:	d125      	bne.n	800591c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	2210      	movs	r2, #16
 80058d8:	4013      	ands	r3, r2
 80058da:	2b10      	cmp	r3, #16
 80058dc:	d11e      	bne.n	800591c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2211      	movs	r2, #17
 80058e4:	4252      	negs	r2, r2
 80058e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2208      	movs	r2, #8
 80058ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	69da      	ldr	r2, [r3, #28]
 80058f4:	23c0      	movs	r3, #192	; 0xc0
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4013      	ands	r3, r2
 80058fa:	d004      	beq.n	8005906 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	0018      	movs	r0, r3
 8005900:	f000 f874 	bl	80059ec <HAL_TIM_IC_CaptureCallback>
 8005904:	e007      	b.n	8005916 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	0018      	movs	r0, r3
 800590a:	f000 f867 	bl	80059dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	0018      	movs	r0, r3
 8005912:	f000 f873 	bl	80059fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	2201      	movs	r2, #1
 8005924:	4013      	ands	r3, r2
 8005926:	2b01      	cmp	r3, #1
 8005928:	d10f      	bne.n	800594a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	2201      	movs	r2, #1
 8005932:	4013      	ands	r3, r2
 8005934:	2b01      	cmp	r3, #1
 8005936:	d108      	bne.n	800594a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2202      	movs	r2, #2
 800593e:	4252      	negs	r2, r2
 8005940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	0018      	movs	r0, r3
 8005946:	f7fd f9d9 	bl	8002cfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	2280      	movs	r2, #128	; 0x80
 8005952:	4013      	ands	r3, r2
 8005954:	2b80      	cmp	r3, #128	; 0x80
 8005956:	d10f      	bne.n	8005978 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	2280      	movs	r2, #128	; 0x80
 8005960:	4013      	ands	r3, r2
 8005962:	2b80      	cmp	r3, #128	; 0x80
 8005964:	d108      	bne.n	8005978 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2281      	movs	r2, #129	; 0x81
 800596c:	4252      	negs	r2, r2
 800596e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	0018      	movs	r0, r3
 8005974:	f000 f8d0 	bl	8005b18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	2240      	movs	r2, #64	; 0x40
 8005980:	4013      	ands	r3, r2
 8005982:	2b40      	cmp	r3, #64	; 0x40
 8005984:	d10f      	bne.n	80059a6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	2240      	movs	r2, #64	; 0x40
 800598e:	4013      	ands	r3, r2
 8005990:	2b40      	cmp	r3, #64	; 0x40
 8005992:	d108      	bne.n	80059a6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2241      	movs	r2, #65	; 0x41
 800599a:	4252      	negs	r2, r2
 800599c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	0018      	movs	r0, r3
 80059a2:	f000 f833 	bl	8005a0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	2220      	movs	r2, #32
 80059ae:	4013      	ands	r3, r2
 80059b0:	2b20      	cmp	r3, #32
 80059b2:	d10f      	bne.n	80059d4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	2220      	movs	r2, #32
 80059bc:	4013      	ands	r3, r2
 80059be:	2b20      	cmp	r3, #32
 80059c0:	d108      	bne.n	80059d4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2221      	movs	r2, #33	; 0x21
 80059c8:	4252      	negs	r2, r2
 80059ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	0018      	movs	r0, r3
 80059d0:	f000 f89a 	bl	8005b08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059d4:	46c0      	nop			; (mov r8, r8)
 80059d6:	46bd      	mov	sp, r7
 80059d8:	b002      	add	sp, #8
 80059da:	bd80      	pop	{r7, pc}

080059dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059e4:	46c0      	nop			; (mov r8, r8)
 80059e6:	46bd      	mov	sp, r7
 80059e8:	b002      	add	sp, #8
 80059ea:	bd80      	pop	{r7, pc}

080059ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059f4:	46c0      	nop			; (mov r8, r8)
 80059f6:	46bd      	mov	sp, r7
 80059f8:	b002      	add	sp, #8
 80059fa:	bd80      	pop	{r7, pc}

080059fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a04:	46c0      	nop			; (mov r8, r8)
 8005a06:	46bd      	mov	sp, r7
 8005a08:	b002      	add	sp, #8
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a14:	46c0      	nop			; (mov r8, r8)
 8005a16:	46bd      	mov	sp, r7
 8005a18:	b002      	add	sp, #8
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a2f      	ldr	r2, [pc, #188]	; (8005aec <TIM_Base_SetConfig+0xd0>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d003      	beq.n	8005a3c <TIM_Base_SetConfig+0x20>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a2e      	ldr	r2, [pc, #184]	; (8005af0 <TIM_Base_SetConfig+0xd4>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d108      	bne.n	8005a4e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2270      	movs	r2, #112	; 0x70
 8005a40:	4393      	bics	r3, r2
 8005a42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a26      	ldr	r2, [pc, #152]	; (8005aec <TIM_Base_SetConfig+0xd0>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d013      	beq.n	8005a7e <TIM_Base_SetConfig+0x62>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a25      	ldr	r2, [pc, #148]	; (8005af0 <TIM_Base_SetConfig+0xd4>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d00f      	beq.n	8005a7e <TIM_Base_SetConfig+0x62>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a24      	ldr	r2, [pc, #144]	; (8005af4 <TIM_Base_SetConfig+0xd8>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d00b      	beq.n	8005a7e <TIM_Base_SetConfig+0x62>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a23      	ldr	r2, [pc, #140]	; (8005af8 <TIM_Base_SetConfig+0xdc>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d007      	beq.n	8005a7e <TIM_Base_SetConfig+0x62>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a22      	ldr	r2, [pc, #136]	; (8005afc <TIM_Base_SetConfig+0xe0>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d003      	beq.n	8005a7e <TIM_Base_SetConfig+0x62>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a21      	ldr	r2, [pc, #132]	; (8005b00 <TIM_Base_SetConfig+0xe4>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d108      	bne.n	8005a90 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	4a20      	ldr	r2, [pc, #128]	; (8005b04 <TIM_Base_SetConfig+0xe8>)
 8005a82:	4013      	ands	r3, r2
 8005a84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2280      	movs	r2, #128	; 0x80
 8005a94:	4393      	bics	r3, r2
 8005a96:	001a      	movs	r2, r3
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	689a      	ldr	r2, [r3, #8]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a0c      	ldr	r2, [pc, #48]	; (8005aec <TIM_Base_SetConfig+0xd0>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d00b      	beq.n	8005ad6 <TIM_Base_SetConfig+0xba>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a0d      	ldr	r2, [pc, #52]	; (8005af8 <TIM_Base_SetConfig+0xdc>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d007      	beq.n	8005ad6 <TIM_Base_SetConfig+0xba>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a0c      	ldr	r2, [pc, #48]	; (8005afc <TIM_Base_SetConfig+0xe0>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d003      	beq.n	8005ad6 <TIM_Base_SetConfig+0xba>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a0b      	ldr	r2, [pc, #44]	; (8005b00 <TIM_Base_SetConfig+0xe4>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d103      	bne.n	8005ade <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	691a      	ldr	r2, [r3, #16]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	615a      	str	r2, [r3, #20]
}
 8005ae4:	46c0      	nop			; (mov r8, r8)
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	b004      	add	sp, #16
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	40012c00 	.word	0x40012c00
 8005af0:	40000400 	.word	0x40000400
 8005af4:	40002000 	.word	0x40002000
 8005af8:	40014000 	.word	0x40014000
 8005afc:	40014400 	.word	0x40014400
 8005b00:	40014800 	.word	0x40014800
 8005b04:	fffffcff 	.word	0xfffffcff

08005b08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b10:	46c0      	nop			; (mov r8, r8)
 8005b12:	46bd      	mov	sp, r7
 8005b14:	b002      	add	sp, #8
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b20:	46c0      	nop			; (mov r8, r8)
 8005b22:	46bd      	mov	sp, r7
 8005b24:	b002      	add	sp, #8
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <__errno>:
 8005b28:	4b01      	ldr	r3, [pc, #4]	; (8005b30 <__errno+0x8>)
 8005b2a:	6818      	ldr	r0, [r3, #0]
 8005b2c:	4770      	bx	lr
 8005b2e:	46c0      	nop			; (mov r8, r8)
 8005b30:	20000434 	.word	0x20000434

08005b34 <__libc_init_array>:
 8005b34:	b570      	push	{r4, r5, r6, lr}
 8005b36:	2600      	movs	r6, #0
 8005b38:	4d0c      	ldr	r5, [pc, #48]	; (8005b6c <__libc_init_array+0x38>)
 8005b3a:	4c0d      	ldr	r4, [pc, #52]	; (8005b70 <__libc_init_array+0x3c>)
 8005b3c:	1b64      	subs	r4, r4, r5
 8005b3e:	10a4      	asrs	r4, r4, #2
 8005b40:	42a6      	cmp	r6, r4
 8005b42:	d109      	bne.n	8005b58 <__libc_init_array+0x24>
 8005b44:	2600      	movs	r6, #0
 8005b46:	f002 ff6d 	bl	8008a24 <_init>
 8005b4a:	4d0a      	ldr	r5, [pc, #40]	; (8005b74 <__libc_init_array+0x40>)
 8005b4c:	4c0a      	ldr	r4, [pc, #40]	; (8005b78 <__libc_init_array+0x44>)
 8005b4e:	1b64      	subs	r4, r4, r5
 8005b50:	10a4      	asrs	r4, r4, #2
 8005b52:	42a6      	cmp	r6, r4
 8005b54:	d105      	bne.n	8005b62 <__libc_init_array+0x2e>
 8005b56:	bd70      	pop	{r4, r5, r6, pc}
 8005b58:	00b3      	lsls	r3, r6, #2
 8005b5a:	58eb      	ldr	r3, [r5, r3]
 8005b5c:	4798      	blx	r3
 8005b5e:	3601      	adds	r6, #1
 8005b60:	e7ee      	b.n	8005b40 <__libc_init_array+0xc>
 8005b62:	00b3      	lsls	r3, r6, #2
 8005b64:	58eb      	ldr	r3, [r5, r3]
 8005b66:	4798      	blx	r3
 8005b68:	3601      	adds	r6, #1
 8005b6a:	e7f2      	b.n	8005b52 <__libc_init_array+0x1e>
 8005b6c:	08009524 	.word	0x08009524
 8005b70:	08009524 	.word	0x08009524
 8005b74:	08009524 	.word	0x08009524
 8005b78:	08009528 	.word	0x08009528

08005b7c <memset>:
 8005b7c:	0003      	movs	r3, r0
 8005b7e:	1882      	adds	r2, r0, r2
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d100      	bne.n	8005b86 <memset+0xa>
 8005b84:	4770      	bx	lr
 8005b86:	7019      	strb	r1, [r3, #0]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	e7f9      	b.n	8005b80 <memset+0x4>

08005b8c <__cvt>:
 8005b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b8e:	001e      	movs	r6, r3
 8005b90:	2300      	movs	r3, #0
 8005b92:	0014      	movs	r4, r2
 8005b94:	b08b      	sub	sp, #44	; 0x2c
 8005b96:	429e      	cmp	r6, r3
 8005b98:	da04      	bge.n	8005ba4 <__cvt+0x18>
 8005b9a:	2180      	movs	r1, #128	; 0x80
 8005b9c:	0609      	lsls	r1, r1, #24
 8005b9e:	1873      	adds	r3, r6, r1
 8005ba0:	001e      	movs	r6, r3
 8005ba2:	232d      	movs	r3, #45	; 0x2d
 8005ba4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ba6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005ba8:	7013      	strb	r3, [r2, #0]
 8005baa:	2320      	movs	r3, #32
 8005bac:	2203      	movs	r2, #3
 8005bae:	439f      	bics	r7, r3
 8005bb0:	2f46      	cmp	r7, #70	; 0x46
 8005bb2:	d007      	beq.n	8005bc4 <__cvt+0x38>
 8005bb4:	003b      	movs	r3, r7
 8005bb6:	3b45      	subs	r3, #69	; 0x45
 8005bb8:	4259      	negs	r1, r3
 8005bba:	414b      	adcs	r3, r1
 8005bbc:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005bbe:	3a01      	subs	r2, #1
 8005bc0:	18cb      	adds	r3, r1, r3
 8005bc2:	9310      	str	r3, [sp, #64]	; 0x40
 8005bc4:	ab09      	add	r3, sp, #36	; 0x24
 8005bc6:	9304      	str	r3, [sp, #16]
 8005bc8:	ab08      	add	r3, sp, #32
 8005bca:	9303      	str	r3, [sp, #12]
 8005bcc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005bce:	9200      	str	r2, [sp, #0]
 8005bd0:	9302      	str	r3, [sp, #8]
 8005bd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005bd4:	0022      	movs	r2, r4
 8005bd6:	9301      	str	r3, [sp, #4]
 8005bd8:	0033      	movs	r3, r6
 8005bda:	f000 fcfd 	bl	80065d8 <_dtoa_r>
 8005bde:	0005      	movs	r5, r0
 8005be0:	2f47      	cmp	r7, #71	; 0x47
 8005be2:	d102      	bne.n	8005bea <__cvt+0x5e>
 8005be4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005be6:	07db      	lsls	r3, r3, #31
 8005be8:	d528      	bpl.n	8005c3c <__cvt+0xb0>
 8005bea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005bec:	18eb      	adds	r3, r5, r3
 8005bee:	9307      	str	r3, [sp, #28]
 8005bf0:	2f46      	cmp	r7, #70	; 0x46
 8005bf2:	d114      	bne.n	8005c1e <__cvt+0x92>
 8005bf4:	782b      	ldrb	r3, [r5, #0]
 8005bf6:	2b30      	cmp	r3, #48	; 0x30
 8005bf8:	d10c      	bne.n	8005c14 <__cvt+0x88>
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	0020      	movs	r0, r4
 8005c00:	0031      	movs	r1, r6
 8005c02:	f7fa fc21 	bl	8000448 <__aeabi_dcmpeq>
 8005c06:	2800      	cmp	r0, #0
 8005c08:	d104      	bne.n	8005c14 <__cvt+0x88>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005c0e:	1a9b      	subs	r3, r3, r2
 8005c10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005c12:	6013      	str	r3, [r2, #0]
 8005c14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005c16:	9a07      	ldr	r2, [sp, #28]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	18d3      	adds	r3, r2, r3
 8005c1c:	9307      	str	r3, [sp, #28]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	2300      	movs	r3, #0
 8005c22:	0020      	movs	r0, r4
 8005c24:	0031      	movs	r1, r6
 8005c26:	f7fa fc0f 	bl	8000448 <__aeabi_dcmpeq>
 8005c2a:	2800      	cmp	r0, #0
 8005c2c:	d001      	beq.n	8005c32 <__cvt+0xa6>
 8005c2e:	9b07      	ldr	r3, [sp, #28]
 8005c30:	9309      	str	r3, [sp, #36]	; 0x24
 8005c32:	2230      	movs	r2, #48	; 0x30
 8005c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c36:	9907      	ldr	r1, [sp, #28]
 8005c38:	428b      	cmp	r3, r1
 8005c3a:	d306      	bcc.n	8005c4a <__cvt+0xbe>
 8005c3c:	0028      	movs	r0, r5
 8005c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c40:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005c42:	1b5b      	subs	r3, r3, r5
 8005c44:	6013      	str	r3, [r2, #0]
 8005c46:	b00b      	add	sp, #44	; 0x2c
 8005c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c4a:	1c59      	adds	r1, r3, #1
 8005c4c:	9109      	str	r1, [sp, #36]	; 0x24
 8005c4e:	701a      	strb	r2, [r3, #0]
 8005c50:	e7f0      	b.n	8005c34 <__cvt+0xa8>

08005c52 <__exponent>:
 8005c52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c54:	1c83      	adds	r3, r0, #2
 8005c56:	b087      	sub	sp, #28
 8005c58:	9303      	str	r3, [sp, #12]
 8005c5a:	0005      	movs	r5, r0
 8005c5c:	000c      	movs	r4, r1
 8005c5e:	232b      	movs	r3, #43	; 0x2b
 8005c60:	7002      	strb	r2, [r0, #0]
 8005c62:	2900      	cmp	r1, #0
 8005c64:	da01      	bge.n	8005c6a <__exponent+0x18>
 8005c66:	424c      	negs	r4, r1
 8005c68:	3302      	adds	r3, #2
 8005c6a:	706b      	strb	r3, [r5, #1]
 8005c6c:	2c09      	cmp	r4, #9
 8005c6e:	dd31      	ble.n	8005cd4 <__exponent+0x82>
 8005c70:	270a      	movs	r7, #10
 8005c72:	ab04      	add	r3, sp, #16
 8005c74:	1dde      	adds	r6, r3, #7
 8005c76:	0020      	movs	r0, r4
 8005c78:	0039      	movs	r1, r7
 8005c7a:	9601      	str	r6, [sp, #4]
 8005c7c:	f7fa fbce 	bl	800041c <__aeabi_idivmod>
 8005c80:	3e01      	subs	r6, #1
 8005c82:	3130      	adds	r1, #48	; 0x30
 8005c84:	0020      	movs	r0, r4
 8005c86:	7031      	strb	r1, [r6, #0]
 8005c88:	0039      	movs	r1, r7
 8005c8a:	9402      	str	r4, [sp, #8]
 8005c8c:	f7fa fae0 	bl	8000250 <__divsi3>
 8005c90:	9b02      	ldr	r3, [sp, #8]
 8005c92:	0004      	movs	r4, r0
 8005c94:	2b63      	cmp	r3, #99	; 0x63
 8005c96:	dcee      	bgt.n	8005c76 <__exponent+0x24>
 8005c98:	9b01      	ldr	r3, [sp, #4]
 8005c9a:	3430      	adds	r4, #48	; 0x30
 8005c9c:	1e9a      	subs	r2, r3, #2
 8005c9e:	0013      	movs	r3, r2
 8005ca0:	9903      	ldr	r1, [sp, #12]
 8005ca2:	7014      	strb	r4, [r2, #0]
 8005ca4:	a804      	add	r0, sp, #16
 8005ca6:	3007      	adds	r0, #7
 8005ca8:	4298      	cmp	r0, r3
 8005caa:	d80e      	bhi.n	8005cca <__exponent+0x78>
 8005cac:	ab04      	add	r3, sp, #16
 8005cae:	3307      	adds	r3, #7
 8005cb0:	2000      	movs	r0, #0
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d804      	bhi.n	8005cc0 <__exponent+0x6e>
 8005cb6:	ab04      	add	r3, sp, #16
 8005cb8:	3009      	adds	r0, #9
 8005cba:	18c0      	adds	r0, r0, r3
 8005cbc:	9b01      	ldr	r3, [sp, #4]
 8005cbe:	1ac0      	subs	r0, r0, r3
 8005cc0:	9b03      	ldr	r3, [sp, #12]
 8005cc2:	1818      	adds	r0, r3, r0
 8005cc4:	1b40      	subs	r0, r0, r5
 8005cc6:	b007      	add	sp, #28
 8005cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cca:	7818      	ldrb	r0, [r3, #0]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	7008      	strb	r0, [r1, #0]
 8005cd0:	3101      	adds	r1, #1
 8005cd2:	e7e7      	b.n	8005ca4 <__exponent+0x52>
 8005cd4:	2330      	movs	r3, #48	; 0x30
 8005cd6:	18e4      	adds	r4, r4, r3
 8005cd8:	70ab      	strb	r3, [r5, #2]
 8005cda:	1d28      	adds	r0, r5, #4
 8005cdc:	70ec      	strb	r4, [r5, #3]
 8005cde:	e7f1      	b.n	8005cc4 <__exponent+0x72>

08005ce0 <_printf_float>:
 8005ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ce2:	b095      	sub	sp, #84	; 0x54
 8005ce4:	000c      	movs	r4, r1
 8005ce6:	9208      	str	r2, [sp, #32]
 8005ce8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8005cea:	9309      	str	r3, [sp, #36]	; 0x24
 8005cec:	0007      	movs	r7, r0
 8005cee:	f001 fa91 	bl	8007214 <_localeconv_r>
 8005cf2:	6803      	ldr	r3, [r0, #0]
 8005cf4:	0018      	movs	r0, r3
 8005cf6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cf8:	f7fa fa04 	bl	8000104 <strlen>
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	9312      	str	r3, [sp, #72]	; 0x48
 8005d00:	7e23      	ldrb	r3, [r4, #24]
 8005d02:	2207      	movs	r2, #7
 8005d04:	001e      	movs	r6, r3
 8005d06:	6823      	ldr	r3, [r4, #0]
 8005d08:	900d      	str	r0, [sp, #52]	; 0x34
 8005d0a:	930c      	str	r3, [sp, #48]	; 0x30
 8005d0c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005d0e:	682b      	ldr	r3, [r5, #0]
 8005d10:	05c9      	lsls	r1, r1, #23
 8005d12:	d547      	bpl.n	8005da4 <_printf_float+0xc4>
 8005d14:	189b      	adds	r3, r3, r2
 8005d16:	4393      	bics	r3, r2
 8005d18:	001a      	movs	r2, r3
 8005d1a:	3208      	adds	r2, #8
 8005d1c:	602a      	str	r2, [r5, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	64a2      	str	r2, [r4, #72]	; 0x48
 8005d24:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005d26:	2201      	movs	r2, #1
 8005d28:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005d2a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8005d2c:	930a      	str	r3, [sp, #40]	; 0x28
 8005d2e:	006b      	lsls	r3, r5, #1
 8005d30:	085b      	lsrs	r3, r3, #1
 8005d32:	930e      	str	r3, [sp, #56]	; 0x38
 8005d34:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005d36:	4ba8      	ldr	r3, [pc, #672]	; (8005fd8 <_printf_float+0x2f8>)
 8005d38:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005d3a:	4252      	negs	r2, r2
 8005d3c:	f7fc fb82 	bl	8002444 <__aeabi_dcmpun>
 8005d40:	2800      	cmp	r0, #0
 8005d42:	d131      	bne.n	8005da8 <_printf_float+0xc8>
 8005d44:	2201      	movs	r2, #1
 8005d46:	4ba4      	ldr	r3, [pc, #656]	; (8005fd8 <_printf_float+0x2f8>)
 8005d48:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005d4a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005d4c:	4252      	negs	r2, r2
 8005d4e:	f7fa fb8b 	bl	8000468 <__aeabi_dcmple>
 8005d52:	2800      	cmp	r0, #0
 8005d54:	d128      	bne.n	8005da8 <_printf_float+0xc8>
 8005d56:	2200      	movs	r2, #0
 8005d58:	2300      	movs	r3, #0
 8005d5a:	0029      	movs	r1, r5
 8005d5c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005d5e:	f7fa fb79 	bl	8000454 <__aeabi_dcmplt>
 8005d62:	2800      	cmp	r0, #0
 8005d64:	d003      	beq.n	8005d6e <_printf_float+0x8e>
 8005d66:	0023      	movs	r3, r4
 8005d68:	222d      	movs	r2, #45	; 0x2d
 8005d6a:	3343      	adds	r3, #67	; 0x43
 8005d6c:	701a      	strb	r2, [r3, #0]
 8005d6e:	4d9b      	ldr	r5, [pc, #620]	; (8005fdc <_printf_float+0x2fc>)
 8005d70:	2e47      	cmp	r6, #71	; 0x47
 8005d72:	d900      	bls.n	8005d76 <_printf_float+0x96>
 8005d74:	4d9a      	ldr	r5, [pc, #616]	; (8005fe0 <_printf_float+0x300>)
 8005d76:	2303      	movs	r3, #3
 8005d78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d7a:	6123      	str	r3, [r4, #16]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	439a      	bics	r2, r3
 8005d80:	2300      	movs	r3, #0
 8005d82:	6022      	str	r2, [r4, #0]
 8005d84:	930a      	str	r3, [sp, #40]	; 0x28
 8005d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d88:	0021      	movs	r1, r4
 8005d8a:	9300      	str	r3, [sp, #0]
 8005d8c:	0038      	movs	r0, r7
 8005d8e:	9b08      	ldr	r3, [sp, #32]
 8005d90:	aa13      	add	r2, sp, #76	; 0x4c
 8005d92:	f000 f9f3 	bl	800617c <_printf_common>
 8005d96:	1c43      	adds	r3, r0, #1
 8005d98:	d000      	beq.n	8005d9c <_printf_float+0xbc>
 8005d9a:	e09e      	b.n	8005eda <_printf_float+0x1fa>
 8005d9c:	2001      	movs	r0, #1
 8005d9e:	4240      	negs	r0, r0
 8005da0:	b015      	add	sp, #84	; 0x54
 8005da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005da4:	3307      	adds	r3, #7
 8005da6:	e7b6      	b.n	8005d16 <_printf_float+0x36>
 8005da8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005daa:	002b      	movs	r3, r5
 8005dac:	0010      	movs	r0, r2
 8005dae:	0029      	movs	r1, r5
 8005db0:	f7fc fb48 	bl	8002444 <__aeabi_dcmpun>
 8005db4:	2800      	cmp	r0, #0
 8005db6:	d00a      	beq.n	8005dce <_printf_float+0xee>
 8005db8:	2d00      	cmp	r5, #0
 8005dba:	da03      	bge.n	8005dc4 <_printf_float+0xe4>
 8005dbc:	0023      	movs	r3, r4
 8005dbe:	222d      	movs	r2, #45	; 0x2d
 8005dc0:	3343      	adds	r3, #67	; 0x43
 8005dc2:	701a      	strb	r2, [r3, #0]
 8005dc4:	4d87      	ldr	r5, [pc, #540]	; (8005fe4 <_printf_float+0x304>)
 8005dc6:	2e47      	cmp	r6, #71	; 0x47
 8005dc8:	d9d5      	bls.n	8005d76 <_printf_float+0x96>
 8005dca:	4d87      	ldr	r5, [pc, #540]	; (8005fe8 <_printf_float+0x308>)
 8005dcc:	e7d3      	b.n	8005d76 <_printf_float+0x96>
 8005dce:	2220      	movs	r2, #32
 8005dd0:	0031      	movs	r1, r6
 8005dd2:	6863      	ldr	r3, [r4, #4]
 8005dd4:	4391      	bics	r1, r2
 8005dd6:	910e      	str	r1, [sp, #56]	; 0x38
 8005dd8:	1c5a      	adds	r2, r3, #1
 8005dda:	d147      	bne.n	8005e6c <_printf_float+0x18c>
 8005ddc:	3307      	adds	r3, #7
 8005dde:	6063      	str	r3, [r4, #4]
 8005de0:	2380      	movs	r3, #128	; 0x80
 8005de2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005de4:	00db      	lsls	r3, r3, #3
 8005de6:	4313      	orrs	r3, r2
 8005de8:	2200      	movs	r2, #0
 8005dea:	9206      	str	r2, [sp, #24]
 8005dec:	aa12      	add	r2, sp, #72	; 0x48
 8005dee:	9205      	str	r2, [sp, #20]
 8005df0:	aa11      	add	r2, sp, #68	; 0x44
 8005df2:	9203      	str	r2, [sp, #12]
 8005df4:	2223      	movs	r2, #35	; 0x23
 8005df6:	a908      	add	r1, sp, #32
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	9301      	str	r3, [sp, #4]
 8005dfc:	6863      	ldr	r3, [r4, #4]
 8005dfe:	1852      	adds	r2, r2, r1
 8005e00:	9202      	str	r2, [sp, #8]
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	0038      	movs	r0, r7
 8005e06:	002b      	movs	r3, r5
 8005e08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e0a:	9604      	str	r6, [sp, #16]
 8005e0c:	f7ff febe 	bl	8005b8c <__cvt>
 8005e10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e12:	0005      	movs	r5, r0
 8005e14:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005e16:	2b47      	cmp	r3, #71	; 0x47
 8005e18:	d108      	bne.n	8005e2c <_printf_float+0x14c>
 8005e1a:	1ccb      	adds	r3, r1, #3
 8005e1c:	db02      	blt.n	8005e24 <_printf_float+0x144>
 8005e1e:	6863      	ldr	r3, [r4, #4]
 8005e20:	4299      	cmp	r1, r3
 8005e22:	dd46      	ble.n	8005eb2 <_printf_float+0x1d2>
 8005e24:	0033      	movs	r3, r6
 8005e26:	3b02      	subs	r3, #2
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	001e      	movs	r6, r3
 8005e2c:	2e65      	cmp	r6, #101	; 0x65
 8005e2e:	d824      	bhi.n	8005e7a <_printf_float+0x19a>
 8005e30:	0020      	movs	r0, r4
 8005e32:	0032      	movs	r2, r6
 8005e34:	3901      	subs	r1, #1
 8005e36:	3050      	adds	r0, #80	; 0x50
 8005e38:	9111      	str	r1, [sp, #68]	; 0x44
 8005e3a:	f7ff ff0a 	bl	8005c52 <__exponent>
 8005e3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e40:	900a      	str	r0, [sp, #40]	; 0x28
 8005e42:	1813      	adds	r3, r2, r0
 8005e44:	6123      	str	r3, [r4, #16]
 8005e46:	2a01      	cmp	r2, #1
 8005e48:	dc02      	bgt.n	8005e50 <_printf_float+0x170>
 8005e4a:	6822      	ldr	r2, [r4, #0]
 8005e4c:	07d2      	lsls	r2, r2, #31
 8005e4e:	d501      	bpl.n	8005e54 <_printf_float+0x174>
 8005e50:	3301      	adds	r3, #1
 8005e52:	6123      	str	r3, [r4, #16]
 8005e54:	2323      	movs	r3, #35	; 0x23
 8005e56:	aa08      	add	r2, sp, #32
 8005e58:	189b      	adds	r3, r3, r2
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d100      	bne.n	8005e62 <_printf_float+0x182>
 8005e60:	e791      	b.n	8005d86 <_printf_float+0xa6>
 8005e62:	0023      	movs	r3, r4
 8005e64:	222d      	movs	r2, #45	; 0x2d
 8005e66:	3343      	adds	r3, #67	; 0x43
 8005e68:	701a      	strb	r2, [r3, #0]
 8005e6a:	e78c      	b.n	8005d86 <_printf_float+0xa6>
 8005e6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e6e:	2a47      	cmp	r2, #71	; 0x47
 8005e70:	d1b6      	bne.n	8005de0 <_printf_float+0x100>
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1b4      	bne.n	8005de0 <_printf_float+0x100>
 8005e76:	3301      	adds	r3, #1
 8005e78:	e7b1      	b.n	8005dde <_printf_float+0xfe>
 8005e7a:	2e66      	cmp	r6, #102	; 0x66
 8005e7c:	d11b      	bne.n	8005eb6 <_printf_float+0x1d6>
 8005e7e:	6863      	ldr	r3, [r4, #4]
 8005e80:	2900      	cmp	r1, #0
 8005e82:	dd0d      	ble.n	8005ea0 <_printf_float+0x1c0>
 8005e84:	6121      	str	r1, [r4, #16]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d102      	bne.n	8005e90 <_printf_float+0x1b0>
 8005e8a:	6822      	ldr	r2, [r4, #0]
 8005e8c:	07d2      	lsls	r2, r2, #31
 8005e8e:	d502      	bpl.n	8005e96 <_printf_float+0x1b6>
 8005e90:	3301      	adds	r3, #1
 8005e92:	1859      	adds	r1, r3, r1
 8005e94:	6121      	str	r1, [r4, #16]
 8005e96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e98:	65a3      	str	r3, [r4, #88]	; 0x58
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	930a      	str	r3, [sp, #40]	; 0x28
 8005e9e:	e7d9      	b.n	8005e54 <_printf_float+0x174>
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d103      	bne.n	8005eac <_printf_float+0x1cc>
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	6821      	ldr	r1, [r4, #0]
 8005ea8:	4211      	tst	r1, r2
 8005eaa:	d000      	beq.n	8005eae <_printf_float+0x1ce>
 8005eac:	1c9a      	adds	r2, r3, #2
 8005eae:	6122      	str	r2, [r4, #16]
 8005eb0:	e7f1      	b.n	8005e96 <_printf_float+0x1b6>
 8005eb2:	2367      	movs	r3, #103	; 0x67
 8005eb4:	001e      	movs	r6, r3
 8005eb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005eb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	db06      	blt.n	8005ecc <_printf_float+0x1ec>
 8005ebe:	6822      	ldr	r2, [r4, #0]
 8005ec0:	6123      	str	r3, [r4, #16]
 8005ec2:	07d2      	lsls	r2, r2, #31
 8005ec4:	d5e7      	bpl.n	8005e96 <_printf_float+0x1b6>
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	6123      	str	r3, [r4, #16]
 8005eca:	e7e4      	b.n	8005e96 <_printf_float+0x1b6>
 8005ecc:	2101      	movs	r1, #1
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	dc01      	bgt.n	8005ed6 <_printf_float+0x1f6>
 8005ed2:	1849      	adds	r1, r1, r1
 8005ed4:	1ac9      	subs	r1, r1, r3
 8005ed6:	1852      	adds	r2, r2, r1
 8005ed8:	e7e9      	b.n	8005eae <_printf_float+0x1ce>
 8005eda:	6822      	ldr	r2, [r4, #0]
 8005edc:	0553      	lsls	r3, r2, #21
 8005ede:	d408      	bmi.n	8005ef2 <_printf_float+0x212>
 8005ee0:	6923      	ldr	r3, [r4, #16]
 8005ee2:	002a      	movs	r2, r5
 8005ee4:	0038      	movs	r0, r7
 8005ee6:	9908      	ldr	r1, [sp, #32]
 8005ee8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005eea:	47a8      	blx	r5
 8005eec:	1c43      	adds	r3, r0, #1
 8005eee:	d129      	bne.n	8005f44 <_printf_float+0x264>
 8005ef0:	e754      	b.n	8005d9c <_printf_float+0xbc>
 8005ef2:	2e65      	cmp	r6, #101	; 0x65
 8005ef4:	d800      	bhi.n	8005ef8 <_printf_float+0x218>
 8005ef6:	e0ec      	b.n	80060d2 <_printf_float+0x3f2>
 8005ef8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005efa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005efc:	2200      	movs	r2, #0
 8005efe:	2300      	movs	r3, #0
 8005f00:	f7fa faa2 	bl	8000448 <__aeabi_dcmpeq>
 8005f04:	2800      	cmp	r0, #0
 8005f06:	d034      	beq.n	8005f72 <_printf_float+0x292>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	0038      	movs	r0, r7
 8005f0c:	4a37      	ldr	r2, [pc, #220]	; (8005fec <_printf_float+0x30c>)
 8005f0e:	9908      	ldr	r1, [sp, #32]
 8005f10:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005f12:	47a8      	blx	r5
 8005f14:	1c43      	adds	r3, r0, #1
 8005f16:	d100      	bne.n	8005f1a <_printf_float+0x23a>
 8005f18:	e740      	b.n	8005d9c <_printf_float+0xbc>
 8005f1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	db02      	blt.n	8005f28 <_printf_float+0x248>
 8005f22:	6823      	ldr	r3, [r4, #0]
 8005f24:	07db      	lsls	r3, r3, #31
 8005f26:	d50d      	bpl.n	8005f44 <_printf_float+0x264>
 8005f28:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005f2a:	0038      	movs	r0, r7
 8005f2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f30:	9908      	ldr	r1, [sp, #32]
 8005f32:	47a8      	blx	r5
 8005f34:	2500      	movs	r5, #0
 8005f36:	1c43      	adds	r3, r0, #1
 8005f38:	d100      	bne.n	8005f3c <_printf_float+0x25c>
 8005f3a:	e72f      	b.n	8005d9c <_printf_float+0xbc>
 8005f3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	42ab      	cmp	r3, r5
 8005f42:	dc0a      	bgt.n	8005f5a <_printf_float+0x27a>
 8005f44:	6823      	ldr	r3, [r4, #0]
 8005f46:	079b      	lsls	r3, r3, #30
 8005f48:	d500      	bpl.n	8005f4c <_printf_float+0x26c>
 8005f4a:	e114      	b.n	8006176 <_printf_float+0x496>
 8005f4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005f4e:	68e0      	ldr	r0, [r4, #12]
 8005f50:	4298      	cmp	r0, r3
 8005f52:	db00      	blt.n	8005f56 <_printf_float+0x276>
 8005f54:	e724      	b.n	8005da0 <_printf_float+0xc0>
 8005f56:	0018      	movs	r0, r3
 8005f58:	e722      	b.n	8005da0 <_printf_float+0xc0>
 8005f5a:	0022      	movs	r2, r4
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	0038      	movs	r0, r7
 8005f60:	9908      	ldr	r1, [sp, #32]
 8005f62:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005f64:	321a      	adds	r2, #26
 8005f66:	47b0      	blx	r6
 8005f68:	1c43      	adds	r3, r0, #1
 8005f6a:	d100      	bne.n	8005f6e <_printf_float+0x28e>
 8005f6c:	e716      	b.n	8005d9c <_printf_float+0xbc>
 8005f6e:	3501      	adds	r5, #1
 8005f70:	e7e4      	b.n	8005f3c <_printf_float+0x25c>
 8005f72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	dc3b      	bgt.n	8005ff0 <_printf_float+0x310>
 8005f78:	2301      	movs	r3, #1
 8005f7a:	0038      	movs	r0, r7
 8005f7c:	4a1b      	ldr	r2, [pc, #108]	; (8005fec <_printf_float+0x30c>)
 8005f7e:	9908      	ldr	r1, [sp, #32]
 8005f80:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005f82:	47b0      	blx	r6
 8005f84:	1c43      	adds	r3, r0, #1
 8005f86:	d100      	bne.n	8005f8a <_printf_float+0x2aa>
 8005f88:	e708      	b.n	8005d9c <_printf_float+0xbc>
 8005f8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	d102      	bne.n	8005f98 <_printf_float+0x2b8>
 8005f92:	6823      	ldr	r3, [r4, #0]
 8005f94:	07db      	lsls	r3, r3, #31
 8005f96:	d5d5      	bpl.n	8005f44 <_printf_float+0x264>
 8005f98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f9a:	0038      	movs	r0, r7
 8005f9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f9e:	9908      	ldr	r1, [sp, #32]
 8005fa0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005fa2:	47b0      	blx	r6
 8005fa4:	1c43      	adds	r3, r0, #1
 8005fa6:	d100      	bne.n	8005faa <_printf_float+0x2ca>
 8005fa8:	e6f8      	b.n	8005d9c <_printf_float+0xbc>
 8005faa:	2300      	movs	r3, #0
 8005fac:	930a      	str	r3, [sp, #40]	; 0x28
 8005fae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005fb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fb2:	425b      	negs	r3, r3
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	dc01      	bgt.n	8005fbc <_printf_float+0x2dc>
 8005fb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005fba:	e792      	b.n	8005ee2 <_printf_float+0x202>
 8005fbc:	0022      	movs	r2, r4
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	0038      	movs	r0, r7
 8005fc2:	9908      	ldr	r1, [sp, #32]
 8005fc4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005fc6:	321a      	adds	r2, #26
 8005fc8:	47b0      	blx	r6
 8005fca:	1c43      	adds	r3, r0, #1
 8005fcc:	d100      	bne.n	8005fd0 <_printf_float+0x2f0>
 8005fce:	e6e5      	b.n	8005d9c <_printf_float+0xbc>
 8005fd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	e7ea      	b.n	8005fac <_printf_float+0x2cc>
 8005fd6:	46c0      	nop			; (mov r8, r8)
 8005fd8:	7fefffff 	.word	0x7fefffff
 8005fdc:	08009148 	.word	0x08009148
 8005fe0:	0800914c 	.word	0x0800914c
 8005fe4:	08009150 	.word	0x08009150
 8005fe8:	08009154 	.word	0x08009154
 8005fec:	08009158 	.word	0x08009158
 8005ff0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ff2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ff4:	920a      	str	r2, [sp, #40]	; 0x28
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	dd00      	ble.n	8005ffc <_printf_float+0x31c>
 8005ffa:	930a      	str	r3, [sp, #40]	; 0x28
 8005ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	dc3d      	bgt.n	800607e <_printf_float+0x39e>
 8006002:	2300      	movs	r3, #0
 8006004:	930e      	str	r3, [sp, #56]	; 0x38
 8006006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006008:	43db      	mvns	r3, r3
 800600a:	17db      	asrs	r3, r3, #31
 800600c:	930f      	str	r3, [sp, #60]	; 0x3c
 800600e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006010:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006012:	930c      	str	r3, [sp, #48]	; 0x30
 8006014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006016:	4013      	ands	r3, r2
 8006018:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800601e:	4293      	cmp	r3, r2
 8006020:	dc36      	bgt.n	8006090 <_printf_float+0x3b0>
 8006022:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006024:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006026:	4293      	cmp	r3, r2
 8006028:	db40      	blt.n	80060ac <_printf_float+0x3cc>
 800602a:	6823      	ldr	r3, [r4, #0]
 800602c:	07db      	lsls	r3, r3, #31
 800602e:	d43d      	bmi.n	80060ac <_printf_float+0x3cc>
 8006030:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006032:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006034:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	1a52      	subs	r2, r2, r1
 800603a:	920a      	str	r2, [sp, #40]	; 0x28
 800603c:	429a      	cmp	r2, r3
 800603e:	dd00      	ble.n	8006042 <_printf_float+0x362>
 8006040:	930a      	str	r3, [sp, #40]	; 0x28
 8006042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006044:	2b00      	cmp	r3, #0
 8006046:	dc3a      	bgt.n	80060be <_printf_float+0x3de>
 8006048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800604a:	2500      	movs	r5, #0
 800604c:	43db      	mvns	r3, r3
 800604e:	17db      	asrs	r3, r3, #31
 8006050:	930b      	str	r3, [sp, #44]	; 0x2c
 8006052:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006054:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006056:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006058:	1a9b      	subs	r3, r3, r2
 800605a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800605c:	400a      	ands	r2, r1
 800605e:	1a9b      	subs	r3, r3, r2
 8006060:	42ab      	cmp	r3, r5
 8006062:	dc00      	bgt.n	8006066 <_printf_float+0x386>
 8006064:	e76e      	b.n	8005f44 <_printf_float+0x264>
 8006066:	0022      	movs	r2, r4
 8006068:	2301      	movs	r3, #1
 800606a:	0038      	movs	r0, r7
 800606c:	9908      	ldr	r1, [sp, #32]
 800606e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006070:	321a      	adds	r2, #26
 8006072:	47b0      	blx	r6
 8006074:	1c43      	adds	r3, r0, #1
 8006076:	d100      	bne.n	800607a <_printf_float+0x39a>
 8006078:	e690      	b.n	8005d9c <_printf_float+0xbc>
 800607a:	3501      	adds	r5, #1
 800607c:	e7e9      	b.n	8006052 <_printf_float+0x372>
 800607e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006080:	002a      	movs	r2, r5
 8006082:	0038      	movs	r0, r7
 8006084:	9908      	ldr	r1, [sp, #32]
 8006086:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006088:	47b0      	blx	r6
 800608a:	1c43      	adds	r3, r0, #1
 800608c:	d1b9      	bne.n	8006002 <_printf_float+0x322>
 800608e:	e685      	b.n	8005d9c <_printf_float+0xbc>
 8006090:	0022      	movs	r2, r4
 8006092:	2301      	movs	r3, #1
 8006094:	0038      	movs	r0, r7
 8006096:	9908      	ldr	r1, [sp, #32]
 8006098:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800609a:	321a      	adds	r2, #26
 800609c:	47b0      	blx	r6
 800609e:	1c43      	adds	r3, r0, #1
 80060a0:	d100      	bne.n	80060a4 <_printf_float+0x3c4>
 80060a2:	e67b      	b.n	8005d9c <_printf_float+0xbc>
 80060a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060a6:	3301      	adds	r3, #1
 80060a8:	930e      	str	r3, [sp, #56]	; 0x38
 80060aa:	e7b0      	b.n	800600e <_printf_float+0x32e>
 80060ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060ae:	0038      	movs	r0, r7
 80060b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80060b2:	9908      	ldr	r1, [sp, #32]
 80060b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80060b6:	47b0      	blx	r6
 80060b8:	1c43      	adds	r3, r0, #1
 80060ba:	d1b9      	bne.n	8006030 <_printf_float+0x350>
 80060bc:	e66e      	b.n	8005d9c <_printf_float+0xbc>
 80060be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060c0:	0038      	movs	r0, r7
 80060c2:	18ea      	adds	r2, r5, r3
 80060c4:	9908      	ldr	r1, [sp, #32]
 80060c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060c8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80060ca:	47a8      	blx	r5
 80060cc:	1c43      	adds	r3, r0, #1
 80060ce:	d1bb      	bne.n	8006048 <_printf_float+0x368>
 80060d0:	e664      	b.n	8005d9c <_printf_float+0xbc>
 80060d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	dc02      	bgt.n	80060de <_printf_float+0x3fe>
 80060d8:	2301      	movs	r3, #1
 80060da:	421a      	tst	r2, r3
 80060dc:	d038      	beq.n	8006150 <_printf_float+0x470>
 80060de:	2301      	movs	r3, #1
 80060e0:	002a      	movs	r2, r5
 80060e2:	0038      	movs	r0, r7
 80060e4:	9908      	ldr	r1, [sp, #32]
 80060e6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80060e8:	47b0      	blx	r6
 80060ea:	1c43      	adds	r3, r0, #1
 80060ec:	d100      	bne.n	80060f0 <_printf_float+0x410>
 80060ee:	e655      	b.n	8005d9c <_printf_float+0xbc>
 80060f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060f2:	0038      	movs	r0, r7
 80060f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80060f6:	9908      	ldr	r1, [sp, #32]
 80060f8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80060fa:	47b0      	blx	r6
 80060fc:	1c43      	adds	r3, r0, #1
 80060fe:	d100      	bne.n	8006102 <_printf_float+0x422>
 8006100:	e64c      	b.n	8005d9c <_printf_float+0xbc>
 8006102:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006104:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006106:	2200      	movs	r2, #0
 8006108:	2300      	movs	r3, #0
 800610a:	f7fa f99d 	bl	8000448 <__aeabi_dcmpeq>
 800610e:	2800      	cmp	r0, #0
 8006110:	d11c      	bne.n	800614c <_printf_float+0x46c>
 8006112:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006114:	1c6a      	adds	r2, r5, #1
 8006116:	3b01      	subs	r3, #1
 8006118:	0038      	movs	r0, r7
 800611a:	9908      	ldr	r1, [sp, #32]
 800611c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800611e:	47a8      	blx	r5
 8006120:	1c43      	adds	r3, r0, #1
 8006122:	d10f      	bne.n	8006144 <_printf_float+0x464>
 8006124:	e63a      	b.n	8005d9c <_printf_float+0xbc>
 8006126:	0022      	movs	r2, r4
 8006128:	2301      	movs	r3, #1
 800612a:	0038      	movs	r0, r7
 800612c:	9908      	ldr	r1, [sp, #32]
 800612e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006130:	321a      	adds	r2, #26
 8006132:	47b0      	blx	r6
 8006134:	1c43      	adds	r3, r0, #1
 8006136:	d100      	bne.n	800613a <_printf_float+0x45a>
 8006138:	e630      	b.n	8005d9c <_printf_float+0xbc>
 800613a:	3501      	adds	r5, #1
 800613c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800613e:	3b01      	subs	r3, #1
 8006140:	42ab      	cmp	r3, r5
 8006142:	dcf0      	bgt.n	8006126 <_printf_float+0x446>
 8006144:	0022      	movs	r2, r4
 8006146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006148:	3250      	adds	r2, #80	; 0x50
 800614a:	e6cb      	b.n	8005ee4 <_printf_float+0x204>
 800614c:	2500      	movs	r5, #0
 800614e:	e7f5      	b.n	800613c <_printf_float+0x45c>
 8006150:	002a      	movs	r2, r5
 8006152:	e7e1      	b.n	8006118 <_printf_float+0x438>
 8006154:	0022      	movs	r2, r4
 8006156:	2301      	movs	r3, #1
 8006158:	0038      	movs	r0, r7
 800615a:	9908      	ldr	r1, [sp, #32]
 800615c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800615e:	3219      	adds	r2, #25
 8006160:	47b0      	blx	r6
 8006162:	1c43      	adds	r3, r0, #1
 8006164:	d100      	bne.n	8006168 <_printf_float+0x488>
 8006166:	e619      	b.n	8005d9c <_printf_float+0xbc>
 8006168:	3501      	adds	r5, #1
 800616a:	68e3      	ldr	r3, [r4, #12]
 800616c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800616e:	1a9b      	subs	r3, r3, r2
 8006170:	42ab      	cmp	r3, r5
 8006172:	dcef      	bgt.n	8006154 <_printf_float+0x474>
 8006174:	e6ea      	b.n	8005f4c <_printf_float+0x26c>
 8006176:	2500      	movs	r5, #0
 8006178:	e7f7      	b.n	800616a <_printf_float+0x48a>
 800617a:	46c0      	nop			; (mov r8, r8)

0800617c <_printf_common>:
 800617c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800617e:	0015      	movs	r5, r2
 8006180:	9301      	str	r3, [sp, #4]
 8006182:	688a      	ldr	r2, [r1, #8]
 8006184:	690b      	ldr	r3, [r1, #16]
 8006186:	000c      	movs	r4, r1
 8006188:	9000      	str	r0, [sp, #0]
 800618a:	4293      	cmp	r3, r2
 800618c:	da00      	bge.n	8006190 <_printf_common+0x14>
 800618e:	0013      	movs	r3, r2
 8006190:	0022      	movs	r2, r4
 8006192:	602b      	str	r3, [r5, #0]
 8006194:	3243      	adds	r2, #67	; 0x43
 8006196:	7812      	ldrb	r2, [r2, #0]
 8006198:	2a00      	cmp	r2, #0
 800619a:	d001      	beq.n	80061a0 <_printf_common+0x24>
 800619c:	3301      	adds	r3, #1
 800619e:	602b      	str	r3, [r5, #0]
 80061a0:	6823      	ldr	r3, [r4, #0]
 80061a2:	069b      	lsls	r3, r3, #26
 80061a4:	d502      	bpl.n	80061ac <_printf_common+0x30>
 80061a6:	682b      	ldr	r3, [r5, #0]
 80061a8:	3302      	adds	r3, #2
 80061aa:	602b      	str	r3, [r5, #0]
 80061ac:	6822      	ldr	r2, [r4, #0]
 80061ae:	2306      	movs	r3, #6
 80061b0:	0017      	movs	r7, r2
 80061b2:	401f      	ands	r7, r3
 80061b4:	421a      	tst	r2, r3
 80061b6:	d027      	beq.n	8006208 <_printf_common+0x8c>
 80061b8:	0023      	movs	r3, r4
 80061ba:	3343      	adds	r3, #67	; 0x43
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	1e5a      	subs	r2, r3, #1
 80061c0:	4193      	sbcs	r3, r2
 80061c2:	6822      	ldr	r2, [r4, #0]
 80061c4:	0692      	lsls	r2, r2, #26
 80061c6:	d430      	bmi.n	800622a <_printf_common+0xae>
 80061c8:	0022      	movs	r2, r4
 80061ca:	9901      	ldr	r1, [sp, #4]
 80061cc:	9800      	ldr	r0, [sp, #0]
 80061ce:	9e08      	ldr	r6, [sp, #32]
 80061d0:	3243      	adds	r2, #67	; 0x43
 80061d2:	47b0      	blx	r6
 80061d4:	1c43      	adds	r3, r0, #1
 80061d6:	d025      	beq.n	8006224 <_printf_common+0xa8>
 80061d8:	2306      	movs	r3, #6
 80061da:	6820      	ldr	r0, [r4, #0]
 80061dc:	682a      	ldr	r2, [r5, #0]
 80061de:	68e1      	ldr	r1, [r4, #12]
 80061e0:	2500      	movs	r5, #0
 80061e2:	4003      	ands	r3, r0
 80061e4:	2b04      	cmp	r3, #4
 80061e6:	d103      	bne.n	80061f0 <_printf_common+0x74>
 80061e8:	1a8d      	subs	r5, r1, r2
 80061ea:	43eb      	mvns	r3, r5
 80061ec:	17db      	asrs	r3, r3, #31
 80061ee:	401d      	ands	r5, r3
 80061f0:	68a3      	ldr	r3, [r4, #8]
 80061f2:	6922      	ldr	r2, [r4, #16]
 80061f4:	4293      	cmp	r3, r2
 80061f6:	dd01      	ble.n	80061fc <_printf_common+0x80>
 80061f8:	1a9b      	subs	r3, r3, r2
 80061fa:	18ed      	adds	r5, r5, r3
 80061fc:	2700      	movs	r7, #0
 80061fe:	42bd      	cmp	r5, r7
 8006200:	d120      	bne.n	8006244 <_printf_common+0xc8>
 8006202:	2000      	movs	r0, #0
 8006204:	e010      	b.n	8006228 <_printf_common+0xac>
 8006206:	3701      	adds	r7, #1
 8006208:	68e3      	ldr	r3, [r4, #12]
 800620a:	682a      	ldr	r2, [r5, #0]
 800620c:	1a9b      	subs	r3, r3, r2
 800620e:	42bb      	cmp	r3, r7
 8006210:	ddd2      	ble.n	80061b8 <_printf_common+0x3c>
 8006212:	0022      	movs	r2, r4
 8006214:	2301      	movs	r3, #1
 8006216:	9901      	ldr	r1, [sp, #4]
 8006218:	9800      	ldr	r0, [sp, #0]
 800621a:	9e08      	ldr	r6, [sp, #32]
 800621c:	3219      	adds	r2, #25
 800621e:	47b0      	blx	r6
 8006220:	1c43      	adds	r3, r0, #1
 8006222:	d1f0      	bne.n	8006206 <_printf_common+0x8a>
 8006224:	2001      	movs	r0, #1
 8006226:	4240      	negs	r0, r0
 8006228:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800622a:	2030      	movs	r0, #48	; 0x30
 800622c:	18e1      	adds	r1, r4, r3
 800622e:	3143      	adds	r1, #67	; 0x43
 8006230:	7008      	strb	r0, [r1, #0]
 8006232:	0021      	movs	r1, r4
 8006234:	1c5a      	adds	r2, r3, #1
 8006236:	3145      	adds	r1, #69	; 0x45
 8006238:	7809      	ldrb	r1, [r1, #0]
 800623a:	18a2      	adds	r2, r4, r2
 800623c:	3243      	adds	r2, #67	; 0x43
 800623e:	3302      	adds	r3, #2
 8006240:	7011      	strb	r1, [r2, #0]
 8006242:	e7c1      	b.n	80061c8 <_printf_common+0x4c>
 8006244:	0022      	movs	r2, r4
 8006246:	2301      	movs	r3, #1
 8006248:	9901      	ldr	r1, [sp, #4]
 800624a:	9800      	ldr	r0, [sp, #0]
 800624c:	9e08      	ldr	r6, [sp, #32]
 800624e:	321a      	adds	r2, #26
 8006250:	47b0      	blx	r6
 8006252:	1c43      	adds	r3, r0, #1
 8006254:	d0e6      	beq.n	8006224 <_printf_common+0xa8>
 8006256:	3701      	adds	r7, #1
 8006258:	e7d1      	b.n	80061fe <_printf_common+0x82>
	...

0800625c <_printf_i>:
 800625c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800625e:	b08b      	sub	sp, #44	; 0x2c
 8006260:	9206      	str	r2, [sp, #24]
 8006262:	000a      	movs	r2, r1
 8006264:	3243      	adds	r2, #67	; 0x43
 8006266:	9307      	str	r3, [sp, #28]
 8006268:	9005      	str	r0, [sp, #20]
 800626a:	9204      	str	r2, [sp, #16]
 800626c:	7e0a      	ldrb	r2, [r1, #24]
 800626e:	000c      	movs	r4, r1
 8006270:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006272:	2a78      	cmp	r2, #120	; 0x78
 8006274:	d806      	bhi.n	8006284 <_printf_i+0x28>
 8006276:	2a62      	cmp	r2, #98	; 0x62
 8006278:	d808      	bhi.n	800628c <_printf_i+0x30>
 800627a:	2a00      	cmp	r2, #0
 800627c:	d100      	bne.n	8006280 <_printf_i+0x24>
 800627e:	e0c0      	b.n	8006402 <_printf_i+0x1a6>
 8006280:	2a58      	cmp	r2, #88	; 0x58
 8006282:	d052      	beq.n	800632a <_printf_i+0xce>
 8006284:	0026      	movs	r6, r4
 8006286:	3642      	adds	r6, #66	; 0x42
 8006288:	7032      	strb	r2, [r6, #0]
 800628a:	e022      	b.n	80062d2 <_printf_i+0x76>
 800628c:	0010      	movs	r0, r2
 800628e:	3863      	subs	r0, #99	; 0x63
 8006290:	2815      	cmp	r0, #21
 8006292:	d8f7      	bhi.n	8006284 <_printf_i+0x28>
 8006294:	f7f9 ff48 	bl	8000128 <__gnu_thumb1_case_shi>
 8006298:	001f0016 	.word	0x001f0016
 800629c:	fff6fff6 	.word	0xfff6fff6
 80062a0:	fff6fff6 	.word	0xfff6fff6
 80062a4:	fff6001f 	.word	0xfff6001f
 80062a8:	fff6fff6 	.word	0xfff6fff6
 80062ac:	00a8fff6 	.word	0x00a8fff6
 80062b0:	009a0036 	.word	0x009a0036
 80062b4:	fff6fff6 	.word	0xfff6fff6
 80062b8:	fff600b9 	.word	0xfff600b9
 80062bc:	fff60036 	.word	0xfff60036
 80062c0:	009efff6 	.word	0x009efff6
 80062c4:	0026      	movs	r6, r4
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	3642      	adds	r6, #66	; 0x42
 80062ca:	1d11      	adds	r1, r2, #4
 80062cc:	6019      	str	r1, [r3, #0]
 80062ce:	6813      	ldr	r3, [r2, #0]
 80062d0:	7033      	strb	r3, [r6, #0]
 80062d2:	2301      	movs	r3, #1
 80062d4:	e0a7      	b.n	8006426 <_printf_i+0x1ca>
 80062d6:	6808      	ldr	r0, [r1, #0]
 80062d8:	6819      	ldr	r1, [r3, #0]
 80062da:	1d0a      	adds	r2, r1, #4
 80062dc:	0605      	lsls	r5, r0, #24
 80062de:	d50b      	bpl.n	80062f8 <_printf_i+0x9c>
 80062e0:	680d      	ldr	r5, [r1, #0]
 80062e2:	601a      	str	r2, [r3, #0]
 80062e4:	2d00      	cmp	r5, #0
 80062e6:	da03      	bge.n	80062f0 <_printf_i+0x94>
 80062e8:	232d      	movs	r3, #45	; 0x2d
 80062ea:	9a04      	ldr	r2, [sp, #16]
 80062ec:	426d      	negs	r5, r5
 80062ee:	7013      	strb	r3, [r2, #0]
 80062f0:	4b61      	ldr	r3, [pc, #388]	; (8006478 <_printf_i+0x21c>)
 80062f2:	270a      	movs	r7, #10
 80062f4:	9303      	str	r3, [sp, #12]
 80062f6:	e032      	b.n	800635e <_printf_i+0x102>
 80062f8:	680d      	ldr	r5, [r1, #0]
 80062fa:	601a      	str	r2, [r3, #0]
 80062fc:	0641      	lsls	r1, r0, #25
 80062fe:	d5f1      	bpl.n	80062e4 <_printf_i+0x88>
 8006300:	b22d      	sxth	r5, r5
 8006302:	e7ef      	b.n	80062e4 <_printf_i+0x88>
 8006304:	680d      	ldr	r5, [r1, #0]
 8006306:	6819      	ldr	r1, [r3, #0]
 8006308:	1d08      	adds	r0, r1, #4
 800630a:	6018      	str	r0, [r3, #0]
 800630c:	062e      	lsls	r6, r5, #24
 800630e:	d501      	bpl.n	8006314 <_printf_i+0xb8>
 8006310:	680d      	ldr	r5, [r1, #0]
 8006312:	e003      	b.n	800631c <_printf_i+0xc0>
 8006314:	066d      	lsls	r5, r5, #25
 8006316:	d5fb      	bpl.n	8006310 <_printf_i+0xb4>
 8006318:	680d      	ldr	r5, [r1, #0]
 800631a:	b2ad      	uxth	r5, r5
 800631c:	4b56      	ldr	r3, [pc, #344]	; (8006478 <_printf_i+0x21c>)
 800631e:	270a      	movs	r7, #10
 8006320:	9303      	str	r3, [sp, #12]
 8006322:	2a6f      	cmp	r2, #111	; 0x6f
 8006324:	d117      	bne.n	8006356 <_printf_i+0xfa>
 8006326:	2708      	movs	r7, #8
 8006328:	e015      	b.n	8006356 <_printf_i+0xfa>
 800632a:	3145      	adds	r1, #69	; 0x45
 800632c:	700a      	strb	r2, [r1, #0]
 800632e:	4a52      	ldr	r2, [pc, #328]	; (8006478 <_printf_i+0x21c>)
 8006330:	9203      	str	r2, [sp, #12]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	6821      	ldr	r1, [r4, #0]
 8006336:	ca20      	ldmia	r2!, {r5}
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	0608      	lsls	r0, r1, #24
 800633c:	d550      	bpl.n	80063e0 <_printf_i+0x184>
 800633e:	07cb      	lsls	r3, r1, #31
 8006340:	d502      	bpl.n	8006348 <_printf_i+0xec>
 8006342:	2320      	movs	r3, #32
 8006344:	4319      	orrs	r1, r3
 8006346:	6021      	str	r1, [r4, #0]
 8006348:	2710      	movs	r7, #16
 800634a:	2d00      	cmp	r5, #0
 800634c:	d103      	bne.n	8006356 <_printf_i+0xfa>
 800634e:	2320      	movs	r3, #32
 8006350:	6822      	ldr	r2, [r4, #0]
 8006352:	439a      	bics	r2, r3
 8006354:	6022      	str	r2, [r4, #0]
 8006356:	0023      	movs	r3, r4
 8006358:	2200      	movs	r2, #0
 800635a:	3343      	adds	r3, #67	; 0x43
 800635c:	701a      	strb	r2, [r3, #0]
 800635e:	6863      	ldr	r3, [r4, #4]
 8006360:	60a3      	str	r3, [r4, #8]
 8006362:	2b00      	cmp	r3, #0
 8006364:	db03      	blt.n	800636e <_printf_i+0x112>
 8006366:	2204      	movs	r2, #4
 8006368:	6821      	ldr	r1, [r4, #0]
 800636a:	4391      	bics	r1, r2
 800636c:	6021      	str	r1, [r4, #0]
 800636e:	2d00      	cmp	r5, #0
 8006370:	d102      	bne.n	8006378 <_printf_i+0x11c>
 8006372:	9e04      	ldr	r6, [sp, #16]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00c      	beq.n	8006392 <_printf_i+0x136>
 8006378:	9e04      	ldr	r6, [sp, #16]
 800637a:	0028      	movs	r0, r5
 800637c:	0039      	movs	r1, r7
 800637e:	f7f9 ff63 	bl	8000248 <__aeabi_uidivmod>
 8006382:	9b03      	ldr	r3, [sp, #12]
 8006384:	3e01      	subs	r6, #1
 8006386:	5c5b      	ldrb	r3, [r3, r1]
 8006388:	7033      	strb	r3, [r6, #0]
 800638a:	002b      	movs	r3, r5
 800638c:	0005      	movs	r5, r0
 800638e:	429f      	cmp	r7, r3
 8006390:	d9f3      	bls.n	800637a <_printf_i+0x11e>
 8006392:	2f08      	cmp	r7, #8
 8006394:	d109      	bne.n	80063aa <_printf_i+0x14e>
 8006396:	6823      	ldr	r3, [r4, #0]
 8006398:	07db      	lsls	r3, r3, #31
 800639a:	d506      	bpl.n	80063aa <_printf_i+0x14e>
 800639c:	6863      	ldr	r3, [r4, #4]
 800639e:	6922      	ldr	r2, [r4, #16]
 80063a0:	4293      	cmp	r3, r2
 80063a2:	dc02      	bgt.n	80063aa <_printf_i+0x14e>
 80063a4:	2330      	movs	r3, #48	; 0x30
 80063a6:	3e01      	subs	r6, #1
 80063a8:	7033      	strb	r3, [r6, #0]
 80063aa:	9b04      	ldr	r3, [sp, #16]
 80063ac:	1b9b      	subs	r3, r3, r6
 80063ae:	6123      	str	r3, [r4, #16]
 80063b0:	9b07      	ldr	r3, [sp, #28]
 80063b2:	0021      	movs	r1, r4
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	9805      	ldr	r0, [sp, #20]
 80063b8:	9b06      	ldr	r3, [sp, #24]
 80063ba:	aa09      	add	r2, sp, #36	; 0x24
 80063bc:	f7ff fede 	bl	800617c <_printf_common>
 80063c0:	1c43      	adds	r3, r0, #1
 80063c2:	d135      	bne.n	8006430 <_printf_i+0x1d4>
 80063c4:	2001      	movs	r0, #1
 80063c6:	4240      	negs	r0, r0
 80063c8:	b00b      	add	sp, #44	; 0x2c
 80063ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063cc:	2220      	movs	r2, #32
 80063ce:	6809      	ldr	r1, [r1, #0]
 80063d0:	430a      	orrs	r2, r1
 80063d2:	6022      	str	r2, [r4, #0]
 80063d4:	0022      	movs	r2, r4
 80063d6:	2178      	movs	r1, #120	; 0x78
 80063d8:	3245      	adds	r2, #69	; 0x45
 80063da:	7011      	strb	r1, [r2, #0]
 80063dc:	4a27      	ldr	r2, [pc, #156]	; (800647c <_printf_i+0x220>)
 80063de:	e7a7      	b.n	8006330 <_printf_i+0xd4>
 80063e0:	0648      	lsls	r0, r1, #25
 80063e2:	d5ac      	bpl.n	800633e <_printf_i+0xe2>
 80063e4:	b2ad      	uxth	r5, r5
 80063e6:	e7aa      	b.n	800633e <_printf_i+0xe2>
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	680d      	ldr	r5, [r1, #0]
 80063ec:	1d10      	adds	r0, r2, #4
 80063ee:	6949      	ldr	r1, [r1, #20]
 80063f0:	6018      	str	r0, [r3, #0]
 80063f2:	6813      	ldr	r3, [r2, #0]
 80063f4:	062e      	lsls	r6, r5, #24
 80063f6:	d501      	bpl.n	80063fc <_printf_i+0x1a0>
 80063f8:	6019      	str	r1, [r3, #0]
 80063fa:	e002      	b.n	8006402 <_printf_i+0x1a6>
 80063fc:	066d      	lsls	r5, r5, #25
 80063fe:	d5fb      	bpl.n	80063f8 <_printf_i+0x19c>
 8006400:	8019      	strh	r1, [r3, #0]
 8006402:	2300      	movs	r3, #0
 8006404:	9e04      	ldr	r6, [sp, #16]
 8006406:	6123      	str	r3, [r4, #16]
 8006408:	e7d2      	b.n	80063b0 <_printf_i+0x154>
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	1d11      	adds	r1, r2, #4
 800640e:	6019      	str	r1, [r3, #0]
 8006410:	6816      	ldr	r6, [r2, #0]
 8006412:	2100      	movs	r1, #0
 8006414:	0030      	movs	r0, r6
 8006416:	6862      	ldr	r2, [r4, #4]
 8006418:	f000 ff0a 	bl	8007230 <memchr>
 800641c:	2800      	cmp	r0, #0
 800641e:	d001      	beq.n	8006424 <_printf_i+0x1c8>
 8006420:	1b80      	subs	r0, r0, r6
 8006422:	6060      	str	r0, [r4, #4]
 8006424:	6863      	ldr	r3, [r4, #4]
 8006426:	6123      	str	r3, [r4, #16]
 8006428:	2300      	movs	r3, #0
 800642a:	9a04      	ldr	r2, [sp, #16]
 800642c:	7013      	strb	r3, [r2, #0]
 800642e:	e7bf      	b.n	80063b0 <_printf_i+0x154>
 8006430:	6923      	ldr	r3, [r4, #16]
 8006432:	0032      	movs	r2, r6
 8006434:	9906      	ldr	r1, [sp, #24]
 8006436:	9805      	ldr	r0, [sp, #20]
 8006438:	9d07      	ldr	r5, [sp, #28]
 800643a:	47a8      	blx	r5
 800643c:	1c43      	adds	r3, r0, #1
 800643e:	d0c1      	beq.n	80063c4 <_printf_i+0x168>
 8006440:	6823      	ldr	r3, [r4, #0]
 8006442:	079b      	lsls	r3, r3, #30
 8006444:	d415      	bmi.n	8006472 <_printf_i+0x216>
 8006446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006448:	68e0      	ldr	r0, [r4, #12]
 800644a:	4298      	cmp	r0, r3
 800644c:	dabc      	bge.n	80063c8 <_printf_i+0x16c>
 800644e:	0018      	movs	r0, r3
 8006450:	e7ba      	b.n	80063c8 <_printf_i+0x16c>
 8006452:	0022      	movs	r2, r4
 8006454:	2301      	movs	r3, #1
 8006456:	9906      	ldr	r1, [sp, #24]
 8006458:	9805      	ldr	r0, [sp, #20]
 800645a:	9e07      	ldr	r6, [sp, #28]
 800645c:	3219      	adds	r2, #25
 800645e:	47b0      	blx	r6
 8006460:	1c43      	adds	r3, r0, #1
 8006462:	d0af      	beq.n	80063c4 <_printf_i+0x168>
 8006464:	3501      	adds	r5, #1
 8006466:	68e3      	ldr	r3, [r4, #12]
 8006468:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800646a:	1a9b      	subs	r3, r3, r2
 800646c:	42ab      	cmp	r3, r5
 800646e:	dcf0      	bgt.n	8006452 <_printf_i+0x1f6>
 8006470:	e7e9      	b.n	8006446 <_printf_i+0x1ea>
 8006472:	2500      	movs	r5, #0
 8006474:	e7f7      	b.n	8006466 <_printf_i+0x20a>
 8006476:	46c0      	nop			; (mov r8, r8)
 8006478:	0800915a 	.word	0x0800915a
 800647c:	0800916b 	.word	0x0800916b

08006480 <siprintf>:
 8006480:	b40e      	push	{r1, r2, r3}
 8006482:	b500      	push	{lr}
 8006484:	490b      	ldr	r1, [pc, #44]	; (80064b4 <siprintf+0x34>)
 8006486:	b09c      	sub	sp, #112	; 0x70
 8006488:	ab1d      	add	r3, sp, #116	; 0x74
 800648a:	9002      	str	r0, [sp, #8]
 800648c:	9006      	str	r0, [sp, #24]
 800648e:	9107      	str	r1, [sp, #28]
 8006490:	9104      	str	r1, [sp, #16]
 8006492:	4809      	ldr	r0, [pc, #36]	; (80064b8 <siprintf+0x38>)
 8006494:	4909      	ldr	r1, [pc, #36]	; (80064bc <siprintf+0x3c>)
 8006496:	cb04      	ldmia	r3!, {r2}
 8006498:	9105      	str	r1, [sp, #20]
 800649a:	6800      	ldr	r0, [r0, #0]
 800649c:	a902      	add	r1, sp, #8
 800649e:	9301      	str	r3, [sp, #4]
 80064a0:	f001 fb90 	bl	8007bc4 <_svfiprintf_r>
 80064a4:	2300      	movs	r3, #0
 80064a6:	9a02      	ldr	r2, [sp, #8]
 80064a8:	7013      	strb	r3, [r2, #0]
 80064aa:	b01c      	add	sp, #112	; 0x70
 80064ac:	bc08      	pop	{r3}
 80064ae:	b003      	add	sp, #12
 80064b0:	4718      	bx	r3
 80064b2:	46c0      	nop			; (mov r8, r8)
 80064b4:	7fffffff 	.word	0x7fffffff
 80064b8:	20000434 	.word	0x20000434
 80064bc:	ffff0208 	.word	0xffff0208

080064c0 <quorem>:
 80064c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064c2:	0006      	movs	r6, r0
 80064c4:	690d      	ldr	r5, [r1, #16]
 80064c6:	6933      	ldr	r3, [r6, #16]
 80064c8:	b087      	sub	sp, #28
 80064ca:	2000      	movs	r0, #0
 80064cc:	9102      	str	r1, [sp, #8]
 80064ce:	42ab      	cmp	r3, r5
 80064d0:	db6b      	blt.n	80065aa <quorem+0xea>
 80064d2:	000b      	movs	r3, r1
 80064d4:	3d01      	subs	r5, #1
 80064d6:	00ac      	lsls	r4, r5, #2
 80064d8:	3314      	adds	r3, #20
 80064da:	9305      	str	r3, [sp, #20]
 80064dc:	191b      	adds	r3, r3, r4
 80064de:	9303      	str	r3, [sp, #12]
 80064e0:	0033      	movs	r3, r6
 80064e2:	3314      	adds	r3, #20
 80064e4:	9301      	str	r3, [sp, #4]
 80064e6:	191c      	adds	r4, r3, r4
 80064e8:	9b03      	ldr	r3, [sp, #12]
 80064ea:	6827      	ldr	r7, [r4, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	0038      	movs	r0, r7
 80064f0:	9300      	str	r3, [sp, #0]
 80064f2:	3301      	adds	r3, #1
 80064f4:	0019      	movs	r1, r3
 80064f6:	9304      	str	r3, [sp, #16]
 80064f8:	f7f9 fe20 	bl	800013c <__udivsi3>
 80064fc:	9b04      	ldr	r3, [sp, #16]
 80064fe:	9000      	str	r0, [sp, #0]
 8006500:	429f      	cmp	r7, r3
 8006502:	d329      	bcc.n	8006558 <quorem+0x98>
 8006504:	2300      	movs	r3, #0
 8006506:	469c      	mov	ip, r3
 8006508:	9801      	ldr	r0, [sp, #4]
 800650a:	9f05      	ldr	r7, [sp, #20]
 800650c:	9304      	str	r3, [sp, #16]
 800650e:	cf08      	ldmia	r7!, {r3}
 8006510:	9a00      	ldr	r2, [sp, #0]
 8006512:	b299      	uxth	r1, r3
 8006514:	4351      	muls	r1, r2
 8006516:	0c1b      	lsrs	r3, r3, #16
 8006518:	4353      	muls	r3, r2
 800651a:	4461      	add	r1, ip
 800651c:	0c0a      	lsrs	r2, r1, #16
 800651e:	189b      	adds	r3, r3, r2
 8006520:	0c1a      	lsrs	r2, r3, #16
 8006522:	9305      	str	r3, [sp, #20]
 8006524:	6803      	ldr	r3, [r0, #0]
 8006526:	4694      	mov	ip, r2
 8006528:	b29a      	uxth	r2, r3
 800652a:	9b04      	ldr	r3, [sp, #16]
 800652c:	b289      	uxth	r1, r1
 800652e:	18d2      	adds	r2, r2, r3
 8006530:	6803      	ldr	r3, [r0, #0]
 8006532:	1a52      	subs	r2, r2, r1
 8006534:	0c19      	lsrs	r1, r3, #16
 8006536:	466b      	mov	r3, sp
 8006538:	8a9b      	ldrh	r3, [r3, #20]
 800653a:	1acb      	subs	r3, r1, r3
 800653c:	1411      	asrs	r1, r2, #16
 800653e:	185b      	adds	r3, r3, r1
 8006540:	1419      	asrs	r1, r3, #16
 8006542:	b292      	uxth	r2, r2
 8006544:	041b      	lsls	r3, r3, #16
 8006546:	431a      	orrs	r2, r3
 8006548:	9b03      	ldr	r3, [sp, #12]
 800654a:	9104      	str	r1, [sp, #16]
 800654c:	c004      	stmia	r0!, {r2}
 800654e:	42bb      	cmp	r3, r7
 8006550:	d2dd      	bcs.n	800650e <quorem+0x4e>
 8006552:	6823      	ldr	r3, [r4, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d02e      	beq.n	80065b6 <quorem+0xf6>
 8006558:	0030      	movs	r0, r6
 800655a:	9902      	ldr	r1, [sp, #8]
 800655c:	f001 f902 	bl	8007764 <__mcmp>
 8006560:	2800      	cmp	r0, #0
 8006562:	db21      	blt.n	80065a8 <quorem+0xe8>
 8006564:	0030      	movs	r0, r6
 8006566:	2400      	movs	r4, #0
 8006568:	9b00      	ldr	r3, [sp, #0]
 800656a:	9902      	ldr	r1, [sp, #8]
 800656c:	3301      	adds	r3, #1
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	3014      	adds	r0, #20
 8006572:	3114      	adds	r1, #20
 8006574:	6802      	ldr	r2, [r0, #0]
 8006576:	c908      	ldmia	r1!, {r3}
 8006578:	b292      	uxth	r2, r2
 800657a:	1914      	adds	r4, r2, r4
 800657c:	b29a      	uxth	r2, r3
 800657e:	1aa2      	subs	r2, r4, r2
 8006580:	6804      	ldr	r4, [r0, #0]
 8006582:	0c1b      	lsrs	r3, r3, #16
 8006584:	0c24      	lsrs	r4, r4, #16
 8006586:	1ae3      	subs	r3, r4, r3
 8006588:	1414      	asrs	r4, r2, #16
 800658a:	191b      	adds	r3, r3, r4
 800658c:	141c      	asrs	r4, r3, #16
 800658e:	b292      	uxth	r2, r2
 8006590:	041b      	lsls	r3, r3, #16
 8006592:	4313      	orrs	r3, r2
 8006594:	c008      	stmia	r0!, {r3}
 8006596:	9b03      	ldr	r3, [sp, #12]
 8006598:	428b      	cmp	r3, r1
 800659a:	d2eb      	bcs.n	8006574 <quorem+0xb4>
 800659c:	9a01      	ldr	r2, [sp, #4]
 800659e:	00ab      	lsls	r3, r5, #2
 80065a0:	18d3      	adds	r3, r2, r3
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	2a00      	cmp	r2, #0
 80065a6:	d010      	beq.n	80065ca <quorem+0x10a>
 80065a8:	9800      	ldr	r0, [sp, #0]
 80065aa:	b007      	add	sp, #28
 80065ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d104      	bne.n	80065be <quorem+0xfe>
 80065b4:	3d01      	subs	r5, #1
 80065b6:	9b01      	ldr	r3, [sp, #4]
 80065b8:	3c04      	subs	r4, #4
 80065ba:	42a3      	cmp	r3, r4
 80065bc:	d3f7      	bcc.n	80065ae <quorem+0xee>
 80065be:	6135      	str	r5, [r6, #16]
 80065c0:	e7ca      	b.n	8006558 <quorem+0x98>
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	2a00      	cmp	r2, #0
 80065c6:	d104      	bne.n	80065d2 <quorem+0x112>
 80065c8:	3d01      	subs	r5, #1
 80065ca:	9a01      	ldr	r2, [sp, #4]
 80065cc:	3b04      	subs	r3, #4
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d3f7      	bcc.n	80065c2 <quorem+0x102>
 80065d2:	6135      	str	r5, [r6, #16]
 80065d4:	e7e8      	b.n	80065a8 <quorem+0xe8>
	...

080065d8 <_dtoa_r>:
 80065d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065da:	b09d      	sub	sp, #116	; 0x74
 80065dc:	9202      	str	r2, [sp, #8]
 80065de:	9303      	str	r3, [sp, #12]
 80065e0:	9b02      	ldr	r3, [sp, #8]
 80065e2:	9c03      	ldr	r4, [sp, #12]
 80065e4:	930a      	str	r3, [sp, #40]	; 0x28
 80065e6:	940b      	str	r4, [sp, #44]	; 0x2c
 80065e8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80065ea:	0007      	movs	r7, r0
 80065ec:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80065ee:	2c00      	cmp	r4, #0
 80065f0:	d10e      	bne.n	8006610 <_dtoa_r+0x38>
 80065f2:	2010      	movs	r0, #16
 80065f4:	f000 fe12 	bl	800721c <malloc>
 80065f8:	1e02      	subs	r2, r0, #0
 80065fa:	6278      	str	r0, [r7, #36]	; 0x24
 80065fc:	d104      	bne.n	8006608 <_dtoa_r+0x30>
 80065fe:	21ea      	movs	r1, #234	; 0xea
 8006600:	4bc0      	ldr	r3, [pc, #768]	; (8006904 <_dtoa_r+0x32c>)
 8006602:	48c1      	ldr	r0, [pc, #772]	; (8006908 <_dtoa_r+0x330>)
 8006604:	f001 fbf0 	bl	8007de8 <__assert_func>
 8006608:	6044      	str	r4, [r0, #4]
 800660a:	6084      	str	r4, [r0, #8]
 800660c:	6004      	str	r4, [r0, #0]
 800660e:	60c4      	str	r4, [r0, #12]
 8006610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006612:	6819      	ldr	r1, [r3, #0]
 8006614:	2900      	cmp	r1, #0
 8006616:	d00a      	beq.n	800662e <_dtoa_r+0x56>
 8006618:	685a      	ldr	r2, [r3, #4]
 800661a:	2301      	movs	r3, #1
 800661c:	4093      	lsls	r3, r2
 800661e:	604a      	str	r2, [r1, #4]
 8006620:	608b      	str	r3, [r1, #8]
 8006622:	0038      	movs	r0, r7
 8006624:	f000 fe5c 	bl	80072e0 <_Bfree>
 8006628:	2200      	movs	r2, #0
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662c:	601a      	str	r2, [r3, #0]
 800662e:	9b03      	ldr	r3, [sp, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	da21      	bge.n	8006678 <_dtoa_r+0xa0>
 8006634:	2301      	movs	r3, #1
 8006636:	602b      	str	r3, [r5, #0]
 8006638:	9b03      	ldr	r3, [sp, #12]
 800663a:	005b      	lsls	r3, r3, #1
 800663c:	085b      	lsrs	r3, r3, #1
 800663e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006640:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006642:	4bb2      	ldr	r3, [pc, #712]	; (800690c <_dtoa_r+0x334>)
 8006644:	002a      	movs	r2, r5
 8006646:	9318      	str	r3, [sp, #96]	; 0x60
 8006648:	401a      	ands	r2, r3
 800664a:	429a      	cmp	r2, r3
 800664c:	d117      	bne.n	800667e <_dtoa_r+0xa6>
 800664e:	4bb0      	ldr	r3, [pc, #704]	; (8006910 <_dtoa_r+0x338>)
 8006650:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006652:	0328      	lsls	r0, r5, #12
 8006654:	6013      	str	r3, [r2, #0]
 8006656:	9b02      	ldr	r3, [sp, #8]
 8006658:	0b00      	lsrs	r0, r0, #12
 800665a:	4318      	orrs	r0, r3
 800665c:	d101      	bne.n	8006662 <_dtoa_r+0x8a>
 800665e:	f000 fdc3 	bl	80071e8 <_dtoa_r+0xc10>
 8006662:	48ac      	ldr	r0, [pc, #688]	; (8006914 <_dtoa_r+0x33c>)
 8006664:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006666:	9005      	str	r0, [sp, #20]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d002      	beq.n	8006672 <_dtoa_r+0x9a>
 800666c:	4baa      	ldr	r3, [pc, #680]	; (8006918 <_dtoa_r+0x340>)
 800666e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006670:	6013      	str	r3, [r2, #0]
 8006672:	9805      	ldr	r0, [sp, #20]
 8006674:	b01d      	add	sp, #116	; 0x74
 8006676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006678:	2300      	movs	r3, #0
 800667a:	602b      	str	r3, [r5, #0]
 800667c:	e7e0      	b.n	8006640 <_dtoa_r+0x68>
 800667e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006680:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006682:	9312      	str	r3, [sp, #72]	; 0x48
 8006684:	9413      	str	r4, [sp, #76]	; 0x4c
 8006686:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006688:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800668a:	2200      	movs	r2, #0
 800668c:	2300      	movs	r3, #0
 800668e:	f7f9 fedb 	bl	8000448 <__aeabi_dcmpeq>
 8006692:	1e04      	subs	r4, r0, #0
 8006694:	d00b      	beq.n	80066ae <_dtoa_r+0xd6>
 8006696:	2301      	movs	r3, #1
 8006698:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800669a:	6013      	str	r3, [r2, #0]
 800669c:	4b9f      	ldr	r3, [pc, #636]	; (800691c <_dtoa_r+0x344>)
 800669e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80066a0:	9305      	str	r3, [sp, #20]
 80066a2:	2a00      	cmp	r2, #0
 80066a4:	d0e5      	beq.n	8006672 <_dtoa_r+0x9a>
 80066a6:	4a9e      	ldr	r2, [pc, #632]	; (8006920 <_dtoa_r+0x348>)
 80066a8:	9926      	ldr	r1, [sp, #152]	; 0x98
 80066aa:	600a      	str	r2, [r1, #0]
 80066ac:	e7e1      	b.n	8006672 <_dtoa_r+0x9a>
 80066ae:	ab1a      	add	r3, sp, #104	; 0x68
 80066b0:	9301      	str	r3, [sp, #4]
 80066b2:	ab1b      	add	r3, sp, #108	; 0x6c
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	0038      	movs	r0, r7
 80066b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80066ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80066bc:	f001 f906 	bl	80078cc <__d2b>
 80066c0:	006e      	lsls	r6, r5, #1
 80066c2:	9004      	str	r0, [sp, #16]
 80066c4:	0d76      	lsrs	r6, r6, #21
 80066c6:	d100      	bne.n	80066ca <_dtoa_r+0xf2>
 80066c8:	e07c      	b.n	80067c4 <_dtoa_r+0x1ec>
 80066ca:	9812      	ldr	r0, [sp, #72]	; 0x48
 80066cc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80066ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80066d0:	4a94      	ldr	r2, [pc, #592]	; (8006924 <_dtoa_r+0x34c>)
 80066d2:	031b      	lsls	r3, r3, #12
 80066d4:	0b1b      	lsrs	r3, r3, #12
 80066d6:	431a      	orrs	r2, r3
 80066d8:	0011      	movs	r1, r2
 80066da:	4b93      	ldr	r3, [pc, #588]	; (8006928 <_dtoa_r+0x350>)
 80066dc:	9416      	str	r4, [sp, #88]	; 0x58
 80066de:	18f6      	adds	r6, r6, r3
 80066e0:	2200      	movs	r2, #0
 80066e2:	4b92      	ldr	r3, [pc, #584]	; (800692c <_dtoa_r+0x354>)
 80066e4:	f7fb fb1c 	bl	8001d20 <__aeabi_dsub>
 80066e8:	4a91      	ldr	r2, [pc, #580]	; (8006930 <_dtoa_r+0x358>)
 80066ea:	4b92      	ldr	r3, [pc, #584]	; (8006934 <_dtoa_r+0x35c>)
 80066ec:	f7fb f8ac 	bl	8001848 <__aeabi_dmul>
 80066f0:	4a91      	ldr	r2, [pc, #580]	; (8006938 <_dtoa_r+0x360>)
 80066f2:	4b92      	ldr	r3, [pc, #584]	; (800693c <_dtoa_r+0x364>)
 80066f4:	f7fa f938 	bl	8000968 <__aeabi_dadd>
 80066f8:	0004      	movs	r4, r0
 80066fa:	0030      	movs	r0, r6
 80066fc:	000d      	movs	r5, r1
 80066fe:	f7fb fef5 	bl	80024ec <__aeabi_i2d>
 8006702:	4a8f      	ldr	r2, [pc, #572]	; (8006940 <_dtoa_r+0x368>)
 8006704:	4b8f      	ldr	r3, [pc, #572]	; (8006944 <_dtoa_r+0x36c>)
 8006706:	f7fb f89f 	bl	8001848 <__aeabi_dmul>
 800670a:	0002      	movs	r2, r0
 800670c:	000b      	movs	r3, r1
 800670e:	0020      	movs	r0, r4
 8006710:	0029      	movs	r1, r5
 8006712:	f7fa f929 	bl	8000968 <__aeabi_dadd>
 8006716:	0004      	movs	r4, r0
 8006718:	000d      	movs	r5, r1
 800671a:	f7fb feb1 	bl	8002480 <__aeabi_d2iz>
 800671e:	2200      	movs	r2, #0
 8006720:	9002      	str	r0, [sp, #8]
 8006722:	2300      	movs	r3, #0
 8006724:	0020      	movs	r0, r4
 8006726:	0029      	movs	r1, r5
 8006728:	f7f9 fe94 	bl	8000454 <__aeabi_dcmplt>
 800672c:	2800      	cmp	r0, #0
 800672e:	d00b      	beq.n	8006748 <_dtoa_r+0x170>
 8006730:	9802      	ldr	r0, [sp, #8]
 8006732:	f7fb fedb 	bl	80024ec <__aeabi_i2d>
 8006736:	002b      	movs	r3, r5
 8006738:	0022      	movs	r2, r4
 800673a:	f7f9 fe85 	bl	8000448 <__aeabi_dcmpeq>
 800673e:	4243      	negs	r3, r0
 8006740:	4158      	adcs	r0, r3
 8006742:	9b02      	ldr	r3, [sp, #8]
 8006744:	1a1b      	subs	r3, r3, r0
 8006746:	9302      	str	r3, [sp, #8]
 8006748:	2301      	movs	r3, #1
 800674a:	9315      	str	r3, [sp, #84]	; 0x54
 800674c:	9b02      	ldr	r3, [sp, #8]
 800674e:	2b16      	cmp	r3, #22
 8006750:	d80f      	bhi.n	8006772 <_dtoa_r+0x19a>
 8006752:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006754:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006756:	00da      	lsls	r2, r3, #3
 8006758:	4b7b      	ldr	r3, [pc, #492]	; (8006948 <_dtoa_r+0x370>)
 800675a:	189b      	adds	r3, r3, r2
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f7f9 fe78 	bl	8000454 <__aeabi_dcmplt>
 8006764:	2800      	cmp	r0, #0
 8006766:	d049      	beq.n	80067fc <_dtoa_r+0x224>
 8006768:	9b02      	ldr	r3, [sp, #8]
 800676a:	3b01      	subs	r3, #1
 800676c:	9302      	str	r3, [sp, #8]
 800676e:	2300      	movs	r3, #0
 8006770:	9315      	str	r3, [sp, #84]	; 0x54
 8006772:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006774:	1b9e      	subs	r6, r3, r6
 8006776:	2300      	movs	r3, #0
 8006778:	9308      	str	r3, [sp, #32]
 800677a:	0033      	movs	r3, r6
 800677c:	3b01      	subs	r3, #1
 800677e:	930d      	str	r3, [sp, #52]	; 0x34
 8006780:	d504      	bpl.n	800678c <_dtoa_r+0x1b4>
 8006782:	2301      	movs	r3, #1
 8006784:	1b9b      	subs	r3, r3, r6
 8006786:	9308      	str	r3, [sp, #32]
 8006788:	2300      	movs	r3, #0
 800678a:	930d      	str	r3, [sp, #52]	; 0x34
 800678c:	9b02      	ldr	r3, [sp, #8]
 800678e:	2b00      	cmp	r3, #0
 8006790:	db36      	blt.n	8006800 <_dtoa_r+0x228>
 8006792:	9a02      	ldr	r2, [sp, #8]
 8006794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006796:	4694      	mov	ip, r2
 8006798:	4463      	add	r3, ip
 800679a:	930d      	str	r3, [sp, #52]	; 0x34
 800679c:	2300      	movs	r3, #0
 800679e:	9214      	str	r2, [sp, #80]	; 0x50
 80067a0:	930e      	str	r3, [sp, #56]	; 0x38
 80067a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067a4:	2401      	movs	r4, #1
 80067a6:	2b09      	cmp	r3, #9
 80067a8:	d862      	bhi.n	8006870 <_dtoa_r+0x298>
 80067aa:	2b05      	cmp	r3, #5
 80067ac:	dd02      	ble.n	80067b4 <_dtoa_r+0x1dc>
 80067ae:	2400      	movs	r4, #0
 80067b0:	3b04      	subs	r3, #4
 80067b2:	9322      	str	r3, [sp, #136]	; 0x88
 80067b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067b6:	1e98      	subs	r0, r3, #2
 80067b8:	2803      	cmp	r0, #3
 80067ba:	d862      	bhi.n	8006882 <_dtoa_r+0x2aa>
 80067bc:	f7f9 fcaa 	bl	8000114 <__gnu_thumb1_case_uqi>
 80067c0:	56343629 	.word	0x56343629
 80067c4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80067c6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80067c8:	189e      	adds	r6, r3, r2
 80067ca:	4b60      	ldr	r3, [pc, #384]	; (800694c <_dtoa_r+0x374>)
 80067cc:	18f2      	adds	r2, r6, r3
 80067ce:	2a20      	cmp	r2, #32
 80067d0:	dd0f      	ble.n	80067f2 <_dtoa_r+0x21a>
 80067d2:	2340      	movs	r3, #64	; 0x40
 80067d4:	1a9b      	subs	r3, r3, r2
 80067d6:	409d      	lsls	r5, r3
 80067d8:	4b5d      	ldr	r3, [pc, #372]	; (8006950 <_dtoa_r+0x378>)
 80067da:	9802      	ldr	r0, [sp, #8]
 80067dc:	18f3      	adds	r3, r6, r3
 80067de:	40d8      	lsrs	r0, r3
 80067e0:	4328      	orrs	r0, r5
 80067e2:	f7fb feb3 	bl	800254c <__aeabi_ui2d>
 80067e6:	2301      	movs	r3, #1
 80067e8:	4c5a      	ldr	r4, [pc, #360]	; (8006954 <_dtoa_r+0x37c>)
 80067ea:	3e01      	subs	r6, #1
 80067ec:	1909      	adds	r1, r1, r4
 80067ee:	9316      	str	r3, [sp, #88]	; 0x58
 80067f0:	e776      	b.n	80066e0 <_dtoa_r+0x108>
 80067f2:	2320      	movs	r3, #32
 80067f4:	9802      	ldr	r0, [sp, #8]
 80067f6:	1a9b      	subs	r3, r3, r2
 80067f8:	4098      	lsls	r0, r3
 80067fa:	e7f2      	b.n	80067e2 <_dtoa_r+0x20a>
 80067fc:	9015      	str	r0, [sp, #84]	; 0x54
 80067fe:	e7b8      	b.n	8006772 <_dtoa_r+0x19a>
 8006800:	9b08      	ldr	r3, [sp, #32]
 8006802:	9a02      	ldr	r2, [sp, #8]
 8006804:	1a9b      	subs	r3, r3, r2
 8006806:	9308      	str	r3, [sp, #32]
 8006808:	4253      	negs	r3, r2
 800680a:	930e      	str	r3, [sp, #56]	; 0x38
 800680c:	2300      	movs	r3, #0
 800680e:	9314      	str	r3, [sp, #80]	; 0x50
 8006810:	e7c7      	b.n	80067a2 <_dtoa_r+0x1ca>
 8006812:	2300      	movs	r3, #0
 8006814:	930f      	str	r3, [sp, #60]	; 0x3c
 8006816:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006818:	2b00      	cmp	r3, #0
 800681a:	dc36      	bgt.n	800688a <_dtoa_r+0x2b2>
 800681c:	2301      	movs	r3, #1
 800681e:	001a      	movs	r2, r3
 8006820:	930c      	str	r3, [sp, #48]	; 0x30
 8006822:	9306      	str	r3, [sp, #24]
 8006824:	9223      	str	r2, [sp, #140]	; 0x8c
 8006826:	e00d      	b.n	8006844 <_dtoa_r+0x26c>
 8006828:	2301      	movs	r3, #1
 800682a:	e7f3      	b.n	8006814 <_dtoa_r+0x23c>
 800682c:	2300      	movs	r3, #0
 800682e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8006830:	930f      	str	r3, [sp, #60]	; 0x3c
 8006832:	4694      	mov	ip, r2
 8006834:	9b02      	ldr	r3, [sp, #8]
 8006836:	4463      	add	r3, ip
 8006838:	930c      	str	r3, [sp, #48]	; 0x30
 800683a:	3301      	adds	r3, #1
 800683c:	9306      	str	r3, [sp, #24]
 800683e:	2b00      	cmp	r3, #0
 8006840:	dc00      	bgt.n	8006844 <_dtoa_r+0x26c>
 8006842:	2301      	movs	r3, #1
 8006844:	2200      	movs	r2, #0
 8006846:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006848:	6042      	str	r2, [r0, #4]
 800684a:	3204      	adds	r2, #4
 800684c:	0015      	movs	r5, r2
 800684e:	3514      	adds	r5, #20
 8006850:	6841      	ldr	r1, [r0, #4]
 8006852:	429d      	cmp	r5, r3
 8006854:	d91d      	bls.n	8006892 <_dtoa_r+0x2ba>
 8006856:	0038      	movs	r0, r7
 8006858:	f000 fcfe 	bl	8007258 <_Balloc>
 800685c:	9005      	str	r0, [sp, #20]
 800685e:	2800      	cmp	r0, #0
 8006860:	d11b      	bne.n	800689a <_dtoa_r+0x2c2>
 8006862:	21d5      	movs	r1, #213	; 0xd5
 8006864:	0002      	movs	r2, r0
 8006866:	4b3c      	ldr	r3, [pc, #240]	; (8006958 <_dtoa_r+0x380>)
 8006868:	0049      	lsls	r1, r1, #1
 800686a:	e6ca      	b.n	8006602 <_dtoa_r+0x2a>
 800686c:	2301      	movs	r3, #1
 800686e:	e7de      	b.n	800682e <_dtoa_r+0x256>
 8006870:	2300      	movs	r3, #0
 8006872:	940f      	str	r4, [sp, #60]	; 0x3c
 8006874:	9322      	str	r3, [sp, #136]	; 0x88
 8006876:	3b01      	subs	r3, #1
 8006878:	930c      	str	r3, [sp, #48]	; 0x30
 800687a:	9306      	str	r3, [sp, #24]
 800687c:	2200      	movs	r2, #0
 800687e:	3313      	adds	r3, #19
 8006880:	e7d0      	b.n	8006824 <_dtoa_r+0x24c>
 8006882:	2301      	movs	r3, #1
 8006884:	930f      	str	r3, [sp, #60]	; 0x3c
 8006886:	3b02      	subs	r3, #2
 8006888:	e7f6      	b.n	8006878 <_dtoa_r+0x2a0>
 800688a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800688c:	930c      	str	r3, [sp, #48]	; 0x30
 800688e:	9306      	str	r3, [sp, #24]
 8006890:	e7d8      	b.n	8006844 <_dtoa_r+0x26c>
 8006892:	3101      	adds	r1, #1
 8006894:	6041      	str	r1, [r0, #4]
 8006896:	0052      	lsls	r2, r2, #1
 8006898:	e7d8      	b.n	800684c <_dtoa_r+0x274>
 800689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689c:	9a05      	ldr	r2, [sp, #20]
 800689e:	601a      	str	r2, [r3, #0]
 80068a0:	9b06      	ldr	r3, [sp, #24]
 80068a2:	2b0e      	cmp	r3, #14
 80068a4:	d900      	bls.n	80068a8 <_dtoa_r+0x2d0>
 80068a6:	e0eb      	b.n	8006a80 <_dtoa_r+0x4a8>
 80068a8:	2c00      	cmp	r4, #0
 80068aa:	d100      	bne.n	80068ae <_dtoa_r+0x2d6>
 80068ac:	e0e8      	b.n	8006a80 <_dtoa_r+0x4a8>
 80068ae:	9b02      	ldr	r3, [sp, #8]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	dd68      	ble.n	8006986 <_dtoa_r+0x3ae>
 80068b4:	001a      	movs	r2, r3
 80068b6:	210f      	movs	r1, #15
 80068b8:	4b23      	ldr	r3, [pc, #140]	; (8006948 <_dtoa_r+0x370>)
 80068ba:	400a      	ands	r2, r1
 80068bc:	00d2      	lsls	r2, r2, #3
 80068be:	189b      	adds	r3, r3, r2
 80068c0:	681d      	ldr	r5, [r3, #0]
 80068c2:	685e      	ldr	r6, [r3, #4]
 80068c4:	9b02      	ldr	r3, [sp, #8]
 80068c6:	111c      	asrs	r4, r3, #4
 80068c8:	2302      	movs	r3, #2
 80068ca:	9310      	str	r3, [sp, #64]	; 0x40
 80068cc:	9b02      	ldr	r3, [sp, #8]
 80068ce:	05db      	lsls	r3, r3, #23
 80068d0:	d50b      	bpl.n	80068ea <_dtoa_r+0x312>
 80068d2:	4b22      	ldr	r3, [pc, #136]	; (800695c <_dtoa_r+0x384>)
 80068d4:	400c      	ands	r4, r1
 80068d6:	6a1a      	ldr	r2, [r3, #32]
 80068d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068da:	9812      	ldr	r0, [sp, #72]	; 0x48
 80068dc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80068de:	f7fa fbad 	bl	800103c <__aeabi_ddiv>
 80068e2:	2303      	movs	r3, #3
 80068e4:	900a      	str	r0, [sp, #40]	; 0x28
 80068e6:	910b      	str	r1, [sp, #44]	; 0x2c
 80068e8:	9310      	str	r3, [sp, #64]	; 0x40
 80068ea:	4b1c      	ldr	r3, [pc, #112]	; (800695c <_dtoa_r+0x384>)
 80068ec:	9307      	str	r3, [sp, #28]
 80068ee:	2c00      	cmp	r4, #0
 80068f0:	d136      	bne.n	8006960 <_dtoa_r+0x388>
 80068f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80068f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80068f6:	002a      	movs	r2, r5
 80068f8:	0033      	movs	r3, r6
 80068fa:	f7fa fb9f 	bl	800103c <__aeabi_ddiv>
 80068fe:	900a      	str	r0, [sp, #40]	; 0x28
 8006900:	910b      	str	r1, [sp, #44]	; 0x2c
 8006902:	e05c      	b.n	80069be <_dtoa_r+0x3e6>
 8006904:	08009189 	.word	0x08009189
 8006908:	080091a0 	.word	0x080091a0
 800690c:	7ff00000 	.word	0x7ff00000
 8006910:	0000270f 	.word	0x0000270f
 8006914:	08009185 	.word	0x08009185
 8006918:	08009188 	.word	0x08009188
 800691c:	08009158 	.word	0x08009158
 8006920:	08009159 	.word	0x08009159
 8006924:	3ff00000 	.word	0x3ff00000
 8006928:	fffffc01 	.word	0xfffffc01
 800692c:	3ff80000 	.word	0x3ff80000
 8006930:	636f4361 	.word	0x636f4361
 8006934:	3fd287a7 	.word	0x3fd287a7
 8006938:	8b60c8b3 	.word	0x8b60c8b3
 800693c:	3fc68a28 	.word	0x3fc68a28
 8006940:	509f79fb 	.word	0x509f79fb
 8006944:	3fd34413 	.word	0x3fd34413
 8006948:	08009298 	.word	0x08009298
 800694c:	00000432 	.word	0x00000432
 8006950:	00000412 	.word	0x00000412
 8006954:	fe100000 	.word	0xfe100000
 8006958:	080091ff 	.word	0x080091ff
 800695c:	08009270 	.word	0x08009270
 8006960:	2301      	movs	r3, #1
 8006962:	421c      	tst	r4, r3
 8006964:	d00b      	beq.n	800697e <_dtoa_r+0x3a6>
 8006966:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006968:	0028      	movs	r0, r5
 800696a:	3301      	adds	r3, #1
 800696c:	9310      	str	r3, [sp, #64]	; 0x40
 800696e:	9b07      	ldr	r3, [sp, #28]
 8006970:	0031      	movs	r1, r6
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	f7fa ff67 	bl	8001848 <__aeabi_dmul>
 800697a:	0005      	movs	r5, r0
 800697c:	000e      	movs	r6, r1
 800697e:	9b07      	ldr	r3, [sp, #28]
 8006980:	1064      	asrs	r4, r4, #1
 8006982:	3308      	adds	r3, #8
 8006984:	e7b2      	b.n	80068ec <_dtoa_r+0x314>
 8006986:	2302      	movs	r3, #2
 8006988:	9310      	str	r3, [sp, #64]	; 0x40
 800698a:	9b02      	ldr	r3, [sp, #8]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d016      	beq.n	80069be <_dtoa_r+0x3e6>
 8006990:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006992:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006994:	425c      	negs	r4, r3
 8006996:	230f      	movs	r3, #15
 8006998:	4ab5      	ldr	r2, [pc, #724]	; (8006c70 <_dtoa_r+0x698>)
 800699a:	4023      	ands	r3, r4
 800699c:	00db      	lsls	r3, r3, #3
 800699e:	18d3      	adds	r3, r2, r3
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f7fa ff50 	bl	8001848 <__aeabi_dmul>
 80069a8:	2601      	movs	r6, #1
 80069aa:	2300      	movs	r3, #0
 80069ac:	900a      	str	r0, [sp, #40]	; 0x28
 80069ae:	910b      	str	r1, [sp, #44]	; 0x2c
 80069b0:	4db0      	ldr	r5, [pc, #704]	; (8006c74 <_dtoa_r+0x69c>)
 80069b2:	1124      	asrs	r4, r4, #4
 80069b4:	2c00      	cmp	r4, #0
 80069b6:	d000      	beq.n	80069ba <_dtoa_r+0x3e2>
 80069b8:	e094      	b.n	8006ae4 <_dtoa_r+0x50c>
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d19f      	bne.n	80068fe <_dtoa_r+0x326>
 80069be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d100      	bne.n	80069c6 <_dtoa_r+0x3ee>
 80069c4:	e09b      	b.n	8006afe <_dtoa_r+0x526>
 80069c6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80069c8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80069ca:	2200      	movs	r2, #0
 80069cc:	0020      	movs	r0, r4
 80069ce:	0029      	movs	r1, r5
 80069d0:	4ba9      	ldr	r3, [pc, #676]	; (8006c78 <_dtoa_r+0x6a0>)
 80069d2:	f7f9 fd3f 	bl	8000454 <__aeabi_dcmplt>
 80069d6:	2800      	cmp	r0, #0
 80069d8:	d100      	bne.n	80069dc <_dtoa_r+0x404>
 80069da:	e090      	b.n	8006afe <_dtoa_r+0x526>
 80069dc:	9b06      	ldr	r3, [sp, #24]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d100      	bne.n	80069e4 <_dtoa_r+0x40c>
 80069e2:	e08c      	b.n	8006afe <_dtoa_r+0x526>
 80069e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	dd46      	ble.n	8006a78 <_dtoa_r+0x4a0>
 80069ea:	9b02      	ldr	r3, [sp, #8]
 80069ec:	2200      	movs	r2, #0
 80069ee:	0020      	movs	r0, r4
 80069f0:	0029      	movs	r1, r5
 80069f2:	1e5e      	subs	r6, r3, #1
 80069f4:	4ba1      	ldr	r3, [pc, #644]	; (8006c7c <_dtoa_r+0x6a4>)
 80069f6:	f7fa ff27 	bl	8001848 <__aeabi_dmul>
 80069fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80069fc:	900a      	str	r0, [sp, #40]	; 0x28
 80069fe:	910b      	str	r1, [sp, #44]	; 0x2c
 8006a00:	3301      	adds	r3, #1
 8006a02:	9310      	str	r3, [sp, #64]	; 0x40
 8006a04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a06:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006a08:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006a0a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006a0c:	9307      	str	r3, [sp, #28]
 8006a0e:	f7fb fd6d 	bl	80024ec <__aeabi_i2d>
 8006a12:	0022      	movs	r2, r4
 8006a14:	002b      	movs	r3, r5
 8006a16:	f7fa ff17 	bl	8001848 <__aeabi_dmul>
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	4b98      	ldr	r3, [pc, #608]	; (8006c80 <_dtoa_r+0x6a8>)
 8006a1e:	f7f9 ffa3 	bl	8000968 <__aeabi_dadd>
 8006a22:	9010      	str	r0, [sp, #64]	; 0x40
 8006a24:	9111      	str	r1, [sp, #68]	; 0x44
 8006a26:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006a28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a2a:	920a      	str	r2, [sp, #40]	; 0x28
 8006a2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a2e:	4a95      	ldr	r2, [pc, #596]	; (8006c84 <_dtoa_r+0x6ac>)
 8006a30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a32:	4694      	mov	ip, r2
 8006a34:	4463      	add	r3, ip
 8006a36:	9317      	str	r3, [sp, #92]	; 0x5c
 8006a38:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a3a:	9b07      	ldr	r3, [sp, #28]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d161      	bne.n	8006b04 <_dtoa_r+0x52c>
 8006a40:	2200      	movs	r2, #0
 8006a42:	0020      	movs	r0, r4
 8006a44:	0029      	movs	r1, r5
 8006a46:	4b90      	ldr	r3, [pc, #576]	; (8006c88 <_dtoa_r+0x6b0>)
 8006a48:	f7fb f96a 	bl	8001d20 <__aeabi_dsub>
 8006a4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a50:	0004      	movs	r4, r0
 8006a52:	000d      	movs	r5, r1
 8006a54:	f7f9 fd12 	bl	800047c <__aeabi_dcmpgt>
 8006a58:	2800      	cmp	r0, #0
 8006a5a:	d000      	beq.n	8006a5e <_dtoa_r+0x486>
 8006a5c:	e2b5      	b.n	8006fca <_dtoa_r+0x9f2>
 8006a5e:	488b      	ldr	r0, [pc, #556]	; (8006c8c <_dtoa_r+0x6b4>)
 8006a60:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006a62:	4684      	mov	ip, r0
 8006a64:	4461      	add	r1, ip
 8006a66:	000b      	movs	r3, r1
 8006a68:	0020      	movs	r0, r4
 8006a6a:	0029      	movs	r1, r5
 8006a6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a6e:	f7f9 fcf1 	bl	8000454 <__aeabi_dcmplt>
 8006a72:	2800      	cmp	r0, #0
 8006a74:	d000      	beq.n	8006a78 <_dtoa_r+0x4a0>
 8006a76:	e2a5      	b.n	8006fc4 <_dtoa_r+0x9ec>
 8006a78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a7a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8006a7c:	930a      	str	r3, [sp, #40]	; 0x28
 8006a7e:	940b      	str	r4, [sp, #44]	; 0x2c
 8006a80:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	da00      	bge.n	8006a88 <_dtoa_r+0x4b0>
 8006a86:	e171      	b.n	8006d6c <_dtoa_r+0x794>
 8006a88:	9a02      	ldr	r2, [sp, #8]
 8006a8a:	2a0e      	cmp	r2, #14
 8006a8c:	dd00      	ble.n	8006a90 <_dtoa_r+0x4b8>
 8006a8e:	e16d      	b.n	8006d6c <_dtoa_r+0x794>
 8006a90:	4b77      	ldr	r3, [pc, #476]	; (8006c70 <_dtoa_r+0x698>)
 8006a92:	00d2      	lsls	r2, r2, #3
 8006a94:	189b      	adds	r3, r3, r2
 8006a96:	685c      	ldr	r4, [r3, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	9308      	str	r3, [sp, #32]
 8006a9c:	9409      	str	r4, [sp, #36]	; 0x24
 8006a9e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	db00      	blt.n	8006aa6 <_dtoa_r+0x4ce>
 8006aa4:	e0f6      	b.n	8006c94 <_dtoa_r+0x6bc>
 8006aa6:	9b06      	ldr	r3, [sp, #24]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	dd00      	ble.n	8006aae <_dtoa_r+0x4d6>
 8006aac:	e0f2      	b.n	8006c94 <_dtoa_r+0x6bc>
 8006aae:	d000      	beq.n	8006ab2 <_dtoa_r+0x4da>
 8006ab0:	e288      	b.n	8006fc4 <_dtoa_r+0x9ec>
 8006ab2:	9808      	ldr	r0, [sp, #32]
 8006ab4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	4b73      	ldr	r3, [pc, #460]	; (8006c88 <_dtoa_r+0x6b0>)
 8006aba:	f7fa fec5 	bl	8001848 <__aeabi_dmul>
 8006abe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ac0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ac2:	f7f9 fce5 	bl	8000490 <__aeabi_dcmpge>
 8006ac6:	9e06      	ldr	r6, [sp, #24]
 8006ac8:	0035      	movs	r5, r6
 8006aca:	2800      	cmp	r0, #0
 8006acc:	d000      	beq.n	8006ad0 <_dtoa_r+0x4f8>
 8006ace:	e25f      	b.n	8006f90 <_dtoa_r+0x9b8>
 8006ad0:	9b05      	ldr	r3, [sp, #20]
 8006ad2:	9a05      	ldr	r2, [sp, #20]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	9307      	str	r3, [sp, #28]
 8006ad8:	2331      	movs	r3, #49	; 0x31
 8006ada:	7013      	strb	r3, [r2, #0]
 8006adc:	9b02      	ldr	r3, [sp, #8]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	9302      	str	r3, [sp, #8]
 8006ae2:	e25a      	b.n	8006f9a <_dtoa_r+0x9c2>
 8006ae4:	4234      	tst	r4, r6
 8006ae6:	d007      	beq.n	8006af8 <_dtoa_r+0x520>
 8006ae8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006aea:	3301      	adds	r3, #1
 8006aec:	9310      	str	r3, [sp, #64]	; 0x40
 8006aee:	682a      	ldr	r2, [r5, #0]
 8006af0:	686b      	ldr	r3, [r5, #4]
 8006af2:	f7fa fea9 	bl	8001848 <__aeabi_dmul>
 8006af6:	0033      	movs	r3, r6
 8006af8:	1064      	asrs	r4, r4, #1
 8006afa:	3508      	adds	r5, #8
 8006afc:	e75a      	b.n	80069b4 <_dtoa_r+0x3dc>
 8006afe:	9e02      	ldr	r6, [sp, #8]
 8006b00:	9b06      	ldr	r3, [sp, #24]
 8006b02:	e780      	b.n	8006a06 <_dtoa_r+0x42e>
 8006b04:	9b07      	ldr	r3, [sp, #28]
 8006b06:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006b08:	1e5a      	subs	r2, r3, #1
 8006b0a:	4b59      	ldr	r3, [pc, #356]	; (8006c70 <_dtoa_r+0x698>)
 8006b0c:	00d2      	lsls	r2, r2, #3
 8006b0e:	189b      	adds	r3, r3, r2
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	2900      	cmp	r1, #0
 8006b16:	d051      	beq.n	8006bbc <_dtoa_r+0x5e4>
 8006b18:	2000      	movs	r0, #0
 8006b1a:	495d      	ldr	r1, [pc, #372]	; (8006c90 <_dtoa_r+0x6b8>)
 8006b1c:	f7fa fa8e 	bl	800103c <__aeabi_ddiv>
 8006b20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b24:	f7fb f8fc 	bl	8001d20 <__aeabi_dsub>
 8006b28:	9a05      	ldr	r2, [sp, #20]
 8006b2a:	9b05      	ldr	r3, [sp, #20]
 8006b2c:	4694      	mov	ip, r2
 8006b2e:	9310      	str	r3, [sp, #64]	; 0x40
 8006b30:	9b07      	ldr	r3, [sp, #28]
 8006b32:	900a      	str	r0, [sp, #40]	; 0x28
 8006b34:	910b      	str	r1, [sp, #44]	; 0x2c
 8006b36:	4463      	add	r3, ip
 8006b38:	9319      	str	r3, [sp, #100]	; 0x64
 8006b3a:	0029      	movs	r1, r5
 8006b3c:	0020      	movs	r0, r4
 8006b3e:	f7fb fc9f 	bl	8002480 <__aeabi_d2iz>
 8006b42:	9017      	str	r0, [sp, #92]	; 0x5c
 8006b44:	f7fb fcd2 	bl	80024ec <__aeabi_i2d>
 8006b48:	0002      	movs	r2, r0
 8006b4a:	000b      	movs	r3, r1
 8006b4c:	0020      	movs	r0, r4
 8006b4e:	0029      	movs	r1, r5
 8006b50:	f7fb f8e6 	bl	8001d20 <__aeabi_dsub>
 8006b54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b56:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006b58:	3301      	adds	r3, #1
 8006b5a:	9307      	str	r3, [sp, #28]
 8006b5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b5e:	0004      	movs	r4, r0
 8006b60:	3330      	adds	r3, #48	; 0x30
 8006b62:	7013      	strb	r3, [r2, #0]
 8006b64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b68:	000d      	movs	r5, r1
 8006b6a:	f7f9 fc73 	bl	8000454 <__aeabi_dcmplt>
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	d175      	bne.n	8006c5e <_dtoa_r+0x686>
 8006b72:	0022      	movs	r2, r4
 8006b74:	002b      	movs	r3, r5
 8006b76:	2000      	movs	r0, #0
 8006b78:	493f      	ldr	r1, [pc, #252]	; (8006c78 <_dtoa_r+0x6a0>)
 8006b7a:	f7fb f8d1 	bl	8001d20 <__aeabi_dsub>
 8006b7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b82:	f7f9 fc67 	bl	8000454 <__aeabi_dcmplt>
 8006b86:	2800      	cmp	r0, #0
 8006b88:	d000      	beq.n	8006b8c <_dtoa_r+0x5b4>
 8006b8a:	e0d1      	b.n	8006d30 <_dtoa_r+0x758>
 8006b8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006b8e:	9a07      	ldr	r2, [sp, #28]
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d100      	bne.n	8006b96 <_dtoa_r+0x5be>
 8006b94:	e770      	b.n	8006a78 <_dtoa_r+0x4a0>
 8006b96:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006b98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	4b37      	ldr	r3, [pc, #220]	; (8006c7c <_dtoa_r+0x6a4>)
 8006b9e:	f7fa fe53 	bl	8001848 <__aeabi_dmul>
 8006ba2:	4b36      	ldr	r3, [pc, #216]	; (8006c7c <_dtoa_r+0x6a4>)
 8006ba4:	900a      	str	r0, [sp, #40]	; 0x28
 8006ba6:	910b      	str	r1, [sp, #44]	; 0x2c
 8006ba8:	2200      	movs	r2, #0
 8006baa:	0020      	movs	r0, r4
 8006bac:	0029      	movs	r1, r5
 8006bae:	f7fa fe4b 	bl	8001848 <__aeabi_dmul>
 8006bb2:	9b07      	ldr	r3, [sp, #28]
 8006bb4:	0004      	movs	r4, r0
 8006bb6:	000d      	movs	r5, r1
 8006bb8:	9310      	str	r3, [sp, #64]	; 0x40
 8006bba:	e7be      	b.n	8006b3a <_dtoa_r+0x562>
 8006bbc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006bbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006bc0:	f7fa fe42 	bl	8001848 <__aeabi_dmul>
 8006bc4:	9a05      	ldr	r2, [sp, #20]
 8006bc6:	9b05      	ldr	r3, [sp, #20]
 8006bc8:	4694      	mov	ip, r2
 8006bca:	930a      	str	r3, [sp, #40]	; 0x28
 8006bcc:	9b07      	ldr	r3, [sp, #28]
 8006bce:	9010      	str	r0, [sp, #64]	; 0x40
 8006bd0:	9111      	str	r1, [sp, #68]	; 0x44
 8006bd2:	4463      	add	r3, ip
 8006bd4:	9319      	str	r3, [sp, #100]	; 0x64
 8006bd6:	0029      	movs	r1, r5
 8006bd8:	0020      	movs	r0, r4
 8006bda:	f7fb fc51 	bl	8002480 <__aeabi_d2iz>
 8006bde:	9017      	str	r0, [sp, #92]	; 0x5c
 8006be0:	f7fb fc84 	bl	80024ec <__aeabi_i2d>
 8006be4:	0002      	movs	r2, r0
 8006be6:	000b      	movs	r3, r1
 8006be8:	0020      	movs	r0, r4
 8006bea:	0029      	movs	r1, r5
 8006bec:	f7fb f898 	bl	8001d20 <__aeabi_dsub>
 8006bf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006bf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bf4:	3330      	adds	r3, #48	; 0x30
 8006bf6:	7013      	strb	r3, [r2, #0]
 8006bf8:	0013      	movs	r3, r2
 8006bfa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	0004      	movs	r4, r0
 8006c00:	000d      	movs	r5, r1
 8006c02:	930a      	str	r3, [sp, #40]	; 0x28
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d12c      	bne.n	8006c62 <_dtoa_r+0x68a>
 8006c08:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006c0a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006c0c:	9a05      	ldr	r2, [sp, #20]
 8006c0e:	9b07      	ldr	r3, [sp, #28]
 8006c10:	4694      	mov	ip, r2
 8006c12:	4463      	add	r3, ip
 8006c14:	2200      	movs	r2, #0
 8006c16:	9307      	str	r3, [sp, #28]
 8006c18:	4b1d      	ldr	r3, [pc, #116]	; (8006c90 <_dtoa_r+0x6b8>)
 8006c1a:	f7f9 fea5 	bl	8000968 <__aeabi_dadd>
 8006c1e:	0002      	movs	r2, r0
 8006c20:	000b      	movs	r3, r1
 8006c22:	0020      	movs	r0, r4
 8006c24:	0029      	movs	r1, r5
 8006c26:	f7f9 fc29 	bl	800047c <__aeabi_dcmpgt>
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	d000      	beq.n	8006c30 <_dtoa_r+0x658>
 8006c2e:	e07f      	b.n	8006d30 <_dtoa_r+0x758>
 8006c30:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006c32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c34:	2000      	movs	r0, #0
 8006c36:	4916      	ldr	r1, [pc, #88]	; (8006c90 <_dtoa_r+0x6b8>)
 8006c38:	f7fb f872 	bl	8001d20 <__aeabi_dsub>
 8006c3c:	0002      	movs	r2, r0
 8006c3e:	000b      	movs	r3, r1
 8006c40:	0020      	movs	r0, r4
 8006c42:	0029      	movs	r1, r5
 8006c44:	f7f9 fc06 	bl	8000454 <__aeabi_dcmplt>
 8006c48:	2800      	cmp	r0, #0
 8006c4a:	d100      	bne.n	8006c4e <_dtoa_r+0x676>
 8006c4c:	e714      	b.n	8006a78 <_dtoa_r+0x4a0>
 8006c4e:	9b07      	ldr	r3, [sp, #28]
 8006c50:	001a      	movs	r2, r3
 8006c52:	3a01      	subs	r2, #1
 8006c54:	9207      	str	r2, [sp, #28]
 8006c56:	7812      	ldrb	r2, [r2, #0]
 8006c58:	2a30      	cmp	r2, #48	; 0x30
 8006c5a:	d0f8      	beq.n	8006c4e <_dtoa_r+0x676>
 8006c5c:	9307      	str	r3, [sp, #28]
 8006c5e:	9602      	str	r6, [sp, #8]
 8006c60:	e054      	b.n	8006d0c <_dtoa_r+0x734>
 8006c62:	2200      	movs	r2, #0
 8006c64:	4b05      	ldr	r3, [pc, #20]	; (8006c7c <_dtoa_r+0x6a4>)
 8006c66:	f7fa fdef 	bl	8001848 <__aeabi_dmul>
 8006c6a:	0004      	movs	r4, r0
 8006c6c:	000d      	movs	r5, r1
 8006c6e:	e7b2      	b.n	8006bd6 <_dtoa_r+0x5fe>
 8006c70:	08009298 	.word	0x08009298
 8006c74:	08009270 	.word	0x08009270
 8006c78:	3ff00000 	.word	0x3ff00000
 8006c7c:	40240000 	.word	0x40240000
 8006c80:	401c0000 	.word	0x401c0000
 8006c84:	fcc00000 	.word	0xfcc00000
 8006c88:	40140000 	.word	0x40140000
 8006c8c:	7cc00000 	.word	0x7cc00000
 8006c90:	3fe00000 	.word	0x3fe00000
 8006c94:	9b06      	ldr	r3, [sp, #24]
 8006c96:	9e05      	ldr	r6, [sp, #20]
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	199b      	adds	r3, r3, r6
 8006c9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006c9e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006ca0:	930a      	str	r3, [sp, #40]	; 0x28
 8006ca2:	9a08      	ldr	r2, [sp, #32]
 8006ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ca6:	0020      	movs	r0, r4
 8006ca8:	0029      	movs	r1, r5
 8006caa:	f7fa f9c7 	bl	800103c <__aeabi_ddiv>
 8006cae:	f7fb fbe7 	bl	8002480 <__aeabi_d2iz>
 8006cb2:	9006      	str	r0, [sp, #24]
 8006cb4:	f7fb fc1a 	bl	80024ec <__aeabi_i2d>
 8006cb8:	9a08      	ldr	r2, [sp, #32]
 8006cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cbc:	f7fa fdc4 	bl	8001848 <__aeabi_dmul>
 8006cc0:	0002      	movs	r2, r0
 8006cc2:	000b      	movs	r3, r1
 8006cc4:	0020      	movs	r0, r4
 8006cc6:	0029      	movs	r1, r5
 8006cc8:	f7fb f82a 	bl	8001d20 <__aeabi_dsub>
 8006ccc:	0033      	movs	r3, r6
 8006cce:	9a06      	ldr	r2, [sp, #24]
 8006cd0:	3601      	adds	r6, #1
 8006cd2:	3230      	adds	r2, #48	; 0x30
 8006cd4:	701a      	strb	r2, [r3, #0]
 8006cd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cd8:	9607      	str	r6, [sp, #28]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d139      	bne.n	8006d52 <_dtoa_r+0x77a>
 8006cde:	0002      	movs	r2, r0
 8006ce0:	000b      	movs	r3, r1
 8006ce2:	f7f9 fe41 	bl	8000968 <__aeabi_dadd>
 8006ce6:	9a08      	ldr	r2, [sp, #32]
 8006ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cea:	0004      	movs	r4, r0
 8006cec:	000d      	movs	r5, r1
 8006cee:	f7f9 fbc5 	bl	800047c <__aeabi_dcmpgt>
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	d11b      	bne.n	8006d2e <_dtoa_r+0x756>
 8006cf6:	9a08      	ldr	r2, [sp, #32]
 8006cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cfa:	0020      	movs	r0, r4
 8006cfc:	0029      	movs	r1, r5
 8006cfe:	f7f9 fba3 	bl	8000448 <__aeabi_dcmpeq>
 8006d02:	2800      	cmp	r0, #0
 8006d04:	d002      	beq.n	8006d0c <_dtoa_r+0x734>
 8006d06:	9b06      	ldr	r3, [sp, #24]
 8006d08:	07db      	lsls	r3, r3, #31
 8006d0a:	d410      	bmi.n	8006d2e <_dtoa_r+0x756>
 8006d0c:	0038      	movs	r0, r7
 8006d0e:	9904      	ldr	r1, [sp, #16]
 8006d10:	f000 fae6 	bl	80072e0 <_Bfree>
 8006d14:	2300      	movs	r3, #0
 8006d16:	9a07      	ldr	r2, [sp, #28]
 8006d18:	9802      	ldr	r0, [sp, #8]
 8006d1a:	7013      	strb	r3, [r2, #0]
 8006d1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006d1e:	3001      	adds	r0, #1
 8006d20:	6018      	str	r0, [r3, #0]
 8006d22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d100      	bne.n	8006d2a <_dtoa_r+0x752>
 8006d28:	e4a3      	b.n	8006672 <_dtoa_r+0x9a>
 8006d2a:	601a      	str	r2, [r3, #0]
 8006d2c:	e4a1      	b.n	8006672 <_dtoa_r+0x9a>
 8006d2e:	9e02      	ldr	r6, [sp, #8]
 8006d30:	9b07      	ldr	r3, [sp, #28]
 8006d32:	9307      	str	r3, [sp, #28]
 8006d34:	3b01      	subs	r3, #1
 8006d36:	781a      	ldrb	r2, [r3, #0]
 8006d38:	2a39      	cmp	r2, #57	; 0x39
 8006d3a:	d106      	bne.n	8006d4a <_dtoa_r+0x772>
 8006d3c:	9a05      	ldr	r2, [sp, #20]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d1f7      	bne.n	8006d32 <_dtoa_r+0x75a>
 8006d42:	2230      	movs	r2, #48	; 0x30
 8006d44:	9905      	ldr	r1, [sp, #20]
 8006d46:	3601      	adds	r6, #1
 8006d48:	700a      	strb	r2, [r1, #0]
 8006d4a:	781a      	ldrb	r2, [r3, #0]
 8006d4c:	3201      	adds	r2, #1
 8006d4e:	701a      	strb	r2, [r3, #0]
 8006d50:	e785      	b.n	8006c5e <_dtoa_r+0x686>
 8006d52:	2200      	movs	r2, #0
 8006d54:	4bad      	ldr	r3, [pc, #692]	; (800700c <_dtoa_r+0xa34>)
 8006d56:	f7fa fd77 	bl	8001848 <__aeabi_dmul>
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	0004      	movs	r4, r0
 8006d60:	000d      	movs	r5, r1
 8006d62:	f7f9 fb71 	bl	8000448 <__aeabi_dcmpeq>
 8006d66:	2800      	cmp	r0, #0
 8006d68:	d09b      	beq.n	8006ca2 <_dtoa_r+0x6ca>
 8006d6a:	e7cf      	b.n	8006d0c <_dtoa_r+0x734>
 8006d6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d6e:	2a00      	cmp	r2, #0
 8006d70:	d100      	bne.n	8006d74 <_dtoa_r+0x79c>
 8006d72:	e082      	b.n	8006e7a <_dtoa_r+0x8a2>
 8006d74:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006d76:	2a01      	cmp	r2, #1
 8006d78:	dc66      	bgt.n	8006e48 <_dtoa_r+0x870>
 8006d7a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006d7c:	2a00      	cmp	r2, #0
 8006d7e:	d05f      	beq.n	8006e40 <_dtoa_r+0x868>
 8006d80:	4aa3      	ldr	r2, [pc, #652]	; (8007010 <_dtoa_r+0xa38>)
 8006d82:	189b      	adds	r3, r3, r2
 8006d84:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006d86:	9c08      	ldr	r4, [sp, #32]
 8006d88:	9a08      	ldr	r2, [sp, #32]
 8006d8a:	2101      	movs	r1, #1
 8006d8c:	18d2      	adds	r2, r2, r3
 8006d8e:	9208      	str	r2, [sp, #32]
 8006d90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d92:	0038      	movs	r0, r7
 8006d94:	18d3      	adds	r3, r2, r3
 8006d96:	930d      	str	r3, [sp, #52]	; 0x34
 8006d98:	f000 fb52 	bl	8007440 <__i2b>
 8006d9c:	0005      	movs	r5, r0
 8006d9e:	2c00      	cmp	r4, #0
 8006da0:	dd0e      	ble.n	8006dc0 <_dtoa_r+0x7e8>
 8006da2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	dd0b      	ble.n	8006dc0 <_dtoa_r+0x7e8>
 8006da8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006daa:	0023      	movs	r3, r4
 8006dac:	4294      	cmp	r4, r2
 8006dae:	dd00      	ble.n	8006db2 <_dtoa_r+0x7da>
 8006db0:	0013      	movs	r3, r2
 8006db2:	9a08      	ldr	r2, [sp, #32]
 8006db4:	1ae4      	subs	r4, r4, r3
 8006db6:	1ad2      	subs	r2, r2, r3
 8006db8:	9208      	str	r2, [sp, #32]
 8006dba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	930d      	str	r3, [sp, #52]	; 0x34
 8006dc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d01f      	beq.n	8006e06 <_dtoa_r+0x82e>
 8006dc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d05a      	beq.n	8006e82 <_dtoa_r+0x8aa>
 8006dcc:	2e00      	cmp	r6, #0
 8006dce:	dd11      	ble.n	8006df4 <_dtoa_r+0x81c>
 8006dd0:	0029      	movs	r1, r5
 8006dd2:	0032      	movs	r2, r6
 8006dd4:	0038      	movs	r0, r7
 8006dd6:	f000 fbf9 	bl	80075cc <__pow5mult>
 8006dda:	9a04      	ldr	r2, [sp, #16]
 8006ddc:	0001      	movs	r1, r0
 8006dde:	0005      	movs	r5, r0
 8006de0:	0038      	movs	r0, r7
 8006de2:	f000 fb43 	bl	800746c <__multiply>
 8006de6:	9904      	ldr	r1, [sp, #16]
 8006de8:	9007      	str	r0, [sp, #28]
 8006dea:	0038      	movs	r0, r7
 8006dec:	f000 fa78 	bl	80072e0 <_Bfree>
 8006df0:	9b07      	ldr	r3, [sp, #28]
 8006df2:	9304      	str	r3, [sp, #16]
 8006df4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006df6:	1b9a      	subs	r2, r3, r6
 8006df8:	42b3      	cmp	r3, r6
 8006dfa:	d004      	beq.n	8006e06 <_dtoa_r+0x82e>
 8006dfc:	0038      	movs	r0, r7
 8006dfe:	9904      	ldr	r1, [sp, #16]
 8006e00:	f000 fbe4 	bl	80075cc <__pow5mult>
 8006e04:	9004      	str	r0, [sp, #16]
 8006e06:	2101      	movs	r1, #1
 8006e08:	0038      	movs	r0, r7
 8006e0a:	f000 fb19 	bl	8007440 <__i2b>
 8006e0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006e10:	0006      	movs	r6, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	dd37      	ble.n	8006e86 <_dtoa_r+0x8ae>
 8006e16:	001a      	movs	r2, r3
 8006e18:	0001      	movs	r1, r0
 8006e1a:	0038      	movs	r0, r7
 8006e1c:	f000 fbd6 	bl	80075cc <__pow5mult>
 8006e20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e22:	0006      	movs	r6, r0
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	dd33      	ble.n	8006e90 <_dtoa_r+0x8b8>
 8006e28:	2300      	movs	r3, #0
 8006e2a:	9307      	str	r3, [sp, #28]
 8006e2c:	6933      	ldr	r3, [r6, #16]
 8006e2e:	3303      	adds	r3, #3
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	18f3      	adds	r3, r6, r3
 8006e34:	6858      	ldr	r0, [r3, #4]
 8006e36:	f000 fabb 	bl	80073b0 <__hi0bits>
 8006e3a:	2320      	movs	r3, #32
 8006e3c:	1a18      	subs	r0, r3, r0
 8006e3e:	e03f      	b.n	8006ec0 <_dtoa_r+0x8e8>
 8006e40:	2336      	movs	r3, #54	; 0x36
 8006e42:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006e44:	1a9b      	subs	r3, r3, r2
 8006e46:	e79d      	b.n	8006d84 <_dtoa_r+0x7ac>
 8006e48:	9b06      	ldr	r3, [sp, #24]
 8006e4a:	1e5e      	subs	r6, r3, #1
 8006e4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e4e:	42b3      	cmp	r3, r6
 8006e50:	db08      	blt.n	8006e64 <_dtoa_r+0x88c>
 8006e52:	1b9e      	subs	r6, r3, r6
 8006e54:	9b06      	ldr	r3, [sp, #24]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	da0c      	bge.n	8006e74 <_dtoa_r+0x89c>
 8006e5a:	9b08      	ldr	r3, [sp, #32]
 8006e5c:	9a06      	ldr	r2, [sp, #24]
 8006e5e:	1a9c      	subs	r4, r3, r2
 8006e60:	2300      	movs	r3, #0
 8006e62:	e791      	b.n	8006d88 <_dtoa_r+0x7b0>
 8006e64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e66:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006e68:	1af3      	subs	r3, r6, r3
 8006e6a:	18d3      	adds	r3, r2, r3
 8006e6c:	960e      	str	r6, [sp, #56]	; 0x38
 8006e6e:	9314      	str	r3, [sp, #80]	; 0x50
 8006e70:	2600      	movs	r6, #0
 8006e72:	e7ef      	b.n	8006e54 <_dtoa_r+0x87c>
 8006e74:	9c08      	ldr	r4, [sp, #32]
 8006e76:	9b06      	ldr	r3, [sp, #24]
 8006e78:	e786      	b.n	8006d88 <_dtoa_r+0x7b0>
 8006e7a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006e7c:	9c08      	ldr	r4, [sp, #32]
 8006e7e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006e80:	e78d      	b.n	8006d9e <_dtoa_r+0x7c6>
 8006e82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e84:	e7ba      	b.n	8006dfc <_dtoa_r+0x824>
 8006e86:	2300      	movs	r3, #0
 8006e88:	9307      	str	r3, [sp, #28]
 8006e8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	dc13      	bgt.n	8006eb8 <_dtoa_r+0x8e0>
 8006e90:	2300      	movs	r3, #0
 8006e92:	9307      	str	r3, [sp, #28]
 8006e94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d10e      	bne.n	8006eb8 <_dtoa_r+0x8e0>
 8006e9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e9c:	031b      	lsls	r3, r3, #12
 8006e9e:	d10b      	bne.n	8006eb8 <_dtoa_r+0x8e0>
 8006ea0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006ea2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ea4:	4213      	tst	r3, r2
 8006ea6:	d007      	beq.n	8006eb8 <_dtoa_r+0x8e0>
 8006ea8:	9b08      	ldr	r3, [sp, #32]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	9308      	str	r3, [sp, #32]
 8006eae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	930d      	str	r3, [sp, #52]	; 0x34
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	9307      	str	r3, [sp, #28]
 8006eb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006eba:	2001      	movs	r0, #1
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1b5      	bne.n	8006e2c <_dtoa_r+0x854>
 8006ec0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ec2:	221f      	movs	r2, #31
 8006ec4:	1818      	adds	r0, r3, r0
 8006ec6:	0003      	movs	r3, r0
 8006ec8:	4013      	ands	r3, r2
 8006eca:	4210      	tst	r0, r2
 8006ecc:	d046      	beq.n	8006f5c <_dtoa_r+0x984>
 8006ece:	3201      	adds	r2, #1
 8006ed0:	1ad2      	subs	r2, r2, r3
 8006ed2:	2a04      	cmp	r2, #4
 8006ed4:	dd3f      	ble.n	8006f56 <_dtoa_r+0x97e>
 8006ed6:	221c      	movs	r2, #28
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	9a08      	ldr	r2, [sp, #32]
 8006edc:	18e4      	adds	r4, r4, r3
 8006ede:	18d2      	adds	r2, r2, r3
 8006ee0:	9208      	str	r2, [sp, #32]
 8006ee2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ee4:	18d3      	adds	r3, r2, r3
 8006ee6:	930d      	str	r3, [sp, #52]	; 0x34
 8006ee8:	9b08      	ldr	r3, [sp, #32]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	dd05      	ble.n	8006efa <_dtoa_r+0x922>
 8006eee:	001a      	movs	r2, r3
 8006ef0:	0038      	movs	r0, r7
 8006ef2:	9904      	ldr	r1, [sp, #16]
 8006ef4:	f000 fbc6 	bl	8007684 <__lshift>
 8006ef8:	9004      	str	r0, [sp, #16]
 8006efa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	dd05      	ble.n	8006f0c <_dtoa_r+0x934>
 8006f00:	0031      	movs	r1, r6
 8006f02:	001a      	movs	r2, r3
 8006f04:	0038      	movs	r0, r7
 8006f06:	f000 fbbd 	bl	8007684 <__lshift>
 8006f0a:	0006      	movs	r6, r0
 8006f0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d026      	beq.n	8006f60 <_dtoa_r+0x988>
 8006f12:	0031      	movs	r1, r6
 8006f14:	9804      	ldr	r0, [sp, #16]
 8006f16:	f000 fc25 	bl	8007764 <__mcmp>
 8006f1a:	2800      	cmp	r0, #0
 8006f1c:	da20      	bge.n	8006f60 <_dtoa_r+0x988>
 8006f1e:	9b02      	ldr	r3, [sp, #8]
 8006f20:	220a      	movs	r2, #10
 8006f22:	3b01      	subs	r3, #1
 8006f24:	9302      	str	r3, [sp, #8]
 8006f26:	0038      	movs	r0, r7
 8006f28:	2300      	movs	r3, #0
 8006f2a:	9904      	ldr	r1, [sp, #16]
 8006f2c:	f000 f9fc 	bl	8007328 <__multadd>
 8006f30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f32:	9004      	str	r0, [sp, #16]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d100      	bne.n	8006f3a <_dtoa_r+0x962>
 8006f38:	e160      	b.n	80071fc <_dtoa_r+0xc24>
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	0029      	movs	r1, r5
 8006f3e:	220a      	movs	r2, #10
 8006f40:	0038      	movs	r0, r7
 8006f42:	f000 f9f1 	bl	8007328 <__multadd>
 8006f46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f48:	0005      	movs	r5, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	dc47      	bgt.n	8006fde <_dtoa_r+0xa06>
 8006f4e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	dc0d      	bgt.n	8006f70 <_dtoa_r+0x998>
 8006f54:	e043      	b.n	8006fde <_dtoa_r+0xa06>
 8006f56:	2a04      	cmp	r2, #4
 8006f58:	d0c6      	beq.n	8006ee8 <_dtoa_r+0x910>
 8006f5a:	0013      	movs	r3, r2
 8006f5c:	331c      	adds	r3, #28
 8006f5e:	e7bc      	b.n	8006eda <_dtoa_r+0x902>
 8006f60:	9b06      	ldr	r3, [sp, #24]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	dc35      	bgt.n	8006fd2 <_dtoa_r+0x9fa>
 8006f66:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	dd32      	ble.n	8006fd2 <_dtoa_r+0x9fa>
 8006f6c:	9b06      	ldr	r3, [sp, #24]
 8006f6e:	930c      	str	r3, [sp, #48]	; 0x30
 8006f70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d10c      	bne.n	8006f90 <_dtoa_r+0x9b8>
 8006f76:	0031      	movs	r1, r6
 8006f78:	2205      	movs	r2, #5
 8006f7a:	0038      	movs	r0, r7
 8006f7c:	f000 f9d4 	bl	8007328 <__multadd>
 8006f80:	0006      	movs	r6, r0
 8006f82:	0001      	movs	r1, r0
 8006f84:	9804      	ldr	r0, [sp, #16]
 8006f86:	f000 fbed 	bl	8007764 <__mcmp>
 8006f8a:	2800      	cmp	r0, #0
 8006f8c:	dd00      	ble.n	8006f90 <_dtoa_r+0x9b8>
 8006f8e:	e59f      	b.n	8006ad0 <_dtoa_r+0x4f8>
 8006f90:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f92:	43db      	mvns	r3, r3
 8006f94:	9302      	str	r3, [sp, #8]
 8006f96:	9b05      	ldr	r3, [sp, #20]
 8006f98:	9307      	str	r3, [sp, #28]
 8006f9a:	2400      	movs	r4, #0
 8006f9c:	0031      	movs	r1, r6
 8006f9e:	0038      	movs	r0, r7
 8006fa0:	f000 f99e 	bl	80072e0 <_Bfree>
 8006fa4:	2d00      	cmp	r5, #0
 8006fa6:	d100      	bne.n	8006faa <_dtoa_r+0x9d2>
 8006fa8:	e6b0      	b.n	8006d0c <_dtoa_r+0x734>
 8006faa:	2c00      	cmp	r4, #0
 8006fac:	d005      	beq.n	8006fba <_dtoa_r+0x9e2>
 8006fae:	42ac      	cmp	r4, r5
 8006fb0:	d003      	beq.n	8006fba <_dtoa_r+0x9e2>
 8006fb2:	0021      	movs	r1, r4
 8006fb4:	0038      	movs	r0, r7
 8006fb6:	f000 f993 	bl	80072e0 <_Bfree>
 8006fba:	0029      	movs	r1, r5
 8006fbc:	0038      	movs	r0, r7
 8006fbe:	f000 f98f 	bl	80072e0 <_Bfree>
 8006fc2:	e6a3      	b.n	8006d0c <_dtoa_r+0x734>
 8006fc4:	2600      	movs	r6, #0
 8006fc6:	0035      	movs	r5, r6
 8006fc8:	e7e2      	b.n	8006f90 <_dtoa_r+0x9b8>
 8006fca:	9602      	str	r6, [sp, #8]
 8006fcc:	9e07      	ldr	r6, [sp, #28]
 8006fce:	0035      	movs	r5, r6
 8006fd0:	e57e      	b.n	8006ad0 <_dtoa_r+0x4f8>
 8006fd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d100      	bne.n	8006fda <_dtoa_r+0xa02>
 8006fd8:	e0c8      	b.n	800716c <_dtoa_r+0xb94>
 8006fda:	9b06      	ldr	r3, [sp, #24]
 8006fdc:	930c      	str	r3, [sp, #48]	; 0x30
 8006fde:	2c00      	cmp	r4, #0
 8006fe0:	dd05      	ble.n	8006fee <_dtoa_r+0xa16>
 8006fe2:	0029      	movs	r1, r5
 8006fe4:	0022      	movs	r2, r4
 8006fe6:	0038      	movs	r0, r7
 8006fe8:	f000 fb4c 	bl	8007684 <__lshift>
 8006fec:	0005      	movs	r5, r0
 8006fee:	9b07      	ldr	r3, [sp, #28]
 8006ff0:	0028      	movs	r0, r5
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d01f      	beq.n	8007036 <_dtoa_r+0xa5e>
 8006ff6:	0038      	movs	r0, r7
 8006ff8:	6869      	ldr	r1, [r5, #4]
 8006ffa:	f000 f92d 	bl	8007258 <_Balloc>
 8006ffe:	1e04      	subs	r4, r0, #0
 8007000:	d10c      	bne.n	800701c <_dtoa_r+0xa44>
 8007002:	0002      	movs	r2, r0
 8007004:	4b03      	ldr	r3, [pc, #12]	; (8007014 <_dtoa_r+0xa3c>)
 8007006:	4904      	ldr	r1, [pc, #16]	; (8007018 <_dtoa_r+0xa40>)
 8007008:	f7ff fafb 	bl	8006602 <_dtoa_r+0x2a>
 800700c:	40240000 	.word	0x40240000
 8007010:	00000433 	.word	0x00000433
 8007014:	080091ff 	.word	0x080091ff
 8007018:	000002ea 	.word	0x000002ea
 800701c:	0029      	movs	r1, r5
 800701e:	692b      	ldr	r3, [r5, #16]
 8007020:	310c      	adds	r1, #12
 8007022:	1c9a      	adds	r2, r3, #2
 8007024:	0092      	lsls	r2, r2, #2
 8007026:	300c      	adds	r0, #12
 8007028:	f000 f90d 	bl	8007246 <memcpy>
 800702c:	2201      	movs	r2, #1
 800702e:	0021      	movs	r1, r4
 8007030:	0038      	movs	r0, r7
 8007032:	f000 fb27 	bl	8007684 <__lshift>
 8007036:	002c      	movs	r4, r5
 8007038:	0005      	movs	r5, r0
 800703a:	9b05      	ldr	r3, [sp, #20]
 800703c:	9308      	str	r3, [sp, #32]
 800703e:	0031      	movs	r1, r6
 8007040:	9804      	ldr	r0, [sp, #16]
 8007042:	f7ff fa3d 	bl	80064c0 <quorem>
 8007046:	0003      	movs	r3, r0
 8007048:	0021      	movs	r1, r4
 800704a:	3330      	adds	r3, #48	; 0x30
 800704c:	900e      	str	r0, [sp, #56]	; 0x38
 800704e:	9804      	ldr	r0, [sp, #16]
 8007050:	9306      	str	r3, [sp, #24]
 8007052:	f000 fb87 	bl	8007764 <__mcmp>
 8007056:	002a      	movs	r2, r5
 8007058:	900f      	str	r0, [sp, #60]	; 0x3c
 800705a:	0031      	movs	r1, r6
 800705c:	0038      	movs	r0, r7
 800705e:	f000 fb9d 	bl	800779c <__mdiff>
 8007062:	68c3      	ldr	r3, [r0, #12]
 8007064:	9007      	str	r0, [sp, #28]
 8007066:	9310      	str	r3, [sp, #64]	; 0x40
 8007068:	2301      	movs	r3, #1
 800706a:	930d      	str	r3, [sp, #52]	; 0x34
 800706c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800706e:	2b00      	cmp	r3, #0
 8007070:	d104      	bne.n	800707c <_dtoa_r+0xaa4>
 8007072:	0001      	movs	r1, r0
 8007074:	9804      	ldr	r0, [sp, #16]
 8007076:	f000 fb75 	bl	8007764 <__mcmp>
 800707a:	900d      	str	r0, [sp, #52]	; 0x34
 800707c:	0038      	movs	r0, r7
 800707e:	9907      	ldr	r1, [sp, #28]
 8007080:	f000 f92e 	bl	80072e0 <_Bfree>
 8007084:	2301      	movs	r3, #1
 8007086:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007088:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800708a:	4018      	ands	r0, r3
 800708c:	9b08      	ldr	r3, [sp, #32]
 800708e:	3301      	adds	r3, #1
 8007090:	9307      	str	r3, [sp, #28]
 8007092:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007094:	4313      	orrs	r3, r2
 8007096:	4303      	orrs	r3, r0
 8007098:	d10c      	bne.n	80070b4 <_dtoa_r+0xadc>
 800709a:	9b06      	ldr	r3, [sp, #24]
 800709c:	2b39      	cmp	r3, #57	; 0x39
 800709e:	d025      	beq.n	80070ec <_dtoa_r+0xb14>
 80070a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	dd02      	ble.n	80070ac <_dtoa_r+0xad4>
 80070a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070a8:	3331      	adds	r3, #49	; 0x31
 80070aa:	9306      	str	r3, [sp, #24]
 80070ac:	9b08      	ldr	r3, [sp, #32]
 80070ae:	9a06      	ldr	r2, [sp, #24]
 80070b0:	701a      	strb	r2, [r3, #0]
 80070b2:	e773      	b.n	8006f9c <_dtoa_r+0x9c4>
 80070b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	db03      	blt.n	80070c2 <_dtoa_r+0xaea>
 80070ba:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80070bc:	4313      	orrs	r3, r2
 80070be:	4303      	orrs	r3, r0
 80070c0:	d11f      	bne.n	8007102 <_dtoa_r+0xb2a>
 80070c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	ddf1      	ble.n	80070ac <_dtoa_r+0xad4>
 80070c8:	9904      	ldr	r1, [sp, #16]
 80070ca:	2201      	movs	r2, #1
 80070cc:	0038      	movs	r0, r7
 80070ce:	f000 fad9 	bl	8007684 <__lshift>
 80070d2:	0031      	movs	r1, r6
 80070d4:	9004      	str	r0, [sp, #16]
 80070d6:	f000 fb45 	bl	8007764 <__mcmp>
 80070da:	2800      	cmp	r0, #0
 80070dc:	dc03      	bgt.n	80070e6 <_dtoa_r+0xb0e>
 80070de:	d1e5      	bne.n	80070ac <_dtoa_r+0xad4>
 80070e0:	9b06      	ldr	r3, [sp, #24]
 80070e2:	07db      	lsls	r3, r3, #31
 80070e4:	d5e2      	bpl.n	80070ac <_dtoa_r+0xad4>
 80070e6:	9b06      	ldr	r3, [sp, #24]
 80070e8:	2b39      	cmp	r3, #57	; 0x39
 80070ea:	d1dc      	bne.n	80070a6 <_dtoa_r+0xace>
 80070ec:	2339      	movs	r3, #57	; 0x39
 80070ee:	9a08      	ldr	r2, [sp, #32]
 80070f0:	7013      	strb	r3, [r2, #0]
 80070f2:	9b07      	ldr	r3, [sp, #28]
 80070f4:	9307      	str	r3, [sp, #28]
 80070f6:	3b01      	subs	r3, #1
 80070f8:	781a      	ldrb	r2, [r3, #0]
 80070fa:	2a39      	cmp	r2, #57	; 0x39
 80070fc:	d06c      	beq.n	80071d8 <_dtoa_r+0xc00>
 80070fe:	3201      	adds	r2, #1
 8007100:	e7d6      	b.n	80070b0 <_dtoa_r+0xad8>
 8007102:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007104:	2b00      	cmp	r3, #0
 8007106:	dd07      	ble.n	8007118 <_dtoa_r+0xb40>
 8007108:	9b06      	ldr	r3, [sp, #24]
 800710a:	2b39      	cmp	r3, #57	; 0x39
 800710c:	d0ee      	beq.n	80070ec <_dtoa_r+0xb14>
 800710e:	9b06      	ldr	r3, [sp, #24]
 8007110:	9a08      	ldr	r2, [sp, #32]
 8007112:	3301      	adds	r3, #1
 8007114:	7013      	strb	r3, [r2, #0]
 8007116:	e741      	b.n	8006f9c <_dtoa_r+0x9c4>
 8007118:	9b08      	ldr	r3, [sp, #32]
 800711a:	9a06      	ldr	r2, [sp, #24]
 800711c:	701a      	strb	r2, [r3, #0]
 800711e:	2301      	movs	r3, #1
 8007120:	9a05      	ldr	r2, [sp, #20]
 8007122:	1a9b      	subs	r3, r3, r2
 8007124:	9a08      	ldr	r2, [sp, #32]
 8007126:	189b      	adds	r3, r3, r2
 8007128:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800712a:	429a      	cmp	r2, r3
 800712c:	d03e      	beq.n	80071ac <_dtoa_r+0xbd4>
 800712e:	2300      	movs	r3, #0
 8007130:	220a      	movs	r2, #10
 8007132:	9904      	ldr	r1, [sp, #16]
 8007134:	0038      	movs	r0, r7
 8007136:	f000 f8f7 	bl	8007328 <__multadd>
 800713a:	2300      	movs	r3, #0
 800713c:	9004      	str	r0, [sp, #16]
 800713e:	220a      	movs	r2, #10
 8007140:	0021      	movs	r1, r4
 8007142:	0038      	movs	r0, r7
 8007144:	42ac      	cmp	r4, r5
 8007146:	d106      	bne.n	8007156 <_dtoa_r+0xb7e>
 8007148:	f000 f8ee 	bl	8007328 <__multadd>
 800714c:	0004      	movs	r4, r0
 800714e:	0005      	movs	r5, r0
 8007150:	9b07      	ldr	r3, [sp, #28]
 8007152:	9308      	str	r3, [sp, #32]
 8007154:	e773      	b.n	800703e <_dtoa_r+0xa66>
 8007156:	f000 f8e7 	bl	8007328 <__multadd>
 800715a:	0029      	movs	r1, r5
 800715c:	0004      	movs	r4, r0
 800715e:	2300      	movs	r3, #0
 8007160:	220a      	movs	r2, #10
 8007162:	0038      	movs	r0, r7
 8007164:	f000 f8e0 	bl	8007328 <__multadd>
 8007168:	0005      	movs	r5, r0
 800716a:	e7f1      	b.n	8007150 <_dtoa_r+0xb78>
 800716c:	9b06      	ldr	r3, [sp, #24]
 800716e:	930c      	str	r3, [sp, #48]	; 0x30
 8007170:	2400      	movs	r4, #0
 8007172:	0031      	movs	r1, r6
 8007174:	9804      	ldr	r0, [sp, #16]
 8007176:	f7ff f9a3 	bl	80064c0 <quorem>
 800717a:	9b05      	ldr	r3, [sp, #20]
 800717c:	3030      	adds	r0, #48	; 0x30
 800717e:	5518      	strb	r0, [r3, r4]
 8007180:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007182:	3401      	adds	r4, #1
 8007184:	9006      	str	r0, [sp, #24]
 8007186:	42a3      	cmp	r3, r4
 8007188:	dd07      	ble.n	800719a <_dtoa_r+0xbc2>
 800718a:	2300      	movs	r3, #0
 800718c:	220a      	movs	r2, #10
 800718e:	0038      	movs	r0, r7
 8007190:	9904      	ldr	r1, [sp, #16]
 8007192:	f000 f8c9 	bl	8007328 <__multadd>
 8007196:	9004      	str	r0, [sp, #16]
 8007198:	e7eb      	b.n	8007172 <_dtoa_r+0xb9a>
 800719a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800719c:	2001      	movs	r0, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	dd00      	ble.n	80071a4 <_dtoa_r+0xbcc>
 80071a2:	0018      	movs	r0, r3
 80071a4:	2400      	movs	r4, #0
 80071a6:	9b05      	ldr	r3, [sp, #20]
 80071a8:	181b      	adds	r3, r3, r0
 80071aa:	9307      	str	r3, [sp, #28]
 80071ac:	9904      	ldr	r1, [sp, #16]
 80071ae:	2201      	movs	r2, #1
 80071b0:	0038      	movs	r0, r7
 80071b2:	f000 fa67 	bl	8007684 <__lshift>
 80071b6:	0031      	movs	r1, r6
 80071b8:	9004      	str	r0, [sp, #16]
 80071ba:	f000 fad3 	bl	8007764 <__mcmp>
 80071be:	2800      	cmp	r0, #0
 80071c0:	dc97      	bgt.n	80070f2 <_dtoa_r+0xb1a>
 80071c2:	d102      	bne.n	80071ca <_dtoa_r+0xbf2>
 80071c4:	9b06      	ldr	r3, [sp, #24]
 80071c6:	07db      	lsls	r3, r3, #31
 80071c8:	d493      	bmi.n	80070f2 <_dtoa_r+0xb1a>
 80071ca:	9b07      	ldr	r3, [sp, #28]
 80071cc:	9307      	str	r3, [sp, #28]
 80071ce:	3b01      	subs	r3, #1
 80071d0:	781a      	ldrb	r2, [r3, #0]
 80071d2:	2a30      	cmp	r2, #48	; 0x30
 80071d4:	d0fa      	beq.n	80071cc <_dtoa_r+0xbf4>
 80071d6:	e6e1      	b.n	8006f9c <_dtoa_r+0x9c4>
 80071d8:	9a05      	ldr	r2, [sp, #20]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d18a      	bne.n	80070f4 <_dtoa_r+0xb1c>
 80071de:	9b02      	ldr	r3, [sp, #8]
 80071e0:	3301      	adds	r3, #1
 80071e2:	9302      	str	r3, [sp, #8]
 80071e4:	2331      	movs	r3, #49	; 0x31
 80071e6:	e795      	b.n	8007114 <_dtoa_r+0xb3c>
 80071e8:	4b08      	ldr	r3, [pc, #32]	; (800720c <_dtoa_r+0xc34>)
 80071ea:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80071ec:	9305      	str	r3, [sp, #20]
 80071ee:	4b08      	ldr	r3, [pc, #32]	; (8007210 <_dtoa_r+0xc38>)
 80071f0:	2a00      	cmp	r2, #0
 80071f2:	d001      	beq.n	80071f8 <_dtoa_r+0xc20>
 80071f4:	f7ff fa3b 	bl	800666e <_dtoa_r+0x96>
 80071f8:	f7ff fa3b 	bl	8006672 <_dtoa_r+0x9a>
 80071fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071fe:	2b00      	cmp	r3, #0
 8007200:	dcb6      	bgt.n	8007170 <_dtoa_r+0xb98>
 8007202:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007204:	2b02      	cmp	r3, #2
 8007206:	dd00      	ble.n	800720a <_dtoa_r+0xc32>
 8007208:	e6b2      	b.n	8006f70 <_dtoa_r+0x998>
 800720a:	e7b1      	b.n	8007170 <_dtoa_r+0xb98>
 800720c:	0800917c 	.word	0x0800917c
 8007210:	08009184 	.word	0x08009184

08007214 <_localeconv_r>:
 8007214:	4800      	ldr	r0, [pc, #0]	; (8007218 <_localeconv_r+0x4>)
 8007216:	4770      	bx	lr
 8007218:	20000588 	.word	0x20000588

0800721c <malloc>:
 800721c:	b510      	push	{r4, lr}
 800721e:	4b03      	ldr	r3, [pc, #12]	; (800722c <malloc+0x10>)
 8007220:	0001      	movs	r1, r0
 8007222:	6818      	ldr	r0, [r3, #0]
 8007224:	f000 fc0e 	bl	8007a44 <_malloc_r>
 8007228:	bd10      	pop	{r4, pc}
 800722a:	46c0      	nop			; (mov r8, r8)
 800722c:	20000434 	.word	0x20000434

08007230 <memchr>:
 8007230:	b2c9      	uxtb	r1, r1
 8007232:	1882      	adds	r2, r0, r2
 8007234:	4290      	cmp	r0, r2
 8007236:	d101      	bne.n	800723c <memchr+0xc>
 8007238:	2000      	movs	r0, #0
 800723a:	4770      	bx	lr
 800723c:	7803      	ldrb	r3, [r0, #0]
 800723e:	428b      	cmp	r3, r1
 8007240:	d0fb      	beq.n	800723a <memchr+0xa>
 8007242:	3001      	adds	r0, #1
 8007244:	e7f6      	b.n	8007234 <memchr+0x4>

08007246 <memcpy>:
 8007246:	2300      	movs	r3, #0
 8007248:	b510      	push	{r4, lr}
 800724a:	429a      	cmp	r2, r3
 800724c:	d100      	bne.n	8007250 <memcpy+0xa>
 800724e:	bd10      	pop	{r4, pc}
 8007250:	5ccc      	ldrb	r4, [r1, r3]
 8007252:	54c4      	strb	r4, [r0, r3]
 8007254:	3301      	adds	r3, #1
 8007256:	e7f8      	b.n	800724a <memcpy+0x4>

08007258 <_Balloc>:
 8007258:	b570      	push	{r4, r5, r6, lr}
 800725a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800725c:	0006      	movs	r6, r0
 800725e:	000c      	movs	r4, r1
 8007260:	2d00      	cmp	r5, #0
 8007262:	d10e      	bne.n	8007282 <_Balloc+0x2a>
 8007264:	2010      	movs	r0, #16
 8007266:	f7ff ffd9 	bl	800721c <malloc>
 800726a:	1e02      	subs	r2, r0, #0
 800726c:	6270      	str	r0, [r6, #36]	; 0x24
 800726e:	d104      	bne.n	800727a <_Balloc+0x22>
 8007270:	2166      	movs	r1, #102	; 0x66
 8007272:	4b19      	ldr	r3, [pc, #100]	; (80072d8 <_Balloc+0x80>)
 8007274:	4819      	ldr	r0, [pc, #100]	; (80072dc <_Balloc+0x84>)
 8007276:	f000 fdb7 	bl	8007de8 <__assert_func>
 800727a:	6045      	str	r5, [r0, #4]
 800727c:	6085      	str	r5, [r0, #8]
 800727e:	6005      	str	r5, [r0, #0]
 8007280:	60c5      	str	r5, [r0, #12]
 8007282:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8007284:	68eb      	ldr	r3, [r5, #12]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d013      	beq.n	80072b2 <_Balloc+0x5a>
 800728a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800728c:	00a2      	lsls	r2, r4, #2
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	189b      	adds	r3, r3, r2
 8007292:	6818      	ldr	r0, [r3, #0]
 8007294:	2800      	cmp	r0, #0
 8007296:	d118      	bne.n	80072ca <_Balloc+0x72>
 8007298:	2101      	movs	r1, #1
 800729a:	000d      	movs	r5, r1
 800729c:	40a5      	lsls	r5, r4
 800729e:	1d6a      	adds	r2, r5, #5
 80072a0:	0030      	movs	r0, r6
 80072a2:	0092      	lsls	r2, r2, #2
 80072a4:	f000 fb76 	bl	8007994 <_calloc_r>
 80072a8:	2800      	cmp	r0, #0
 80072aa:	d00c      	beq.n	80072c6 <_Balloc+0x6e>
 80072ac:	6044      	str	r4, [r0, #4]
 80072ae:	6085      	str	r5, [r0, #8]
 80072b0:	e00d      	b.n	80072ce <_Balloc+0x76>
 80072b2:	2221      	movs	r2, #33	; 0x21
 80072b4:	2104      	movs	r1, #4
 80072b6:	0030      	movs	r0, r6
 80072b8:	f000 fb6c 	bl	8007994 <_calloc_r>
 80072bc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80072be:	60e8      	str	r0, [r5, #12]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1e1      	bne.n	800728a <_Balloc+0x32>
 80072c6:	2000      	movs	r0, #0
 80072c8:	bd70      	pop	{r4, r5, r6, pc}
 80072ca:	6802      	ldr	r2, [r0, #0]
 80072cc:	601a      	str	r2, [r3, #0]
 80072ce:	2300      	movs	r3, #0
 80072d0:	6103      	str	r3, [r0, #16]
 80072d2:	60c3      	str	r3, [r0, #12]
 80072d4:	e7f8      	b.n	80072c8 <_Balloc+0x70>
 80072d6:	46c0      	nop			; (mov r8, r8)
 80072d8:	08009189 	.word	0x08009189
 80072dc:	08009210 	.word	0x08009210

080072e0 <_Bfree>:
 80072e0:	b570      	push	{r4, r5, r6, lr}
 80072e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80072e4:	0005      	movs	r5, r0
 80072e6:	000c      	movs	r4, r1
 80072e8:	2e00      	cmp	r6, #0
 80072ea:	d10e      	bne.n	800730a <_Bfree+0x2a>
 80072ec:	2010      	movs	r0, #16
 80072ee:	f7ff ff95 	bl	800721c <malloc>
 80072f2:	1e02      	subs	r2, r0, #0
 80072f4:	6268      	str	r0, [r5, #36]	; 0x24
 80072f6:	d104      	bne.n	8007302 <_Bfree+0x22>
 80072f8:	218a      	movs	r1, #138	; 0x8a
 80072fa:	4b09      	ldr	r3, [pc, #36]	; (8007320 <_Bfree+0x40>)
 80072fc:	4809      	ldr	r0, [pc, #36]	; (8007324 <_Bfree+0x44>)
 80072fe:	f000 fd73 	bl	8007de8 <__assert_func>
 8007302:	6046      	str	r6, [r0, #4]
 8007304:	6086      	str	r6, [r0, #8]
 8007306:	6006      	str	r6, [r0, #0]
 8007308:	60c6      	str	r6, [r0, #12]
 800730a:	2c00      	cmp	r4, #0
 800730c:	d007      	beq.n	800731e <_Bfree+0x3e>
 800730e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007310:	6862      	ldr	r2, [r4, #4]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	0092      	lsls	r2, r2, #2
 8007316:	189b      	adds	r3, r3, r2
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	6022      	str	r2, [r4, #0]
 800731c:	601c      	str	r4, [r3, #0]
 800731e:	bd70      	pop	{r4, r5, r6, pc}
 8007320:	08009189 	.word	0x08009189
 8007324:	08009210 	.word	0x08009210

08007328 <__multadd>:
 8007328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800732a:	000e      	movs	r6, r1
 800732c:	9001      	str	r0, [sp, #4]
 800732e:	000c      	movs	r4, r1
 8007330:	001d      	movs	r5, r3
 8007332:	2000      	movs	r0, #0
 8007334:	690f      	ldr	r7, [r1, #16]
 8007336:	3614      	adds	r6, #20
 8007338:	6833      	ldr	r3, [r6, #0]
 800733a:	3001      	adds	r0, #1
 800733c:	b299      	uxth	r1, r3
 800733e:	4351      	muls	r1, r2
 8007340:	0c1b      	lsrs	r3, r3, #16
 8007342:	4353      	muls	r3, r2
 8007344:	1949      	adds	r1, r1, r5
 8007346:	0c0d      	lsrs	r5, r1, #16
 8007348:	195b      	adds	r3, r3, r5
 800734a:	0c1d      	lsrs	r5, r3, #16
 800734c:	b289      	uxth	r1, r1
 800734e:	041b      	lsls	r3, r3, #16
 8007350:	185b      	adds	r3, r3, r1
 8007352:	c608      	stmia	r6!, {r3}
 8007354:	4287      	cmp	r7, r0
 8007356:	dcef      	bgt.n	8007338 <__multadd+0x10>
 8007358:	2d00      	cmp	r5, #0
 800735a:	d022      	beq.n	80073a2 <__multadd+0x7a>
 800735c:	68a3      	ldr	r3, [r4, #8]
 800735e:	42bb      	cmp	r3, r7
 8007360:	dc19      	bgt.n	8007396 <__multadd+0x6e>
 8007362:	6863      	ldr	r3, [r4, #4]
 8007364:	9801      	ldr	r0, [sp, #4]
 8007366:	1c59      	adds	r1, r3, #1
 8007368:	f7ff ff76 	bl	8007258 <_Balloc>
 800736c:	1e06      	subs	r6, r0, #0
 800736e:	d105      	bne.n	800737c <__multadd+0x54>
 8007370:	0002      	movs	r2, r0
 8007372:	21b5      	movs	r1, #181	; 0xb5
 8007374:	4b0c      	ldr	r3, [pc, #48]	; (80073a8 <__multadd+0x80>)
 8007376:	480d      	ldr	r0, [pc, #52]	; (80073ac <__multadd+0x84>)
 8007378:	f000 fd36 	bl	8007de8 <__assert_func>
 800737c:	0021      	movs	r1, r4
 800737e:	6923      	ldr	r3, [r4, #16]
 8007380:	310c      	adds	r1, #12
 8007382:	1c9a      	adds	r2, r3, #2
 8007384:	0092      	lsls	r2, r2, #2
 8007386:	300c      	adds	r0, #12
 8007388:	f7ff ff5d 	bl	8007246 <memcpy>
 800738c:	0021      	movs	r1, r4
 800738e:	9801      	ldr	r0, [sp, #4]
 8007390:	f7ff ffa6 	bl	80072e0 <_Bfree>
 8007394:	0034      	movs	r4, r6
 8007396:	1d3b      	adds	r3, r7, #4
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	18e3      	adds	r3, r4, r3
 800739c:	605d      	str	r5, [r3, #4]
 800739e:	1c7b      	adds	r3, r7, #1
 80073a0:	6123      	str	r3, [r4, #16]
 80073a2:	0020      	movs	r0, r4
 80073a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80073a6:	46c0      	nop			; (mov r8, r8)
 80073a8:	080091ff 	.word	0x080091ff
 80073ac:	08009210 	.word	0x08009210

080073b0 <__hi0bits>:
 80073b0:	0003      	movs	r3, r0
 80073b2:	0c02      	lsrs	r2, r0, #16
 80073b4:	2000      	movs	r0, #0
 80073b6:	4282      	cmp	r2, r0
 80073b8:	d101      	bne.n	80073be <__hi0bits+0xe>
 80073ba:	041b      	lsls	r3, r3, #16
 80073bc:	3010      	adds	r0, #16
 80073be:	0e1a      	lsrs	r2, r3, #24
 80073c0:	d101      	bne.n	80073c6 <__hi0bits+0x16>
 80073c2:	3008      	adds	r0, #8
 80073c4:	021b      	lsls	r3, r3, #8
 80073c6:	0f1a      	lsrs	r2, r3, #28
 80073c8:	d101      	bne.n	80073ce <__hi0bits+0x1e>
 80073ca:	3004      	adds	r0, #4
 80073cc:	011b      	lsls	r3, r3, #4
 80073ce:	0f9a      	lsrs	r2, r3, #30
 80073d0:	d101      	bne.n	80073d6 <__hi0bits+0x26>
 80073d2:	3002      	adds	r0, #2
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	db03      	blt.n	80073e2 <__hi0bits+0x32>
 80073da:	3001      	adds	r0, #1
 80073dc:	005b      	lsls	r3, r3, #1
 80073de:	d400      	bmi.n	80073e2 <__hi0bits+0x32>
 80073e0:	2020      	movs	r0, #32
 80073e2:	4770      	bx	lr

080073e4 <__lo0bits>:
 80073e4:	6803      	ldr	r3, [r0, #0]
 80073e6:	0002      	movs	r2, r0
 80073e8:	2107      	movs	r1, #7
 80073ea:	0018      	movs	r0, r3
 80073ec:	4008      	ands	r0, r1
 80073ee:	420b      	tst	r3, r1
 80073f0:	d00d      	beq.n	800740e <__lo0bits+0x2a>
 80073f2:	3906      	subs	r1, #6
 80073f4:	2000      	movs	r0, #0
 80073f6:	420b      	tst	r3, r1
 80073f8:	d105      	bne.n	8007406 <__lo0bits+0x22>
 80073fa:	3002      	adds	r0, #2
 80073fc:	4203      	tst	r3, r0
 80073fe:	d003      	beq.n	8007408 <__lo0bits+0x24>
 8007400:	40cb      	lsrs	r3, r1
 8007402:	0008      	movs	r0, r1
 8007404:	6013      	str	r3, [r2, #0]
 8007406:	4770      	bx	lr
 8007408:	089b      	lsrs	r3, r3, #2
 800740a:	6013      	str	r3, [r2, #0]
 800740c:	e7fb      	b.n	8007406 <__lo0bits+0x22>
 800740e:	b299      	uxth	r1, r3
 8007410:	2900      	cmp	r1, #0
 8007412:	d101      	bne.n	8007418 <__lo0bits+0x34>
 8007414:	2010      	movs	r0, #16
 8007416:	0c1b      	lsrs	r3, r3, #16
 8007418:	b2d9      	uxtb	r1, r3
 800741a:	2900      	cmp	r1, #0
 800741c:	d101      	bne.n	8007422 <__lo0bits+0x3e>
 800741e:	3008      	adds	r0, #8
 8007420:	0a1b      	lsrs	r3, r3, #8
 8007422:	0719      	lsls	r1, r3, #28
 8007424:	d101      	bne.n	800742a <__lo0bits+0x46>
 8007426:	3004      	adds	r0, #4
 8007428:	091b      	lsrs	r3, r3, #4
 800742a:	0799      	lsls	r1, r3, #30
 800742c:	d101      	bne.n	8007432 <__lo0bits+0x4e>
 800742e:	3002      	adds	r0, #2
 8007430:	089b      	lsrs	r3, r3, #2
 8007432:	07d9      	lsls	r1, r3, #31
 8007434:	d4e9      	bmi.n	800740a <__lo0bits+0x26>
 8007436:	3001      	adds	r0, #1
 8007438:	085b      	lsrs	r3, r3, #1
 800743a:	d1e6      	bne.n	800740a <__lo0bits+0x26>
 800743c:	2020      	movs	r0, #32
 800743e:	e7e2      	b.n	8007406 <__lo0bits+0x22>

08007440 <__i2b>:
 8007440:	b510      	push	{r4, lr}
 8007442:	000c      	movs	r4, r1
 8007444:	2101      	movs	r1, #1
 8007446:	f7ff ff07 	bl	8007258 <_Balloc>
 800744a:	2800      	cmp	r0, #0
 800744c:	d106      	bne.n	800745c <__i2b+0x1c>
 800744e:	21a0      	movs	r1, #160	; 0xa0
 8007450:	0002      	movs	r2, r0
 8007452:	4b04      	ldr	r3, [pc, #16]	; (8007464 <__i2b+0x24>)
 8007454:	4804      	ldr	r0, [pc, #16]	; (8007468 <__i2b+0x28>)
 8007456:	0049      	lsls	r1, r1, #1
 8007458:	f000 fcc6 	bl	8007de8 <__assert_func>
 800745c:	2301      	movs	r3, #1
 800745e:	6144      	str	r4, [r0, #20]
 8007460:	6103      	str	r3, [r0, #16]
 8007462:	bd10      	pop	{r4, pc}
 8007464:	080091ff 	.word	0x080091ff
 8007468:	08009210 	.word	0x08009210

0800746c <__multiply>:
 800746c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800746e:	690b      	ldr	r3, [r1, #16]
 8007470:	0014      	movs	r4, r2
 8007472:	6912      	ldr	r2, [r2, #16]
 8007474:	000d      	movs	r5, r1
 8007476:	b089      	sub	sp, #36	; 0x24
 8007478:	4293      	cmp	r3, r2
 800747a:	da01      	bge.n	8007480 <__multiply+0x14>
 800747c:	0025      	movs	r5, r4
 800747e:	000c      	movs	r4, r1
 8007480:	692f      	ldr	r7, [r5, #16]
 8007482:	6926      	ldr	r6, [r4, #16]
 8007484:	6869      	ldr	r1, [r5, #4]
 8007486:	19bb      	adds	r3, r7, r6
 8007488:	9302      	str	r3, [sp, #8]
 800748a:	68ab      	ldr	r3, [r5, #8]
 800748c:	19ba      	adds	r2, r7, r6
 800748e:	4293      	cmp	r3, r2
 8007490:	da00      	bge.n	8007494 <__multiply+0x28>
 8007492:	3101      	adds	r1, #1
 8007494:	f7ff fee0 	bl	8007258 <_Balloc>
 8007498:	9001      	str	r0, [sp, #4]
 800749a:	2800      	cmp	r0, #0
 800749c:	d106      	bne.n	80074ac <__multiply+0x40>
 800749e:	215e      	movs	r1, #94	; 0x5e
 80074a0:	0002      	movs	r2, r0
 80074a2:	4b48      	ldr	r3, [pc, #288]	; (80075c4 <__multiply+0x158>)
 80074a4:	4848      	ldr	r0, [pc, #288]	; (80075c8 <__multiply+0x15c>)
 80074a6:	31ff      	adds	r1, #255	; 0xff
 80074a8:	f000 fc9e 	bl	8007de8 <__assert_func>
 80074ac:	9b01      	ldr	r3, [sp, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	3314      	adds	r3, #20
 80074b2:	469c      	mov	ip, r3
 80074b4:	19bb      	adds	r3, r7, r6
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	4463      	add	r3, ip
 80074ba:	9303      	str	r3, [sp, #12]
 80074bc:	4663      	mov	r3, ip
 80074be:	9903      	ldr	r1, [sp, #12]
 80074c0:	428b      	cmp	r3, r1
 80074c2:	d32c      	bcc.n	800751e <__multiply+0xb2>
 80074c4:	002b      	movs	r3, r5
 80074c6:	0022      	movs	r2, r4
 80074c8:	3314      	adds	r3, #20
 80074ca:	00bf      	lsls	r7, r7, #2
 80074cc:	3214      	adds	r2, #20
 80074ce:	9306      	str	r3, [sp, #24]
 80074d0:	00b6      	lsls	r6, r6, #2
 80074d2:	19db      	adds	r3, r3, r7
 80074d4:	9304      	str	r3, [sp, #16]
 80074d6:	1993      	adds	r3, r2, r6
 80074d8:	9307      	str	r3, [sp, #28]
 80074da:	2304      	movs	r3, #4
 80074dc:	9305      	str	r3, [sp, #20]
 80074de:	002b      	movs	r3, r5
 80074e0:	9904      	ldr	r1, [sp, #16]
 80074e2:	3315      	adds	r3, #21
 80074e4:	9200      	str	r2, [sp, #0]
 80074e6:	4299      	cmp	r1, r3
 80074e8:	d305      	bcc.n	80074f6 <__multiply+0x8a>
 80074ea:	1b4b      	subs	r3, r1, r5
 80074ec:	3b15      	subs	r3, #21
 80074ee:	089b      	lsrs	r3, r3, #2
 80074f0:	3301      	adds	r3, #1
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	9305      	str	r3, [sp, #20]
 80074f6:	9b07      	ldr	r3, [sp, #28]
 80074f8:	9a00      	ldr	r2, [sp, #0]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d311      	bcc.n	8007522 <__multiply+0xb6>
 80074fe:	9b02      	ldr	r3, [sp, #8]
 8007500:	2b00      	cmp	r3, #0
 8007502:	dd06      	ble.n	8007512 <__multiply+0xa6>
 8007504:	9b03      	ldr	r3, [sp, #12]
 8007506:	3b04      	subs	r3, #4
 8007508:	9303      	str	r3, [sp, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d054      	beq.n	80075bc <__multiply+0x150>
 8007512:	9b01      	ldr	r3, [sp, #4]
 8007514:	9a02      	ldr	r2, [sp, #8]
 8007516:	0018      	movs	r0, r3
 8007518:	611a      	str	r2, [r3, #16]
 800751a:	b009      	add	sp, #36	; 0x24
 800751c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800751e:	c304      	stmia	r3!, {r2}
 8007520:	e7cd      	b.n	80074be <__multiply+0x52>
 8007522:	9b00      	ldr	r3, [sp, #0]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	b298      	uxth	r0, r3
 8007528:	2800      	cmp	r0, #0
 800752a:	d01c      	beq.n	8007566 <__multiply+0xfa>
 800752c:	4667      	mov	r7, ip
 800752e:	2400      	movs	r4, #0
 8007530:	9e06      	ldr	r6, [sp, #24]
 8007532:	ce02      	ldmia	r6!, {r1}
 8007534:	683a      	ldr	r2, [r7, #0]
 8007536:	b28b      	uxth	r3, r1
 8007538:	4343      	muls	r3, r0
 800753a:	0c09      	lsrs	r1, r1, #16
 800753c:	4341      	muls	r1, r0
 800753e:	b292      	uxth	r2, r2
 8007540:	189b      	adds	r3, r3, r2
 8007542:	191b      	adds	r3, r3, r4
 8007544:	000c      	movs	r4, r1
 8007546:	683a      	ldr	r2, [r7, #0]
 8007548:	0c11      	lsrs	r1, r2, #16
 800754a:	1861      	adds	r1, r4, r1
 800754c:	0c1c      	lsrs	r4, r3, #16
 800754e:	1909      	adds	r1, r1, r4
 8007550:	0c0c      	lsrs	r4, r1, #16
 8007552:	b29b      	uxth	r3, r3
 8007554:	0409      	lsls	r1, r1, #16
 8007556:	430b      	orrs	r3, r1
 8007558:	c708      	stmia	r7!, {r3}
 800755a:	9b04      	ldr	r3, [sp, #16]
 800755c:	42b3      	cmp	r3, r6
 800755e:	d8e8      	bhi.n	8007532 <__multiply+0xc6>
 8007560:	4663      	mov	r3, ip
 8007562:	9a05      	ldr	r2, [sp, #20]
 8007564:	509c      	str	r4, [r3, r2]
 8007566:	9b00      	ldr	r3, [sp, #0]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	0c1e      	lsrs	r6, r3, #16
 800756c:	d020      	beq.n	80075b0 <__multiply+0x144>
 800756e:	4663      	mov	r3, ip
 8007570:	002c      	movs	r4, r5
 8007572:	4660      	mov	r0, ip
 8007574:	2700      	movs	r7, #0
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	3414      	adds	r4, #20
 800757a:	6822      	ldr	r2, [r4, #0]
 800757c:	b29b      	uxth	r3, r3
 800757e:	b291      	uxth	r1, r2
 8007580:	4371      	muls	r1, r6
 8007582:	6802      	ldr	r2, [r0, #0]
 8007584:	0c12      	lsrs	r2, r2, #16
 8007586:	1889      	adds	r1, r1, r2
 8007588:	19cf      	adds	r7, r1, r7
 800758a:	0439      	lsls	r1, r7, #16
 800758c:	430b      	orrs	r3, r1
 800758e:	6003      	str	r3, [r0, #0]
 8007590:	cc02      	ldmia	r4!, {r1}
 8007592:	6843      	ldr	r3, [r0, #4]
 8007594:	0c09      	lsrs	r1, r1, #16
 8007596:	4371      	muls	r1, r6
 8007598:	b29b      	uxth	r3, r3
 800759a:	0c3f      	lsrs	r7, r7, #16
 800759c:	18cb      	adds	r3, r1, r3
 800759e:	9a04      	ldr	r2, [sp, #16]
 80075a0:	19db      	adds	r3, r3, r7
 80075a2:	0c1f      	lsrs	r7, r3, #16
 80075a4:	3004      	adds	r0, #4
 80075a6:	42a2      	cmp	r2, r4
 80075a8:	d8e7      	bhi.n	800757a <__multiply+0x10e>
 80075aa:	4662      	mov	r2, ip
 80075ac:	9905      	ldr	r1, [sp, #20]
 80075ae:	5053      	str	r3, [r2, r1]
 80075b0:	9b00      	ldr	r3, [sp, #0]
 80075b2:	3304      	adds	r3, #4
 80075b4:	9300      	str	r3, [sp, #0]
 80075b6:	2304      	movs	r3, #4
 80075b8:	449c      	add	ip, r3
 80075ba:	e79c      	b.n	80074f6 <__multiply+0x8a>
 80075bc:	9b02      	ldr	r3, [sp, #8]
 80075be:	3b01      	subs	r3, #1
 80075c0:	9302      	str	r3, [sp, #8]
 80075c2:	e79c      	b.n	80074fe <__multiply+0x92>
 80075c4:	080091ff 	.word	0x080091ff
 80075c8:	08009210 	.word	0x08009210

080075cc <__pow5mult>:
 80075cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075ce:	2303      	movs	r3, #3
 80075d0:	0015      	movs	r5, r2
 80075d2:	0007      	movs	r7, r0
 80075d4:	000e      	movs	r6, r1
 80075d6:	401a      	ands	r2, r3
 80075d8:	421d      	tst	r5, r3
 80075da:	d008      	beq.n	80075ee <__pow5mult+0x22>
 80075dc:	4925      	ldr	r1, [pc, #148]	; (8007674 <__pow5mult+0xa8>)
 80075de:	3a01      	subs	r2, #1
 80075e0:	0092      	lsls	r2, r2, #2
 80075e2:	5852      	ldr	r2, [r2, r1]
 80075e4:	2300      	movs	r3, #0
 80075e6:	0031      	movs	r1, r6
 80075e8:	f7ff fe9e 	bl	8007328 <__multadd>
 80075ec:	0006      	movs	r6, r0
 80075ee:	10ad      	asrs	r5, r5, #2
 80075f0:	d03d      	beq.n	800766e <__pow5mult+0xa2>
 80075f2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80075f4:	2c00      	cmp	r4, #0
 80075f6:	d10f      	bne.n	8007618 <__pow5mult+0x4c>
 80075f8:	2010      	movs	r0, #16
 80075fa:	f7ff fe0f 	bl	800721c <malloc>
 80075fe:	1e02      	subs	r2, r0, #0
 8007600:	6278      	str	r0, [r7, #36]	; 0x24
 8007602:	d105      	bne.n	8007610 <__pow5mult+0x44>
 8007604:	21d7      	movs	r1, #215	; 0xd7
 8007606:	4b1c      	ldr	r3, [pc, #112]	; (8007678 <__pow5mult+0xac>)
 8007608:	481c      	ldr	r0, [pc, #112]	; (800767c <__pow5mult+0xb0>)
 800760a:	0049      	lsls	r1, r1, #1
 800760c:	f000 fbec 	bl	8007de8 <__assert_func>
 8007610:	6044      	str	r4, [r0, #4]
 8007612:	6084      	str	r4, [r0, #8]
 8007614:	6004      	str	r4, [r0, #0]
 8007616:	60c4      	str	r4, [r0, #12]
 8007618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761a:	689c      	ldr	r4, [r3, #8]
 800761c:	9301      	str	r3, [sp, #4]
 800761e:	2c00      	cmp	r4, #0
 8007620:	d108      	bne.n	8007634 <__pow5mult+0x68>
 8007622:	0038      	movs	r0, r7
 8007624:	4916      	ldr	r1, [pc, #88]	; (8007680 <__pow5mult+0xb4>)
 8007626:	f7ff ff0b 	bl	8007440 <__i2b>
 800762a:	9b01      	ldr	r3, [sp, #4]
 800762c:	0004      	movs	r4, r0
 800762e:	6098      	str	r0, [r3, #8]
 8007630:	2300      	movs	r3, #0
 8007632:	6003      	str	r3, [r0, #0]
 8007634:	2301      	movs	r3, #1
 8007636:	421d      	tst	r5, r3
 8007638:	d00a      	beq.n	8007650 <__pow5mult+0x84>
 800763a:	0031      	movs	r1, r6
 800763c:	0022      	movs	r2, r4
 800763e:	0038      	movs	r0, r7
 8007640:	f7ff ff14 	bl	800746c <__multiply>
 8007644:	0031      	movs	r1, r6
 8007646:	9001      	str	r0, [sp, #4]
 8007648:	0038      	movs	r0, r7
 800764a:	f7ff fe49 	bl	80072e0 <_Bfree>
 800764e:	9e01      	ldr	r6, [sp, #4]
 8007650:	106d      	asrs	r5, r5, #1
 8007652:	d00c      	beq.n	800766e <__pow5mult+0xa2>
 8007654:	6820      	ldr	r0, [r4, #0]
 8007656:	2800      	cmp	r0, #0
 8007658:	d107      	bne.n	800766a <__pow5mult+0x9e>
 800765a:	0022      	movs	r2, r4
 800765c:	0021      	movs	r1, r4
 800765e:	0038      	movs	r0, r7
 8007660:	f7ff ff04 	bl	800746c <__multiply>
 8007664:	2300      	movs	r3, #0
 8007666:	6020      	str	r0, [r4, #0]
 8007668:	6003      	str	r3, [r0, #0]
 800766a:	0004      	movs	r4, r0
 800766c:	e7e2      	b.n	8007634 <__pow5mult+0x68>
 800766e:	0030      	movs	r0, r6
 8007670:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007672:	46c0      	nop			; (mov r8, r8)
 8007674:	08009360 	.word	0x08009360
 8007678:	08009189 	.word	0x08009189
 800767c:	08009210 	.word	0x08009210
 8007680:	00000271 	.word	0x00000271

08007684 <__lshift>:
 8007684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007686:	000c      	movs	r4, r1
 8007688:	0017      	movs	r7, r2
 800768a:	6923      	ldr	r3, [r4, #16]
 800768c:	1155      	asrs	r5, r2, #5
 800768e:	b087      	sub	sp, #28
 8007690:	18eb      	adds	r3, r5, r3
 8007692:	9302      	str	r3, [sp, #8]
 8007694:	3301      	adds	r3, #1
 8007696:	9301      	str	r3, [sp, #4]
 8007698:	6849      	ldr	r1, [r1, #4]
 800769a:	68a3      	ldr	r3, [r4, #8]
 800769c:	9004      	str	r0, [sp, #16]
 800769e:	9a01      	ldr	r2, [sp, #4]
 80076a0:	4293      	cmp	r3, r2
 80076a2:	db11      	blt.n	80076c8 <__lshift+0x44>
 80076a4:	9804      	ldr	r0, [sp, #16]
 80076a6:	f7ff fdd7 	bl	8007258 <_Balloc>
 80076aa:	0002      	movs	r2, r0
 80076ac:	2300      	movs	r3, #0
 80076ae:	3214      	adds	r2, #20
 80076b0:	0006      	movs	r6, r0
 80076b2:	0011      	movs	r1, r2
 80076b4:	9203      	str	r2, [sp, #12]
 80076b6:	4298      	cmp	r0, r3
 80076b8:	d10d      	bne.n	80076d6 <__lshift+0x52>
 80076ba:	21da      	movs	r1, #218	; 0xda
 80076bc:	0002      	movs	r2, r0
 80076be:	4b27      	ldr	r3, [pc, #156]	; (800775c <__lshift+0xd8>)
 80076c0:	4827      	ldr	r0, [pc, #156]	; (8007760 <__lshift+0xdc>)
 80076c2:	31ff      	adds	r1, #255	; 0xff
 80076c4:	f000 fb90 	bl	8007de8 <__assert_func>
 80076c8:	3101      	adds	r1, #1
 80076ca:	005b      	lsls	r3, r3, #1
 80076cc:	e7e7      	b.n	800769e <__lshift+0x1a>
 80076ce:	2200      	movs	r2, #0
 80076d0:	0098      	lsls	r0, r3, #2
 80076d2:	500a      	str	r2, [r1, r0]
 80076d4:	3301      	adds	r3, #1
 80076d6:	42ab      	cmp	r3, r5
 80076d8:	dbf9      	blt.n	80076ce <__lshift+0x4a>
 80076da:	43eb      	mvns	r3, r5
 80076dc:	17db      	asrs	r3, r3, #31
 80076de:	401d      	ands	r5, r3
 80076e0:	9b03      	ldr	r3, [sp, #12]
 80076e2:	00ad      	lsls	r5, r5, #2
 80076e4:	211f      	movs	r1, #31
 80076e6:	0038      	movs	r0, r7
 80076e8:	195d      	adds	r5, r3, r5
 80076ea:	0023      	movs	r3, r4
 80076ec:	6922      	ldr	r2, [r4, #16]
 80076ee:	3314      	adds	r3, #20
 80076f0:	0092      	lsls	r2, r2, #2
 80076f2:	4008      	ands	r0, r1
 80076f4:	4684      	mov	ip, r0
 80076f6:	189a      	adds	r2, r3, r2
 80076f8:	420f      	tst	r7, r1
 80076fa:	d02a      	beq.n	8007752 <__lshift+0xce>
 80076fc:	3101      	adds	r1, #1
 80076fe:	1a09      	subs	r1, r1, r0
 8007700:	9105      	str	r1, [sp, #20]
 8007702:	2100      	movs	r1, #0
 8007704:	9503      	str	r5, [sp, #12]
 8007706:	4667      	mov	r7, ip
 8007708:	6818      	ldr	r0, [r3, #0]
 800770a:	40b8      	lsls	r0, r7
 800770c:	4301      	orrs	r1, r0
 800770e:	9803      	ldr	r0, [sp, #12]
 8007710:	c002      	stmia	r0!, {r1}
 8007712:	cb02      	ldmia	r3!, {r1}
 8007714:	9003      	str	r0, [sp, #12]
 8007716:	9805      	ldr	r0, [sp, #20]
 8007718:	40c1      	lsrs	r1, r0
 800771a:	429a      	cmp	r2, r3
 800771c:	d8f3      	bhi.n	8007706 <__lshift+0x82>
 800771e:	0020      	movs	r0, r4
 8007720:	3015      	adds	r0, #21
 8007722:	2304      	movs	r3, #4
 8007724:	4282      	cmp	r2, r0
 8007726:	d304      	bcc.n	8007732 <__lshift+0xae>
 8007728:	1b13      	subs	r3, r2, r4
 800772a:	3b15      	subs	r3, #21
 800772c:	089b      	lsrs	r3, r3, #2
 800772e:	3301      	adds	r3, #1
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	50e9      	str	r1, [r5, r3]
 8007734:	2900      	cmp	r1, #0
 8007736:	d002      	beq.n	800773e <__lshift+0xba>
 8007738:	9b02      	ldr	r3, [sp, #8]
 800773a:	3302      	adds	r3, #2
 800773c:	9301      	str	r3, [sp, #4]
 800773e:	9b01      	ldr	r3, [sp, #4]
 8007740:	9804      	ldr	r0, [sp, #16]
 8007742:	3b01      	subs	r3, #1
 8007744:	0021      	movs	r1, r4
 8007746:	6133      	str	r3, [r6, #16]
 8007748:	f7ff fdca 	bl	80072e0 <_Bfree>
 800774c:	0030      	movs	r0, r6
 800774e:	b007      	add	sp, #28
 8007750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007752:	cb02      	ldmia	r3!, {r1}
 8007754:	c502      	stmia	r5!, {r1}
 8007756:	429a      	cmp	r2, r3
 8007758:	d8fb      	bhi.n	8007752 <__lshift+0xce>
 800775a:	e7f0      	b.n	800773e <__lshift+0xba>
 800775c:	080091ff 	.word	0x080091ff
 8007760:	08009210 	.word	0x08009210

08007764 <__mcmp>:
 8007764:	6902      	ldr	r2, [r0, #16]
 8007766:	690b      	ldr	r3, [r1, #16]
 8007768:	b530      	push	{r4, r5, lr}
 800776a:	0004      	movs	r4, r0
 800776c:	1ad0      	subs	r0, r2, r3
 800776e:	429a      	cmp	r2, r3
 8007770:	d10d      	bne.n	800778e <__mcmp+0x2a>
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	3414      	adds	r4, #20
 8007776:	3114      	adds	r1, #20
 8007778:	18e2      	adds	r2, r4, r3
 800777a:	18c9      	adds	r1, r1, r3
 800777c:	3a04      	subs	r2, #4
 800777e:	3904      	subs	r1, #4
 8007780:	6815      	ldr	r5, [r2, #0]
 8007782:	680b      	ldr	r3, [r1, #0]
 8007784:	429d      	cmp	r5, r3
 8007786:	d003      	beq.n	8007790 <__mcmp+0x2c>
 8007788:	2001      	movs	r0, #1
 800778a:	429d      	cmp	r5, r3
 800778c:	d303      	bcc.n	8007796 <__mcmp+0x32>
 800778e:	bd30      	pop	{r4, r5, pc}
 8007790:	4294      	cmp	r4, r2
 8007792:	d3f3      	bcc.n	800777c <__mcmp+0x18>
 8007794:	e7fb      	b.n	800778e <__mcmp+0x2a>
 8007796:	4240      	negs	r0, r0
 8007798:	e7f9      	b.n	800778e <__mcmp+0x2a>
	...

0800779c <__mdiff>:
 800779c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800779e:	000e      	movs	r6, r1
 80077a0:	0007      	movs	r7, r0
 80077a2:	0011      	movs	r1, r2
 80077a4:	0030      	movs	r0, r6
 80077a6:	b087      	sub	sp, #28
 80077a8:	0014      	movs	r4, r2
 80077aa:	f7ff ffdb 	bl	8007764 <__mcmp>
 80077ae:	1e05      	subs	r5, r0, #0
 80077b0:	d110      	bne.n	80077d4 <__mdiff+0x38>
 80077b2:	0001      	movs	r1, r0
 80077b4:	0038      	movs	r0, r7
 80077b6:	f7ff fd4f 	bl	8007258 <_Balloc>
 80077ba:	1e02      	subs	r2, r0, #0
 80077bc:	d104      	bne.n	80077c8 <__mdiff+0x2c>
 80077be:	4b40      	ldr	r3, [pc, #256]	; (80078c0 <__mdiff+0x124>)
 80077c0:	4940      	ldr	r1, [pc, #256]	; (80078c4 <__mdiff+0x128>)
 80077c2:	4841      	ldr	r0, [pc, #260]	; (80078c8 <__mdiff+0x12c>)
 80077c4:	f000 fb10 	bl	8007de8 <__assert_func>
 80077c8:	2301      	movs	r3, #1
 80077ca:	6145      	str	r5, [r0, #20]
 80077cc:	6103      	str	r3, [r0, #16]
 80077ce:	0010      	movs	r0, r2
 80077d0:	b007      	add	sp, #28
 80077d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077d4:	2301      	movs	r3, #1
 80077d6:	9301      	str	r3, [sp, #4]
 80077d8:	2800      	cmp	r0, #0
 80077da:	db04      	blt.n	80077e6 <__mdiff+0x4a>
 80077dc:	0023      	movs	r3, r4
 80077de:	0034      	movs	r4, r6
 80077e0:	001e      	movs	r6, r3
 80077e2:	2300      	movs	r3, #0
 80077e4:	9301      	str	r3, [sp, #4]
 80077e6:	0038      	movs	r0, r7
 80077e8:	6861      	ldr	r1, [r4, #4]
 80077ea:	f7ff fd35 	bl	8007258 <_Balloc>
 80077ee:	1e02      	subs	r2, r0, #0
 80077f0:	d103      	bne.n	80077fa <__mdiff+0x5e>
 80077f2:	2190      	movs	r1, #144	; 0x90
 80077f4:	4b32      	ldr	r3, [pc, #200]	; (80078c0 <__mdiff+0x124>)
 80077f6:	0089      	lsls	r1, r1, #2
 80077f8:	e7e3      	b.n	80077c2 <__mdiff+0x26>
 80077fa:	9b01      	ldr	r3, [sp, #4]
 80077fc:	2700      	movs	r7, #0
 80077fe:	60c3      	str	r3, [r0, #12]
 8007800:	6920      	ldr	r0, [r4, #16]
 8007802:	3414      	adds	r4, #20
 8007804:	9401      	str	r4, [sp, #4]
 8007806:	9b01      	ldr	r3, [sp, #4]
 8007808:	0084      	lsls	r4, r0, #2
 800780a:	191b      	adds	r3, r3, r4
 800780c:	0034      	movs	r4, r6
 800780e:	9302      	str	r3, [sp, #8]
 8007810:	6933      	ldr	r3, [r6, #16]
 8007812:	3414      	adds	r4, #20
 8007814:	0099      	lsls	r1, r3, #2
 8007816:	1863      	adds	r3, r4, r1
 8007818:	9303      	str	r3, [sp, #12]
 800781a:	0013      	movs	r3, r2
 800781c:	3314      	adds	r3, #20
 800781e:	469c      	mov	ip, r3
 8007820:	9305      	str	r3, [sp, #20]
 8007822:	9b01      	ldr	r3, [sp, #4]
 8007824:	9304      	str	r3, [sp, #16]
 8007826:	9b04      	ldr	r3, [sp, #16]
 8007828:	cc02      	ldmia	r4!, {r1}
 800782a:	cb20      	ldmia	r3!, {r5}
 800782c:	9304      	str	r3, [sp, #16]
 800782e:	b2ab      	uxth	r3, r5
 8007830:	19df      	adds	r7, r3, r7
 8007832:	b28b      	uxth	r3, r1
 8007834:	1afb      	subs	r3, r7, r3
 8007836:	0c2d      	lsrs	r5, r5, #16
 8007838:	0c09      	lsrs	r1, r1, #16
 800783a:	1a69      	subs	r1, r5, r1
 800783c:	141d      	asrs	r5, r3, #16
 800783e:	1949      	adds	r1, r1, r5
 8007840:	140f      	asrs	r7, r1, #16
 8007842:	b29b      	uxth	r3, r3
 8007844:	0409      	lsls	r1, r1, #16
 8007846:	430b      	orrs	r3, r1
 8007848:	4661      	mov	r1, ip
 800784a:	c108      	stmia	r1!, {r3}
 800784c:	9b03      	ldr	r3, [sp, #12]
 800784e:	468c      	mov	ip, r1
 8007850:	42a3      	cmp	r3, r4
 8007852:	d8e8      	bhi.n	8007826 <__mdiff+0x8a>
 8007854:	0031      	movs	r1, r6
 8007856:	9c03      	ldr	r4, [sp, #12]
 8007858:	3115      	adds	r1, #21
 800785a:	2304      	movs	r3, #4
 800785c:	428c      	cmp	r4, r1
 800785e:	d304      	bcc.n	800786a <__mdiff+0xce>
 8007860:	1ba3      	subs	r3, r4, r6
 8007862:	3b15      	subs	r3, #21
 8007864:	089b      	lsrs	r3, r3, #2
 8007866:	3301      	adds	r3, #1
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	9901      	ldr	r1, [sp, #4]
 800786c:	18cc      	adds	r4, r1, r3
 800786e:	9905      	ldr	r1, [sp, #20]
 8007870:	0026      	movs	r6, r4
 8007872:	18cb      	adds	r3, r1, r3
 8007874:	469c      	mov	ip, r3
 8007876:	9902      	ldr	r1, [sp, #8]
 8007878:	428e      	cmp	r6, r1
 800787a:	d310      	bcc.n	800789e <__mdiff+0x102>
 800787c:	9e02      	ldr	r6, [sp, #8]
 800787e:	1ee5      	subs	r5, r4, #3
 8007880:	2100      	movs	r1, #0
 8007882:	42ae      	cmp	r6, r5
 8007884:	d304      	bcc.n	8007890 <__mdiff+0xf4>
 8007886:	0031      	movs	r1, r6
 8007888:	3103      	adds	r1, #3
 800788a:	1b09      	subs	r1, r1, r4
 800788c:	0889      	lsrs	r1, r1, #2
 800788e:	0089      	lsls	r1, r1, #2
 8007890:	185b      	adds	r3, r3, r1
 8007892:	3b04      	subs	r3, #4
 8007894:	6819      	ldr	r1, [r3, #0]
 8007896:	2900      	cmp	r1, #0
 8007898:	d00f      	beq.n	80078ba <__mdiff+0x11e>
 800789a:	6110      	str	r0, [r2, #16]
 800789c:	e797      	b.n	80077ce <__mdiff+0x32>
 800789e:	ce02      	ldmia	r6!, {r1}
 80078a0:	b28d      	uxth	r5, r1
 80078a2:	19ed      	adds	r5, r5, r7
 80078a4:	0c0f      	lsrs	r7, r1, #16
 80078a6:	1429      	asrs	r1, r5, #16
 80078a8:	1879      	adds	r1, r7, r1
 80078aa:	140f      	asrs	r7, r1, #16
 80078ac:	b2ad      	uxth	r5, r5
 80078ae:	0409      	lsls	r1, r1, #16
 80078b0:	430d      	orrs	r5, r1
 80078b2:	4661      	mov	r1, ip
 80078b4:	c120      	stmia	r1!, {r5}
 80078b6:	468c      	mov	ip, r1
 80078b8:	e7dd      	b.n	8007876 <__mdiff+0xda>
 80078ba:	3801      	subs	r0, #1
 80078bc:	e7e9      	b.n	8007892 <__mdiff+0xf6>
 80078be:	46c0      	nop			; (mov r8, r8)
 80078c0:	080091ff 	.word	0x080091ff
 80078c4:	00000232 	.word	0x00000232
 80078c8:	08009210 	.word	0x08009210

080078cc <__d2b>:
 80078cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078ce:	2101      	movs	r1, #1
 80078d0:	0014      	movs	r4, r2
 80078d2:	001e      	movs	r6, r3
 80078d4:	9f08      	ldr	r7, [sp, #32]
 80078d6:	f7ff fcbf 	bl	8007258 <_Balloc>
 80078da:	1e05      	subs	r5, r0, #0
 80078dc:	d105      	bne.n	80078ea <__d2b+0x1e>
 80078de:	0002      	movs	r2, r0
 80078e0:	4b26      	ldr	r3, [pc, #152]	; (800797c <__d2b+0xb0>)
 80078e2:	4927      	ldr	r1, [pc, #156]	; (8007980 <__d2b+0xb4>)
 80078e4:	4827      	ldr	r0, [pc, #156]	; (8007984 <__d2b+0xb8>)
 80078e6:	f000 fa7f 	bl	8007de8 <__assert_func>
 80078ea:	0333      	lsls	r3, r6, #12
 80078ec:	0076      	lsls	r6, r6, #1
 80078ee:	0b1b      	lsrs	r3, r3, #12
 80078f0:	0d76      	lsrs	r6, r6, #21
 80078f2:	d124      	bne.n	800793e <__d2b+0x72>
 80078f4:	9301      	str	r3, [sp, #4]
 80078f6:	2c00      	cmp	r4, #0
 80078f8:	d027      	beq.n	800794a <__d2b+0x7e>
 80078fa:	4668      	mov	r0, sp
 80078fc:	9400      	str	r4, [sp, #0]
 80078fe:	f7ff fd71 	bl	80073e4 <__lo0bits>
 8007902:	9c00      	ldr	r4, [sp, #0]
 8007904:	2800      	cmp	r0, #0
 8007906:	d01e      	beq.n	8007946 <__d2b+0x7a>
 8007908:	9b01      	ldr	r3, [sp, #4]
 800790a:	2120      	movs	r1, #32
 800790c:	001a      	movs	r2, r3
 800790e:	1a09      	subs	r1, r1, r0
 8007910:	408a      	lsls	r2, r1
 8007912:	40c3      	lsrs	r3, r0
 8007914:	4322      	orrs	r2, r4
 8007916:	616a      	str	r2, [r5, #20]
 8007918:	9301      	str	r3, [sp, #4]
 800791a:	9c01      	ldr	r4, [sp, #4]
 800791c:	61ac      	str	r4, [r5, #24]
 800791e:	1e63      	subs	r3, r4, #1
 8007920:	419c      	sbcs	r4, r3
 8007922:	3401      	adds	r4, #1
 8007924:	612c      	str	r4, [r5, #16]
 8007926:	2e00      	cmp	r6, #0
 8007928:	d018      	beq.n	800795c <__d2b+0x90>
 800792a:	4b17      	ldr	r3, [pc, #92]	; (8007988 <__d2b+0xbc>)
 800792c:	18f6      	adds	r6, r6, r3
 800792e:	2335      	movs	r3, #53	; 0x35
 8007930:	1836      	adds	r6, r6, r0
 8007932:	1a18      	subs	r0, r3, r0
 8007934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007936:	603e      	str	r6, [r7, #0]
 8007938:	6018      	str	r0, [r3, #0]
 800793a:	0028      	movs	r0, r5
 800793c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800793e:	2280      	movs	r2, #128	; 0x80
 8007940:	0352      	lsls	r2, r2, #13
 8007942:	4313      	orrs	r3, r2
 8007944:	e7d6      	b.n	80078f4 <__d2b+0x28>
 8007946:	616c      	str	r4, [r5, #20]
 8007948:	e7e7      	b.n	800791a <__d2b+0x4e>
 800794a:	a801      	add	r0, sp, #4
 800794c:	f7ff fd4a 	bl	80073e4 <__lo0bits>
 8007950:	2401      	movs	r4, #1
 8007952:	9b01      	ldr	r3, [sp, #4]
 8007954:	612c      	str	r4, [r5, #16]
 8007956:	616b      	str	r3, [r5, #20]
 8007958:	3020      	adds	r0, #32
 800795a:	e7e4      	b.n	8007926 <__d2b+0x5a>
 800795c:	4b0b      	ldr	r3, [pc, #44]	; (800798c <__d2b+0xc0>)
 800795e:	18c0      	adds	r0, r0, r3
 8007960:	4b0b      	ldr	r3, [pc, #44]	; (8007990 <__d2b+0xc4>)
 8007962:	6038      	str	r0, [r7, #0]
 8007964:	18e3      	adds	r3, r4, r3
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	18eb      	adds	r3, r5, r3
 800796a:	6958      	ldr	r0, [r3, #20]
 800796c:	f7ff fd20 	bl	80073b0 <__hi0bits>
 8007970:	0164      	lsls	r4, r4, #5
 8007972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007974:	1a24      	subs	r4, r4, r0
 8007976:	601c      	str	r4, [r3, #0]
 8007978:	e7df      	b.n	800793a <__d2b+0x6e>
 800797a:	46c0      	nop			; (mov r8, r8)
 800797c:	080091ff 	.word	0x080091ff
 8007980:	0000030a 	.word	0x0000030a
 8007984:	08009210 	.word	0x08009210
 8007988:	fffffbcd 	.word	0xfffffbcd
 800798c:	fffffbce 	.word	0xfffffbce
 8007990:	3fffffff 	.word	0x3fffffff

08007994 <_calloc_r>:
 8007994:	434a      	muls	r2, r1
 8007996:	b570      	push	{r4, r5, r6, lr}
 8007998:	0011      	movs	r1, r2
 800799a:	0015      	movs	r5, r2
 800799c:	f000 f852 	bl	8007a44 <_malloc_r>
 80079a0:	1e04      	subs	r4, r0, #0
 80079a2:	d003      	beq.n	80079ac <_calloc_r+0x18>
 80079a4:	002a      	movs	r2, r5
 80079a6:	2100      	movs	r1, #0
 80079a8:	f7fe f8e8 	bl	8005b7c <memset>
 80079ac:	0020      	movs	r0, r4
 80079ae:	bd70      	pop	{r4, r5, r6, pc}

080079b0 <_free_r>:
 80079b0:	b570      	push	{r4, r5, r6, lr}
 80079b2:	0005      	movs	r5, r0
 80079b4:	2900      	cmp	r1, #0
 80079b6:	d010      	beq.n	80079da <_free_r+0x2a>
 80079b8:	1f0c      	subs	r4, r1, #4
 80079ba:	6823      	ldr	r3, [r4, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	da00      	bge.n	80079c2 <_free_r+0x12>
 80079c0:	18e4      	adds	r4, r4, r3
 80079c2:	0028      	movs	r0, r5
 80079c4:	f000 fa64 	bl	8007e90 <__malloc_lock>
 80079c8:	4a1d      	ldr	r2, [pc, #116]	; (8007a40 <_free_r+0x90>)
 80079ca:	6813      	ldr	r3, [r2, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d105      	bne.n	80079dc <_free_r+0x2c>
 80079d0:	6063      	str	r3, [r4, #4]
 80079d2:	6014      	str	r4, [r2, #0]
 80079d4:	0028      	movs	r0, r5
 80079d6:	f000 fa63 	bl	8007ea0 <__malloc_unlock>
 80079da:	bd70      	pop	{r4, r5, r6, pc}
 80079dc:	42a3      	cmp	r3, r4
 80079de:	d908      	bls.n	80079f2 <_free_r+0x42>
 80079e0:	6821      	ldr	r1, [r4, #0]
 80079e2:	1860      	adds	r0, r4, r1
 80079e4:	4283      	cmp	r3, r0
 80079e6:	d1f3      	bne.n	80079d0 <_free_r+0x20>
 80079e8:	6818      	ldr	r0, [r3, #0]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	1841      	adds	r1, r0, r1
 80079ee:	6021      	str	r1, [r4, #0]
 80079f0:	e7ee      	b.n	80079d0 <_free_r+0x20>
 80079f2:	001a      	movs	r2, r3
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d001      	beq.n	80079fe <_free_r+0x4e>
 80079fa:	42a3      	cmp	r3, r4
 80079fc:	d9f9      	bls.n	80079f2 <_free_r+0x42>
 80079fe:	6811      	ldr	r1, [r2, #0]
 8007a00:	1850      	adds	r0, r2, r1
 8007a02:	42a0      	cmp	r0, r4
 8007a04:	d10b      	bne.n	8007a1e <_free_r+0x6e>
 8007a06:	6820      	ldr	r0, [r4, #0]
 8007a08:	1809      	adds	r1, r1, r0
 8007a0a:	1850      	adds	r0, r2, r1
 8007a0c:	6011      	str	r1, [r2, #0]
 8007a0e:	4283      	cmp	r3, r0
 8007a10:	d1e0      	bne.n	80079d4 <_free_r+0x24>
 8007a12:	6818      	ldr	r0, [r3, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	1841      	adds	r1, r0, r1
 8007a18:	6011      	str	r1, [r2, #0]
 8007a1a:	6053      	str	r3, [r2, #4]
 8007a1c:	e7da      	b.n	80079d4 <_free_r+0x24>
 8007a1e:	42a0      	cmp	r0, r4
 8007a20:	d902      	bls.n	8007a28 <_free_r+0x78>
 8007a22:	230c      	movs	r3, #12
 8007a24:	602b      	str	r3, [r5, #0]
 8007a26:	e7d5      	b.n	80079d4 <_free_r+0x24>
 8007a28:	6821      	ldr	r1, [r4, #0]
 8007a2a:	1860      	adds	r0, r4, r1
 8007a2c:	4283      	cmp	r3, r0
 8007a2e:	d103      	bne.n	8007a38 <_free_r+0x88>
 8007a30:	6818      	ldr	r0, [r3, #0]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	1841      	adds	r1, r0, r1
 8007a36:	6021      	str	r1, [r4, #0]
 8007a38:	6063      	str	r3, [r4, #4]
 8007a3a:	6054      	str	r4, [r2, #4]
 8007a3c:	e7ca      	b.n	80079d4 <_free_r+0x24>
 8007a3e:	46c0      	nop			; (mov r8, r8)
 8007a40:	20000628 	.word	0x20000628

08007a44 <_malloc_r>:
 8007a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a46:	2303      	movs	r3, #3
 8007a48:	1ccd      	adds	r5, r1, #3
 8007a4a:	439d      	bics	r5, r3
 8007a4c:	3508      	adds	r5, #8
 8007a4e:	0006      	movs	r6, r0
 8007a50:	2d0c      	cmp	r5, #12
 8007a52:	d21f      	bcs.n	8007a94 <_malloc_r+0x50>
 8007a54:	250c      	movs	r5, #12
 8007a56:	42a9      	cmp	r1, r5
 8007a58:	d81e      	bhi.n	8007a98 <_malloc_r+0x54>
 8007a5a:	0030      	movs	r0, r6
 8007a5c:	f000 fa18 	bl	8007e90 <__malloc_lock>
 8007a60:	4925      	ldr	r1, [pc, #148]	; (8007af8 <_malloc_r+0xb4>)
 8007a62:	680a      	ldr	r2, [r1, #0]
 8007a64:	0014      	movs	r4, r2
 8007a66:	2c00      	cmp	r4, #0
 8007a68:	d11a      	bne.n	8007aa0 <_malloc_r+0x5c>
 8007a6a:	4f24      	ldr	r7, [pc, #144]	; (8007afc <_malloc_r+0xb8>)
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d104      	bne.n	8007a7c <_malloc_r+0x38>
 8007a72:	0021      	movs	r1, r4
 8007a74:	0030      	movs	r0, r6
 8007a76:	f000 f9a5 	bl	8007dc4 <_sbrk_r>
 8007a7a:	6038      	str	r0, [r7, #0]
 8007a7c:	0029      	movs	r1, r5
 8007a7e:	0030      	movs	r0, r6
 8007a80:	f000 f9a0 	bl	8007dc4 <_sbrk_r>
 8007a84:	1c43      	adds	r3, r0, #1
 8007a86:	d12b      	bne.n	8007ae0 <_malloc_r+0x9c>
 8007a88:	230c      	movs	r3, #12
 8007a8a:	0030      	movs	r0, r6
 8007a8c:	6033      	str	r3, [r6, #0]
 8007a8e:	f000 fa07 	bl	8007ea0 <__malloc_unlock>
 8007a92:	e003      	b.n	8007a9c <_malloc_r+0x58>
 8007a94:	2d00      	cmp	r5, #0
 8007a96:	dade      	bge.n	8007a56 <_malloc_r+0x12>
 8007a98:	230c      	movs	r3, #12
 8007a9a:	6033      	str	r3, [r6, #0]
 8007a9c:	2000      	movs	r0, #0
 8007a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007aa0:	6823      	ldr	r3, [r4, #0]
 8007aa2:	1b5b      	subs	r3, r3, r5
 8007aa4:	d419      	bmi.n	8007ada <_malloc_r+0x96>
 8007aa6:	2b0b      	cmp	r3, #11
 8007aa8:	d903      	bls.n	8007ab2 <_malloc_r+0x6e>
 8007aaa:	6023      	str	r3, [r4, #0]
 8007aac:	18e4      	adds	r4, r4, r3
 8007aae:	6025      	str	r5, [r4, #0]
 8007ab0:	e003      	b.n	8007aba <_malloc_r+0x76>
 8007ab2:	6863      	ldr	r3, [r4, #4]
 8007ab4:	42a2      	cmp	r2, r4
 8007ab6:	d10e      	bne.n	8007ad6 <_malloc_r+0x92>
 8007ab8:	600b      	str	r3, [r1, #0]
 8007aba:	0030      	movs	r0, r6
 8007abc:	f000 f9f0 	bl	8007ea0 <__malloc_unlock>
 8007ac0:	0020      	movs	r0, r4
 8007ac2:	2207      	movs	r2, #7
 8007ac4:	300b      	adds	r0, #11
 8007ac6:	1d23      	adds	r3, r4, #4
 8007ac8:	4390      	bics	r0, r2
 8007aca:	1ac2      	subs	r2, r0, r3
 8007acc:	4298      	cmp	r0, r3
 8007ace:	d0e6      	beq.n	8007a9e <_malloc_r+0x5a>
 8007ad0:	1a1b      	subs	r3, r3, r0
 8007ad2:	50a3      	str	r3, [r4, r2]
 8007ad4:	e7e3      	b.n	8007a9e <_malloc_r+0x5a>
 8007ad6:	6053      	str	r3, [r2, #4]
 8007ad8:	e7ef      	b.n	8007aba <_malloc_r+0x76>
 8007ada:	0022      	movs	r2, r4
 8007adc:	6864      	ldr	r4, [r4, #4]
 8007ade:	e7c2      	b.n	8007a66 <_malloc_r+0x22>
 8007ae0:	2303      	movs	r3, #3
 8007ae2:	1cc4      	adds	r4, r0, #3
 8007ae4:	439c      	bics	r4, r3
 8007ae6:	42a0      	cmp	r0, r4
 8007ae8:	d0e1      	beq.n	8007aae <_malloc_r+0x6a>
 8007aea:	1a21      	subs	r1, r4, r0
 8007aec:	0030      	movs	r0, r6
 8007aee:	f000 f969 	bl	8007dc4 <_sbrk_r>
 8007af2:	1c43      	adds	r3, r0, #1
 8007af4:	d1db      	bne.n	8007aae <_malloc_r+0x6a>
 8007af6:	e7c7      	b.n	8007a88 <_malloc_r+0x44>
 8007af8:	20000628 	.word	0x20000628
 8007afc:	2000062c 	.word	0x2000062c

08007b00 <__ssputs_r>:
 8007b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b02:	688e      	ldr	r6, [r1, #8]
 8007b04:	b085      	sub	sp, #20
 8007b06:	0007      	movs	r7, r0
 8007b08:	000c      	movs	r4, r1
 8007b0a:	9203      	str	r2, [sp, #12]
 8007b0c:	9301      	str	r3, [sp, #4]
 8007b0e:	429e      	cmp	r6, r3
 8007b10:	d83c      	bhi.n	8007b8c <__ssputs_r+0x8c>
 8007b12:	2390      	movs	r3, #144	; 0x90
 8007b14:	898a      	ldrh	r2, [r1, #12]
 8007b16:	00db      	lsls	r3, r3, #3
 8007b18:	421a      	tst	r2, r3
 8007b1a:	d034      	beq.n	8007b86 <__ssputs_r+0x86>
 8007b1c:	2503      	movs	r5, #3
 8007b1e:	6909      	ldr	r1, [r1, #16]
 8007b20:	6823      	ldr	r3, [r4, #0]
 8007b22:	1a5b      	subs	r3, r3, r1
 8007b24:	9302      	str	r3, [sp, #8]
 8007b26:	6963      	ldr	r3, [r4, #20]
 8007b28:	9802      	ldr	r0, [sp, #8]
 8007b2a:	435d      	muls	r5, r3
 8007b2c:	0feb      	lsrs	r3, r5, #31
 8007b2e:	195d      	adds	r5, r3, r5
 8007b30:	9b01      	ldr	r3, [sp, #4]
 8007b32:	106d      	asrs	r5, r5, #1
 8007b34:	3301      	adds	r3, #1
 8007b36:	181b      	adds	r3, r3, r0
 8007b38:	42ab      	cmp	r3, r5
 8007b3a:	d900      	bls.n	8007b3e <__ssputs_r+0x3e>
 8007b3c:	001d      	movs	r5, r3
 8007b3e:	0553      	lsls	r3, r2, #21
 8007b40:	d532      	bpl.n	8007ba8 <__ssputs_r+0xa8>
 8007b42:	0029      	movs	r1, r5
 8007b44:	0038      	movs	r0, r7
 8007b46:	f7ff ff7d 	bl	8007a44 <_malloc_r>
 8007b4a:	1e06      	subs	r6, r0, #0
 8007b4c:	d109      	bne.n	8007b62 <__ssputs_r+0x62>
 8007b4e:	230c      	movs	r3, #12
 8007b50:	603b      	str	r3, [r7, #0]
 8007b52:	2340      	movs	r3, #64	; 0x40
 8007b54:	2001      	movs	r0, #1
 8007b56:	89a2      	ldrh	r2, [r4, #12]
 8007b58:	4240      	negs	r0, r0
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	81a3      	strh	r3, [r4, #12]
 8007b5e:	b005      	add	sp, #20
 8007b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b62:	9a02      	ldr	r2, [sp, #8]
 8007b64:	6921      	ldr	r1, [r4, #16]
 8007b66:	f7ff fb6e 	bl	8007246 <memcpy>
 8007b6a:	89a3      	ldrh	r3, [r4, #12]
 8007b6c:	4a14      	ldr	r2, [pc, #80]	; (8007bc0 <__ssputs_r+0xc0>)
 8007b6e:	401a      	ands	r2, r3
 8007b70:	2380      	movs	r3, #128	; 0x80
 8007b72:	4313      	orrs	r3, r2
 8007b74:	81a3      	strh	r3, [r4, #12]
 8007b76:	9b02      	ldr	r3, [sp, #8]
 8007b78:	6126      	str	r6, [r4, #16]
 8007b7a:	18f6      	adds	r6, r6, r3
 8007b7c:	6026      	str	r6, [r4, #0]
 8007b7e:	6165      	str	r5, [r4, #20]
 8007b80:	9e01      	ldr	r6, [sp, #4]
 8007b82:	1aed      	subs	r5, r5, r3
 8007b84:	60a5      	str	r5, [r4, #8]
 8007b86:	9b01      	ldr	r3, [sp, #4]
 8007b88:	429e      	cmp	r6, r3
 8007b8a:	d900      	bls.n	8007b8e <__ssputs_r+0x8e>
 8007b8c:	9e01      	ldr	r6, [sp, #4]
 8007b8e:	0032      	movs	r2, r6
 8007b90:	9903      	ldr	r1, [sp, #12]
 8007b92:	6820      	ldr	r0, [r4, #0]
 8007b94:	f000 f968 	bl	8007e68 <memmove>
 8007b98:	68a3      	ldr	r3, [r4, #8]
 8007b9a:	2000      	movs	r0, #0
 8007b9c:	1b9b      	subs	r3, r3, r6
 8007b9e:	60a3      	str	r3, [r4, #8]
 8007ba0:	6823      	ldr	r3, [r4, #0]
 8007ba2:	199e      	adds	r6, r3, r6
 8007ba4:	6026      	str	r6, [r4, #0]
 8007ba6:	e7da      	b.n	8007b5e <__ssputs_r+0x5e>
 8007ba8:	002a      	movs	r2, r5
 8007baa:	0038      	movs	r0, r7
 8007bac:	f000 f980 	bl	8007eb0 <_realloc_r>
 8007bb0:	1e06      	subs	r6, r0, #0
 8007bb2:	d1e0      	bne.n	8007b76 <__ssputs_r+0x76>
 8007bb4:	0038      	movs	r0, r7
 8007bb6:	6921      	ldr	r1, [r4, #16]
 8007bb8:	f7ff fefa 	bl	80079b0 <_free_r>
 8007bbc:	e7c7      	b.n	8007b4e <__ssputs_r+0x4e>
 8007bbe:	46c0      	nop			; (mov r8, r8)
 8007bc0:	fffffb7f 	.word	0xfffffb7f

08007bc4 <_svfiprintf_r>:
 8007bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bc6:	b0a1      	sub	sp, #132	; 0x84
 8007bc8:	9003      	str	r0, [sp, #12]
 8007bca:	001d      	movs	r5, r3
 8007bcc:	898b      	ldrh	r3, [r1, #12]
 8007bce:	000f      	movs	r7, r1
 8007bd0:	0016      	movs	r6, r2
 8007bd2:	061b      	lsls	r3, r3, #24
 8007bd4:	d511      	bpl.n	8007bfa <_svfiprintf_r+0x36>
 8007bd6:	690b      	ldr	r3, [r1, #16]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10e      	bne.n	8007bfa <_svfiprintf_r+0x36>
 8007bdc:	2140      	movs	r1, #64	; 0x40
 8007bde:	f7ff ff31 	bl	8007a44 <_malloc_r>
 8007be2:	6038      	str	r0, [r7, #0]
 8007be4:	6138      	str	r0, [r7, #16]
 8007be6:	2800      	cmp	r0, #0
 8007be8:	d105      	bne.n	8007bf6 <_svfiprintf_r+0x32>
 8007bea:	230c      	movs	r3, #12
 8007bec:	9a03      	ldr	r2, [sp, #12]
 8007bee:	3801      	subs	r0, #1
 8007bf0:	6013      	str	r3, [r2, #0]
 8007bf2:	b021      	add	sp, #132	; 0x84
 8007bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bf6:	2340      	movs	r3, #64	; 0x40
 8007bf8:	617b      	str	r3, [r7, #20]
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	ac08      	add	r4, sp, #32
 8007bfe:	6163      	str	r3, [r4, #20]
 8007c00:	3320      	adds	r3, #32
 8007c02:	7663      	strb	r3, [r4, #25]
 8007c04:	3310      	adds	r3, #16
 8007c06:	76a3      	strb	r3, [r4, #26]
 8007c08:	9507      	str	r5, [sp, #28]
 8007c0a:	0035      	movs	r5, r6
 8007c0c:	782b      	ldrb	r3, [r5, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d001      	beq.n	8007c16 <_svfiprintf_r+0x52>
 8007c12:	2b25      	cmp	r3, #37	; 0x25
 8007c14:	d147      	bne.n	8007ca6 <_svfiprintf_r+0xe2>
 8007c16:	1bab      	subs	r3, r5, r6
 8007c18:	9305      	str	r3, [sp, #20]
 8007c1a:	42b5      	cmp	r5, r6
 8007c1c:	d00c      	beq.n	8007c38 <_svfiprintf_r+0x74>
 8007c1e:	0032      	movs	r2, r6
 8007c20:	0039      	movs	r1, r7
 8007c22:	9803      	ldr	r0, [sp, #12]
 8007c24:	f7ff ff6c 	bl	8007b00 <__ssputs_r>
 8007c28:	1c43      	adds	r3, r0, #1
 8007c2a:	d100      	bne.n	8007c2e <_svfiprintf_r+0x6a>
 8007c2c:	e0ae      	b.n	8007d8c <_svfiprintf_r+0x1c8>
 8007c2e:	6962      	ldr	r2, [r4, #20]
 8007c30:	9b05      	ldr	r3, [sp, #20]
 8007c32:	4694      	mov	ip, r2
 8007c34:	4463      	add	r3, ip
 8007c36:	6163      	str	r3, [r4, #20]
 8007c38:	782b      	ldrb	r3, [r5, #0]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d100      	bne.n	8007c40 <_svfiprintf_r+0x7c>
 8007c3e:	e0a5      	b.n	8007d8c <_svfiprintf_r+0x1c8>
 8007c40:	2201      	movs	r2, #1
 8007c42:	2300      	movs	r3, #0
 8007c44:	4252      	negs	r2, r2
 8007c46:	6062      	str	r2, [r4, #4]
 8007c48:	a904      	add	r1, sp, #16
 8007c4a:	3254      	adds	r2, #84	; 0x54
 8007c4c:	1852      	adds	r2, r2, r1
 8007c4e:	1c6e      	adds	r6, r5, #1
 8007c50:	6023      	str	r3, [r4, #0]
 8007c52:	60e3      	str	r3, [r4, #12]
 8007c54:	60a3      	str	r3, [r4, #8]
 8007c56:	7013      	strb	r3, [r2, #0]
 8007c58:	65a3      	str	r3, [r4, #88]	; 0x58
 8007c5a:	2205      	movs	r2, #5
 8007c5c:	7831      	ldrb	r1, [r6, #0]
 8007c5e:	4854      	ldr	r0, [pc, #336]	; (8007db0 <_svfiprintf_r+0x1ec>)
 8007c60:	f7ff fae6 	bl	8007230 <memchr>
 8007c64:	1c75      	adds	r5, r6, #1
 8007c66:	2800      	cmp	r0, #0
 8007c68:	d11f      	bne.n	8007caa <_svfiprintf_r+0xe6>
 8007c6a:	6822      	ldr	r2, [r4, #0]
 8007c6c:	06d3      	lsls	r3, r2, #27
 8007c6e:	d504      	bpl.n	8007c7a <_svfiprintf_r+0xb6>
 8007c70:	2353      	movs	r3, #83	; 0x53
 8007c72:	a904      	add	r1, sp, #16
 8007c74:	185b      	adds	r3, r3, r1
 8007c76:	2120      	movs	r1, #32
 8007c78:	7019      	strb	r1, [r3, #0]
 8007c7a:	0713      	lsls	r3, r2, #28
 8007c7c:	d504      	bpl.n	8007c88 <_svfiprintf_r+0xc4>
 8007c7e:	2353      	movs	r3, #83	; 0x53
 8007c80:	a904      	add	r1, sp, #16
 8007c82:	185b      	adds	r3, r3, r1
 8007c84:	212b      	movs	r1, #43	; 0x2b
 8007c86:	7019      	strb	r1, [r3, #0]
 8007c88:	7833      	ldrb	r3, [r6, #0]
 8007c8a:	2b2a      	cmp	r3, #42	; 0x2a
 8007c8c:	d016      	beq.n	8007cbc <_svfiprintf_r+0xf8>
 8007c8e:	0035      	movs	r5, r6
 8007c90:	2100      	movs	r1, #0
 8007c92:	200a      	movs	r0, #10
 8007c94:	68e3      	ldr	r3, [r4, #12]
 8007c96:	782a      	ldrb	r2, [r5, #0]
 8007c98:	1c6e      	adds	r6, r5, #1
 8007c9a:	3a30      	subs	r2, #48	; 0x30
 8007c9c:	2a09      	cmp	r2, #9
 8007c9e:	d94e      	bls.n	8007d3e <_svfiprintf_r+0x17a>
 8007ca0:	2900      	cmp	r1, #0
 8007ca2:	d111      	bne.n	8007cc8 <_svfiprintf_r+0x104>
 8007ca4:	e017      	b.n	8007cd6 <_svfiprintf_r+0x112>
 8007ca6:	3501      	adds	r5, #1
 8007ca8:	e7b0      	b.n	8007c0c <_svfiprintf_r+0x48>
 8007caa:	4b41      	ldr	r3, [pc, #260]	; (8007db0 <_svfiprintf_r+0x1ec>)
 8007cac:	6822      	ldr	r2, [r4, #0]
 8007cae:	1ac0      	subs	r0, r0, r3
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	4083      	lsls	r3, r0
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	002e      	movs	r6, r5
 8007cb8:	6023      	str	r3, [r4, #0]
 8007cba:	e7ce      	b.n	8007c5a <_svfiprintf_r+0x96>
 8007cbc:	9b07      	ldr	r3, [sp, #28]
 8007cbe:	1d19      	adds	r1, r3, #4
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	9107      	str	r1, [sp, #28]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	db01      	blt.n	8007ccc <_svfiprintf_r+0x108>
 8007cc8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cca:	e004      	b.n	8007cd6 <_svfiprintf_r+0x112>
 8007ccc:	425b      	negs	r3, r3
 8007cce:	60e3      	str	r3, [r4, #12]
 8007cd0:	2302      	movs	r3, #2
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	6023      	str	r3, [r4, #0]
 8007cd6:	782b      	ldrb	r3, [r5, #0]
 8007cd8:	2b2e      	cmp	r3, #46	; 0x2e
 8007cda:	d10a      	bne.n	8007cf2 <_svfiprintf_r+0x12e>
 8007cdc:	786b      	ldrb	r3, [r5, #1]
 8007cde:	2b2a      	cmp	r3, #42	; 0x2a
 8007ce0:	d135      	bne.n	8007d4e <_svfiprintf_r+0x18a>
 8007ce2:	9b07      	ldr	r3, [sp, #28]
 8007ce4:	3502      	adds	r5, #2
 8007ce6:	1d1a      	adds	r2, r3, #4
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	9207      	str	r2, [sp, #28]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	db2b      	blt.n	8007d48 <_svfiprintf_r+0x184>
 8007cf0:	9309      	str	r3, [sp, #36]	; 0x24
 8007cf2:	4e30      	ldr	r6, [pc, #192]	; (8007db4 <_svfiprintf_r+0x1f0>)
 8007cf4:	2203      	movs	r2, #3
 8007cf6:	0030      	movs	r0, r6
 8007cf8:	7829      	ldrb	r1, [r5, #0]
 8007cfa:	f7ff fa99 	bl	8007230 <memchr>
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	d006      	beq.n	8007d10 <_svfiprintf_r+0x14c>
 8007d02:	2340      	movs	r3, #64	; 0x40
 8007d04:	1b80      	subs	r0, r0, r6
 8007d06:	4083      	lsls	r3, r0
 8007d08:	6822      	ldr	r2, [r4, #0]
 8007d0a:	3501      	adds	r5, #1
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	6023      	str	r3, [r4, #0]
 8007d10:	7829      	ldrb	r1, [r5, #0]
 8007d12:	2206      	movs	r2, #6
 8007d14:	4828      	ldr	r0, [pc, #160]	; (8007db8 <_svfiprintf_r+0x1f4>)
 8007d16:	1c6e      	adds	r6, r5, #1
 8007d18:	7621      	strb	r1, [r4, #24]
 8007d1a:	f7ff fa89 	bl	8007230 <memchr>
 8007d1e:	2800      	cmp	r0, #0
 8007d20:	d03c      	beq.n	8007d9c <_svfiprintf_r+0x1d8>
 8007d22:	4b26      	ldr	r3, [pc, #152]	; (8007dbc <_svfiprintf_r+0x1f8>)
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d125      	bne.n	8007d74 <_svfiprintf_r+0x1b0>
 8007d28:	2207      	movs	r2, #7
 8007d2a:	9b07      	ldr	r3, [sp, #28]
 8007d2c:	3307      	adds	r3, #7
 8007d2e:	4393      	bics	r3, r2
 8007d30:	3308      	adds	r3, #8
 8007d32:	9307      	str	r3, [sp, #28]
 8007d34:	6963      	ldr	r3, [r4, #20]
 8007d36:	9a04      	ldr	r2, [sp, #16]
 8007d38:	189b      	adds	r3, r3, r2
 8007d3a:	6163      	str	r3, [r4, #20]
 8007d3c:	e765      	b.n	8007c0a <_svfiprintf_r+0x46>
 8007d3e:	4343      	muls	r3, r0
 8007d40:	0035      	movs	r5, r6
 8007d42:	2101      	movs	r1, #1
 8007d44:	189b      	adds	r3, r3, r2
 8007d46:	e7a6      	b.n	8007c96 <_svfiprintf_r+0xd2>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	425b      	negs	r3, r3
 8007d4c:	e7d0      	b.n	8007cf0 <_svfiprintf_r+0x12c>
 8007d4e:	2300      	movs	r3, #0
 8007d50:	200a      	movs	r0, #10
 8007d52:	001a      	movs	r2, r3
 8007d54:	3501      	adds	r5, #1
 8007d56:	6063      	str	r3, [r4, #4]
 8007d58:	7829      	ldrb	r1, [r5, #0]
 8007d5a:	1c6e      	adds	r6, r5, #1
 8007d5c:	3930      	subs	r1, #48	; 0x30
 8007d5e:	2909      	cmp	r1, #9
 8007d60:	d903      	bls.n	8007d6a <_svfiprintf_r+0x1a6>
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d0c5      	beq.n	8007cf2 <_svfiprintf_r+0x12e>
 8007d66:	9209      	str	r2, [sp, #36]	; 0x24
 8007d68:	e7c3      	b.n	8007cf2 <_svfiprintf_r+0x12e>
 8007d6a:	4342      	muls	r2, r0
 8007d6c:	0035      	movs	r5, r6
 8007d6e:	2301      	movs	r3, #1
 8007d70:	1852      	adds	r2, r2, r1
 8007d72:	e7f1      	b.n	8007d58 <_svfiprintf_r+0x194>
 8007d74:	ab07      	add	r3, sp, #28
 8007d76:	9300      	str	r3, [sp, #0]
 8007d78:	003a      	movs	r2, r7
 8007d7a:	0021      	movs	r1, r4
 8007d7c:	4b10      	ldr	r3, [pc, #64]	; (8007dc0 <_svfiprintf_r+0x1fc>)
 8007d7e:	9803      	ldr	r0, [sp, #12]
 8007d80:	f7fd ffae 	bl	8005ce0 <_printf_float>
 8007d84:	9004      	str	r0, [sp, #16]
 8007d86:	9b04      	ldr	r3, [sp, #16]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	d1d3      	bne.n	8007d34 <_svfiprintf_r+0x170>
 8007d8c:	89bb      	ldrh	r3, [r7, #12]
 8007d8e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007d90:	065b      	lsls	r3, r3, #25
 8007d92:	d400      	bmi.n	8007d96 <_svfiprintf_r+0x1d2>
 8007d94:	e72d      	b.n	8007bf2 <_svfiprintf_r+0x2e>
 8007d96:	2001      	movs	r0, #1
 8007d98:	4240      	negs	r0, r0
 8007d9a:	e72a      	b.n	8007bf2 <_svfiprintf_r+0x2e>
 8007d9c:	ab07      	add	r3, sp, #28
 8007d9e:	9300      	str	r3, [sp, #0]
 8007da0:	003a      	movs	r2, r7
 8007da2:	0021      	movs	r1, r4
 8007da4:	4b06      	ldr	r3, [pc, #24]	; (8007dc0 <_svfiprintf_r+0x1fc>)
 8007da6:	9803      	ldr	r0, [sp, #12]
 8007da8:	f7fe fa58 	bl	800625c <_printf_i>
 8007dac:	e7ea      	b.n	8007d84 <_svfiprintf_r+0x1c0>
 8007dae:	46c0      	nop			; (mov r8, r8)
 8007db0:	0800936c 	.word	0x0800936c
 8007db4:	08009372 	.word	0x08009372
 8007db8:	08009376 	.word	0x08009376
 8007dbc:	08005ce1 	.word	0x08005ce1
 8007dc0:	08007b01 	.word	0x08007b01

08007dc4 <_sbrk_r>:
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	b570      	push	{r4, r5, r6, lr}
 8007dc8:	4d06      	ldr	r5, [pc, #24]	; (8007de4 <_sbrk_r+0x20>)
 8007dca:	0004      	movs	r4, r0
 8007dcc:	0008      	movs	r0, r1
 8007dce:	602b      	str	r3, [r5, #0]
 8007dd0:	f7fb fdf8 	bl	80039c4 <_sbrk>
 8007dd4:	1c43      	adds	r3, r0, #1
 8007dd6:	d103      	bne.n	8007de0 <_sbrk_r+0x1c>
 8007dd8:	682b      	ldr	r3, [r5, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d000      	beq.n	8007de0 <_sbrk_r+0x1c>
 8007dde:	6023      	str	r3, [r4, #0]
 8007de0:	bd70      	pop	{r4, r5, r6, pc}
 8007de2:	46c0      	nop			; (mov r8, r8)
 8007de4:	20000718 	.word	0x20000718

08007de8 <__assert_func>:
 8007de8:	b530      	push	{r4, r5, lr}
 8007dea:	0014      	movs	r4, r2
 8007dec:	001a      	movs	r2, r3
 8007dee:	4b09      	ldr	r3, [pc, #36]	; (8007e14 <__assert_func+0x2c>)
 8007df0:	0005      	movs	r5, r0
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	b085      	sub	sp, #20
 8007df6:	68d8      	ldr	r0, [r3, #12]
 8007df8:	4b07      	ldr	r3, [pc, #28]	; (8007e18 <__assert_func+0x30>)
 8007dfa:	2c00      	cmp	r4, #0
 8007dfc:	d101      	bne.n	8007e02 <__assert_func+0x1a>
 8007dfe:	4b07      	ldr	r3, [pc, #28]	; (8007e1c <__assert_func+0x34>)
 8007e00:	001c      	movs	r4, r3
 8007e02:	9301      	str	r3, [sp, #4]
 8007e04:	9100      	str	r1, [sp, #0]
 8007e06:	002b      	movs	r3, r5
 8007e08:	4905      	ldr	r1, [pc, #20]	; (8007e20 <__assert_func+0x38>)
 8007e0a:	9402      	str	r4, [sp, #8]
 8007e0c:	f000 f80a 	bl	8007e24 <fiprintf>
 8007e10:	f000 fab2 	bl	8008378 <abort>
 8007e14:	20000434 	.word	0x20000434
 8007e18:	0800937d 	.word	0x0800937d
 8007e1c:	080093b8 	.word	0x080093b8
 8007e20:	0800938a 	.word	0x0800938a

08007e24 <fiprintf>:
 8007e24:	b40e      	push	{r1, r2, r3}
 8007e26:	b503      	push	{r0, r1, lr}
 8007e28:	0001      	movs	r1, r0
 8007e2a:	ab03      	add	r3, sp, #12
 8007e2c:	4804      	ldr	r0, [pc, #16]	; (8007e40 <fiprintf+0x1c>)
 8007e2e:	cb04      	ldmia	r3!, {r2}
 8007e30:	6800      	ldr	r0, [r0, #0]
 8007e32:	9301      	str	r3, [sp, #4]
 8007e34:	f000 f88a 	bl	8007f4c <_vfiprintf_r>
 8007e38:	b002      	add	sp, #8
 8007e3a:	bc08      	pop	{r3}
 8007e3c:	b003      	add	sp, #12
 8007e3e:	4718      	bx	r3
 8007e40:	20000434 	.word	0x20000434

08007e44 <__ascii_mbtowc>:
 8007e44:	b082      	sub	sp, #8
 8007e46:	2900      	cmp	r1, #0
 8007e48:	d100      	bne.n	8007e4c <__ascii_mbtowc+0x8>
 8007e4a:	a901      	add	r1, sp, #4
 8007e4c:	1e10      	subs	r0, r2, #0
 8007e4e:	d006      	beq.n	8007e5e <__ascii_mbtowc+0x1a>
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d006      	beq.n	8007e62 <__ascii_mbtowc+0x1e>
 8007e54:	7813      	ldrb	r3, [r2, #0]
 8007e56:	600b      	str	r3, [r1, #0]
 8007e58:	7810      	ldrb	r0, [r2, #0]
 8007e5a:	1e43      	subs	r3, r0, #1
 8007e5c:	4198      	sbcs	r0, r3
 8007e5e:	b002      	add	sp, #8
 8007e60:	4770      	bx	lr
 8007e62:	2002      	movs	r0, #2
 8007e64:	4240      	negs	r0, r0
 8007e66:	e7fa      	b.n	8007e5e <__ascii_mbtowc+0x1a>

08007e68 <memmove>:
 8007e68:	b510      	push	{r4, lr}
 8007e6a:	4288      	cmp	r0, r1
 8007e6c:	d902      	bls.n	8007e74 <memmove+0xc>
 8007e6e:	188b      	adds	r3, r1, r2
 8007e70:	4298      	cmp	r0, r3
 8007e72:	d303      	bcc.n	8007e7c <memmove+0x14>
 8007e74:	2300      	movs	r3, #0
 8007e76:	e007      	b.n	8007e88 <memmove+0x20>
 8007e78:	5c8b      	ldrb	r3, [r1, r2]
 8007e7a:	5483      	strb	r3, [r0, r2]
 8007e7c:	3a01      	subs	r2, #1
 8007e7e:	d2fb      	bcs.n	8007e78 <memmove+0x10>
 8007e80:	bd10      	pop	{r4, pc}
 8007e82:	5ccc      	ldrb	r4, [r1, r3]
 8007e84:	54c4      	strb	r4, [r0, r3]
 8007e86:	3301      	adds	r3, #1
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d1fa      	bne.n	8007e82 <memmove+0x1a>
 8007e8c:	e7f8      	b.n	8007e80 <memmove+0x18>
	...

08007e90 <__malloc_lock>:
 8007e90:	b510      	push	{r4, lr}
 8007e92:	4802      	ldr	r0, [pc, #8]	; (8007e9c <__malloc_lock+0xc>)
 8007e94:	f000 fc47 	bl	8008726 <__retarget_lock_acquire_recursive>
 8007e98:	bd10      	pop	{r4, pc}
 8007e9a:	46c0      	nop			; (mov r8, r8)
 8007e9c:	20000720 	.word	0x20000720

08007ea0 <__malloc_unlock>:
 8007ea0:	b510      	push	{r4, lr}
 8007ea2:	4802      	ldr	r0, [pc, #8]	; (8007eac <__malloc_unlock+0xc>)
 8007ea4:	f000 fc40 	bl	8008728 <__retarget_lock_release_recursive>
 8007ea8:	bd10      	pop	{r4, pc}
 8007eaa:	46c0      	nop			; (mov r8, r8)
 8007eac:	20000720 	.word	0x20000720

08007eb0 <_realloc_r>:
 8007eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eb2:	0007      	movs	r7, r0
 8007eb4:	000d      	movs	r5, r1
 8007eb6:	0016      	movs	r6, r2
 8007eb8:	2900      	cmp	r1, #0
 8007eba:	d105      	bne.n	8007ec8 <_realloc_r+0x18>
 8007ebc:	0011      	movs	r1, r2
 8007ebe:	f7ff fdc1 	bl	8007a44 <_malloc_r>
 8007ec2:	0004      	movs	r4, r0
 8007ec4:	0020      	movs	r0, r4
 8007ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ec8:	2a00      	cmp	r2, #0
 8007eca:	d103      	bne.n	8007ed4 <_realloc_r+0x24>
 8007ecc:	f7ff fd70 	bl	80079b0 <_free_r>
 8007ed0:	0034      	movs	r4, r6
 8007ed2:	e7f7      	b.n	8007ec4 <_realloc_r+0x14>
 8007ed4:	f000 fc96 	bl	8008804 <_malloc_usable_size_r>
 8007ed8:	002c      	movs	r4, r5
 8007eda:	42b0      	cmp	r0, r6
 8007edc:	d2f2      	bcs.n	8007ec4 <_realloc_r+0x14>
 8007ede:	0031      	movs	r1, r6
 8007ee0:	0038      	movs	r0, r7
 8007ee2:	f7ff fdaf 	bl	8007a44 <_malloc_r>
 8007ee6:	1e04      	subs	r4, r0, #0
 8007ee8:	d0ec      	beq.n	8007ec4 <_realloc_r+0x14>
 8007eea:	0029      	movs	r1, r5
 8007eec:	0032      	movs	r2, r6
 8007eee:	f7ff f9aa 	bl	8007246 <memcpy>
 8007ef2:	0029      	movs	r1, r5
 8007ef4:	0038      	movs	r0, r7
 8007ef6:	f7ff fd5b 	bl	80079b0 <_free_r>
 8007efa:	e7e3      	b.n	8007ec4 <_realloc_r+0x14>

08007efc <__sfputc_r>:
 8007efc:	6893      	ldr	r3, [r2, #8]
 8007efe:	b510      	push	{r4, lr}
 8007f00:	3b01      	subs	r3, #1
 8007f02:	6093      	str	r3, [r2, #8]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	da04      	bge.n	8007f12 <__sfputc_r+0x16>
 8007f08:	6994      	ldr	r4, [r2, #24]
 8007f0a:	42a3      	cmp	r3, r4
 8007f0c:	db07      	blt.n	8007f1e <__sfputc_r+0x22>
 8007f0e:	290a      	cmp	r1, #10
 8007f10:	d005      	beq.n	8007f1e <__sfputc_r+0x22>
 8007f12:	6813      	ldr	r3, [r2, #0]
 8007f14:	1c58      	adds	r0, r3, #1
 8007f16:	6010      	str	r0, [r2, #0]
 8007f18:	7019      	strb	r1, [r3, #0]
 8007f1a:	0008      	movs	r0, r1
 8007f1c:	bd10      	pop	{r4, pc}
 8007f1e:	f000 f94f 	bl	80081c0 <__swbuf_r>
 8007f22:	0001      	movs	r1, r0
 8007f24:	e7f9      	b.n	8007f1a <__sfputc_r+0x1e>

08007f26 <__sfputs_r>:
 8007f26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f28:	0006      	movs	r6, r0
 8007f2a:	000f      	movs	r7, r1
 8007f2c:	0014      	movs	r4, r2
 8007f2e:	18d5      	adds	r5, r2, r3
 8007f30:	42ac      	cmp	r4, r5
 8007f32:	d101      	bne.n	8007f38 <__sfputs_r+0x12>
 8007f34:	2000      	movs	r0, #0
 8007f36:	e007      	b.n	8007f48 <__sfputs_r+0x22>
 8007f38:	7821      	ldrb	r1, [r4, #0]
 8007f3a:	003a      	movs	r2, r7
 8007f3c:	0030      	movs	r0, r6
 8007f3e:	f7ff ffdd 	bl	8007efc <__sfputc_r>
 8007f42:	3401      	adds	r4, #1
 8007f44:	1c43      	adds	r3, r0, #1
 8007f46:	d1f3      	bne.n	8007f30 <__sfputs_r+0xa>
 8007f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f4c <_vfiprintf_r>:
 8007f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f4e:	b0a1      	sub	sp, #132	; 0x84
 8007f50:	0006      	movs	r6, r0
 8007f52:	000c      	movs	r4, r1
 8007f54:	001f      	movs	r7, r3
 8007f56:	9203      	str	r2, [sp, #12]
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	d004      	beq.n	8007f66 <_vfiprintf_r+0x1a>
 8007f5c:	6983      	ldr	r3, [r0, #24]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d101      	bne.n	8007f66 <_vfiprintf_r+0x1a>
 8007f62:	f000 fb3f 	bl	80085e4 <__sinit>
 8007f66:	4b8e      	ldr	r3, [pc, #568]	; (80081a0 <_vfiprintf_r+0x254>)
 8007f68:	429c      	cmp	r4, r3
 8007f6a:	d11c      	bne.n	8007fa6 <_vfiprintf_r+0x5a>
 8007f6c:	6874      	ldr	r4, [r6, #4]
 8007f6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f70:	07db      	lsls	r3, r3, #31
 8007f72:	d405      	bmi.n	8007f80 <_vfiprintf_r+0x34>
 8007f74:	89a3      	ldrh	r3, [r4, #12]
 8007f76:	059b      	lsls	r3, r3, #22
 8007f78:	d402      	bmi.n	8007f80 <_vfiprintf_r+0x34>
 8007f7a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f7c:	f000 fbd3 	bl	8008726 <__retarget_lock_acquire_recursive>
 8007f80:	89a3      	ldrh	r3, [r4, #12]
 8007f82:	071b      	lsls	r3, r3, #28
 8007f84:	d502      	bpl.n	8007f8c <_vfiprintf_r+0x40>
 8007f86:	6923      	ldr	r3, [r4, #16]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d11d      	bne.n	8007fc8 <_vfiprintf_r+0x7c>
 8007f8c:	0021      	movs	r1, r4
 8007f8e:	0030      	movs	r0, r6
 8007f90:	f000 f97a 	bl	8008288 <__swsetup_r>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	d017      	beq.n	8007fc8 <_vfiprintf_r+0x7c>
 8007f98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f9a:	07db      	lsls	r3, r3, #31
 8007f9c:	d50d      	bpl.n	8007fba <_vfiprintf_r+0x6e>
 8007f9e:	2001      	movs	r0, #1
 8007fa0:	4240      	negs	r0, r0
 8007fa2:	b021      	add	sp, #132	; 0x84
 8007fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fa6:	4b7f      	ldr	r3, [pc, #508]	; (80081a4 <_vfiprintf_r+0x258>)
 8007fa8:	429c      	cmp	r4, r3
 8007faa:	d101      	bne.n	8007fb0 <_vfiprintf_r+0x64>
 8007fac:	68b4      	ldr	r4, [r6, #8]
 8007fae:	e7de      	b.n	8007f6e <_vfiprintf_r+0x22>
 8007fb0:	4b7d      	ldr	r3, [pc, #500]	; (80081a8 <_vfiprintf_r+0x25c>)
 8007fb2:	429c      	cmp	r4, r3
 8007fb4:	d1db      	bne.n	8007f6e <_vfiprintf_r+0x22>
 8007fb6:	68f4      	ldr	r4, [r6, #12]
 8007fb8:	e7d9      	b.n	8007f6e <_vfiprintf_r+0x22>
 8007fba:	89a3      	ldrh	r3, [r4, #12]
 8007fbc:	059b      	lsls	r3, r3, #22
 8007fbe:	d4ee      	bmi.n	8007f9e <_vfiprintf_r+0x52>
 8007fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fc2:	f000 fbb1 	bl	8008728 <__retarget_lock_release_recursive>
 8007fc6:	e7ea      	b.n	8007f9e <_vfiprintf_r+0x52>
 8007fc8:	2300      	movs	r3, #0
 8007fca:	ad08      	add	r5, sp, #32
 8007fcc:	616b      	str	r3, [r5, #20]
 8007fce:	3320      	adds	r3, #32
 8007fd0:	766b      	strb	r3, [r5, #25]
 8007fd2:	3310      	adds	r3, #16
 8007fd4:	76ab      	strb	r3, [r5, #26]
 8007fd6:	9707      	str	r7, [sp, #28]
 8007fd8:	9f03      	ldr	r7, [sp, #12]
 8007fda:	783b      	ldrb	r3, [r7, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d001      	beq.n	8007fe4 <_vfiprintf_r+0x98>
 8007fe0:	2b25      	cmp	r3, #37	; 0x25
 8007fe2:	d14e      	bne.n	8008082 <_vfiprintf_r+0x136>
 8007fe4:	9b03      	ldr	r3, [sp, #12]
 8007fe6:	1afb      	subs	r3, r7, r3
 8007fe8:	9305      	str	r3, [sp, #20]
 8007fea:	9b03      	ldr	r3, [sp, #12]
 8007fec:	429f      	cmp	r7, r3
 8007fee:	d00d      	beq.n	800800c <_vfiprintf_r+0xc0>
 8007ff0:	9b05      	ldr	r3, [sp, #20]
 8007ff2:	0021      	movs	r1, r4
 8007ff4:	0030      	movs	r0, r6
 8007ff6:	9a03      	ldr	r2, [sp, #12]
 8007ff8:	f7ff ff95 	bl	8007f26 <__sfputs_r>
 8007ffc:	1c43      	adds	r3, r0, #1
 8007ffe:	d100      	bne.n	8008002 <_vfiprintf_r+0xb6>
 8008000:	e0b5      	b.n	800816e <_vfiprintf_r+0x222>
 8008002:	696a      	ldr	r2, [r5, #20]
 8008004:	9b05      	ldr	r3, [sp, #20]
 8008006:	4694      	mov	ip, r2
 8008008:	4463      	add	r3, ip
 800800a:	616b      	str	r3, [r5, #20]
 800800c:	783b      	ldrb	r3, [r7, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d100      	bne.n	8008014 <_vfiprintf_r+0xc8>
 8008012:	e0ac      	b.n	800816e <_vfiprintf_r+0x222>
 8008014:	2201      	movs	r2, #1
 8008016:	1c7b      	adds	r3, r7, #1
 8008018:	9303      	str	r3, [sp, #12]
 800801a:	2300      	movs	r3, #0
 800801c:	4252      	negs	r2, r2
 800801e:	606a      	str	r2, [r5, #4]
 8008020:	a904      	add	r1, sp, #16
 8008022:	3254      	adds	r2, #84	; 0x54
 8008024:	1852      	adds	r2, r2, r1
 8008026:	602b      	str	r3, [r5, #0]
 8008028:	60eb      	str	r3, [r5, #12]
 800802a:	60ab      	str	r3, [r5, #8]
 800802c:	7013      	strb	r3, [r2, #0]
 800802e:	65ab      	str	r3, [r5, #88]	; 0x58
 8008030:	9b03      	ldr	r3, [sp, #12]
 8008032:	2205      	movs	r2, #5
 8008034:	7819      	ldrb	r1, [r3, #0]
 8008036:	485d      	ldr	r0, [pc, #372]	; (80081ac <_vfiprintf_r+0x260>)
 8008038:	f7ff f8fa 	bl	8007230 <memchr>
 800803c:	9b03      	ldr	r3, [sp, #12]
 800803e:	1c5f      	adds	r7, r3, #1
 8008040:	2800      	cmp	r0, #0
 8008042:	d120      	bne.n	8008086 <_vfiprintf_r+0x13a>
 8008044:	682a      	ldr	r2, [r5, #0]
 8008046:	06d3      	lsls	r3, r2, #27
 8008048:	d504      	bpl.n	8008054 <_vfiprintf_r+0x108>
 800804a:	2353      	movs	r3, #83	; 0x53
 800804c:	a904      	add	r1, sp, #16
 800804e:	185b      	adds	r3, r3, r1
 8008050:	2120      	movs	r1, #32
 8008052:	7019      	strb	r1, [r3, #0]
 8008054:	0713      	lsls	r3, r2, #28
 8008056:	d504      	bpl.n	8008062 <_vfiprintf_r+0x116>
 8008058:	2353      	movs	r3, #83	; 0x53
 800805a:	a904      	add	r1, sp, #16
 800805c:	185b      	adds	r3, r3, r1
 800805e:	212b      	movs	r1, #43	; 0x2b
 8008060:	7019      	strb	r1, [r3, #0]
 8008062:	9b03      	ldr	r3, [sp, #12]
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	2b2a      	cmp	r3, #42	; 0x2a
 8008068:	d016      	beq.n	8008098 <_vfiprintf_r+0x14c>
 800806a:	2100      	movs	r1, #0
 800806c:	68eb      	ldr	r3, [r5, #12]
 800806e:	9f03      	ldr	r7, [sp, #12]
 8008070:	783a      	ldrb	r2, [r7, #0]
 8008072:	1c78      	adds	r0, r7, #1
 8008074:	3a30      	subs	r2, #48	; 0x30
 8008076:	4684      	mov	ip, r0
 8008078:	2a09      	cmp	r2, #9
 800807a:	d94f      	bls.n	800811c <_vfiprintf_r+0x1d0>
 800807c:	2900      	cmp	r1, #0
 800807e:	d111      	bne.n	80080a4 <_vfiprintf_r+0x158>
 8008080:	e017      	b.n	80080b2 <_vfiprintf_r+0x166>
 8008082:	3701      	adds	r7, #1
 8008084:	e7a9      	b.n	8007fda <_vfiprintf_r+0x8e>
 8008086:	4b49      	ldr	r3, [pc, #292]	; (80081ac <_vfiprintf_r+0x260>)
 8008088:	682a      	ldr	r2, [r5, #0]
 800808a:	1ac0      	subs	r0, r0, r3
 800808c:	2301      	movs	r3, #1
 800808e:	4083      	lsls	r3, r0
 8008090:	4313      	orrs	r3, r2
 8008092:	602b      	str	r3, [r5, #0]
 8008094:	9703      	str	r7, [sp, #12]
 8008096:	e7cb      	b.n	8008030 <_vfiprintf_r+0xe4>
 8008098:	9b07      	ldr	r3, [sp, #28]
 800809a:	1d19      	adds	r1, r3, #4
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	9107      	str	r1, [sp, #28]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	db01      	blt.n	80080a8 <_vfiprintf_r+0x15c>
 80080a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80080a6:	e004      	b.n	80080b2 <_vfiprintf_r+0x166>
 80080a8:	425b      	negs	r3, r3
 80080aa:	60eb      	str	r3, [r5, #12]
 80080ac:	2302      	movs	r3, #2
 80080ae:	4313      	orrs	r3, r2
 80080b0:	602b      	str	r3, [r5, #0]
 80080b2:	783b      	ldrb	r3, [r7, #0]
 80080b4:	2b2e      	cmp	r3, #46	; 0x2e
 80080b6:	d10a      	bne.n	80080ce <_vfiprintf_r+0x182>
 80080b8:	787b      	ldrb	r3, [r7, #1]
 80080ba:	2b2a      	cmp	r3, #42	; 0x2a
 80080bc:	d137      	bne.n	800812e <_vfiprintf_r+0x1e2>
 80080be:	9b07      	ldr	r3, [sp, #28]
 80080c0:	3702      	adds	r7, #2
 80080c2:	1d1a      	adds	r2, r3, #4
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	9207      	str	r2, [sp, #28]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	db2d      	blt.n	8008128 <_vfiprintf_r+0x1dc>
 80080cc:	9309      	str	r3, [sp, #36]	; 0x24
 80080ce:	2203      	movs	r2, #3
 80080d0:	7839      	ldrb	r1, [r7, #0]
 80080d2:	4837      	ldr	r0, [pc, #220]	; (80081b0 <_vfiprintf_r+0x264>)
 80080d4:	f7ff f8ac 	bl	8007230 <memchr>
 80080d8:	2800      	cmp	r0, #0
 80080da:	d007      	beq.n	80080ec <_vfiprintf_r+0x1a0>
 80080dc:	4b34      	ldr	r3, [pc, #208]	; (80081b0 <_vfiprintf_r+0x264>)
 80080de:	682a      	ldr	r2, [r5, #0]
 80080e0:	1ac0      	subs	r0, r0, r3
 80080e2:	2340      	movs	r3, #64	; 0x40
 80080e4:	4083      	lsls	r3, r0
 80080e6:	4313      	orrs	r3, r2
 80080e8:	3701      	adds	r7, #1
 80080ea:	602b      	str	r3, [r5, #0]
 80080ec:	7839      	ldrb	r1, [r7, #0]
 80080ee:	1c7b      	adds	r3, r7, #1
 80080f0:	2206      	movs	r2, #6
 80080f2:	4830      	ldr	r0, [pc, #192]	; (80081b4 <_vfiprintf_r+0x268>)
 80080f4:	9303      	str	r3, [sp, #12]
 80080f6:	7629      	strb	r1, [r5, #24]
 80080f8:	f7ff f89a 	bl	8007230 <memchr>
 80080fc:	2800      	cmp	r0, #0
 80080fe:	d045      	beq.n	800818c <_vfiprintf_r+0x240>
 8008100:	4b2d      	ldr	r3, [pc, #180]	; (80081b8 <_vfiprintf_r+0x26c>)
 8008102:	2b00      	cmp	r3, #0
 8008104:	d127      	bne.n	8008156 <_vfiprintf_r+0x20a>
 8008106:	2207      	movs	r2, #7
 8008108:	9b07      	ldr	r3, [sp, #28]
 800810a:	3307      	adds	r3, #7
 800810c:	4393      	bics	r3, r2
 800810e:	3308      	adds	r3, #8
 8008110:	9307      	str	r3, [sp, #28]
 8008112:	696b      	ldr	r3, [r5, #20]
 8008114:	9a04      	ldr	r2, [sp, #16]
 8008116:	189b      	adds	r3, r3, r2
 8008118:	616b      	str	r3, [r5, #20]
 800811a:	e75d      	b.n	8007fd8 <_vfiprintf_r+0x8c>
 800811c:	210a      	movs	r1, #10
 800811e:	434b      	muls	r3, r1
 8008120:	4667      	mov	r7, ip
 8008122:	189b      	adds	r3, r3, r2
 8008124:	3909      	subs	r1, #9
 8008126:	e7a3      	b.n	8008070 <_vfiprintf_r+0x124>
 8008128:	2301      	movs	r3, #1
 800812a:	425b      	negs	r3, r3
 800812c:	e7ce      	b.n	80080cc <_vfiprintf_r+0x180>
 800812e:	2300      	movs	r3, #0
 8008130:	001a      	movs	r2, r3
 8008132:	3701      	adds	r7, #1
 8008134:	606b      	str	r3, [r5, #4]
 8008136:	7839      	ldrb	r1, [r7, #0]
 8008138:	1c78      	adds	r0, r7, #1
 800813a:	3930      	subs	r1, #48	; 0x30
 800813c:	4684      	mov	ip, r0
 800813e:	2909      	cmp	r1, #9
 8008140:	d903      	bls.n	800814a <_vfiprintf_r+0x1fe>
 8008142:	2b00      	cmp	r3, #0
 8008144:	d0c3      	beq.n	80080ce <_vfiprintf_r+0x182>
 8008146:	9209      	str	r2, [sp, #36]	; 0x24
 8008148:	e7c1      	b.n	80080ce <_vfiprintf_r+0x182>
 800814a:	230a      	movs	r3, #10
 800814c:	435a      	muls	r2, r3
 800814e:	4667      	mov	r7, ip
 8008150:	1852      	adds	r2, r2, r1
 8008152:	3b09      	subs	r3, #9
 8008154:	e7ef      	b.n	8008136 <_vfiprintf_r+0x1ea>
 8008156:	ab07      	add	r3, sp, #28
 8008158:	9300      	str	r3, [sp, #0]
 800815a:	0022      	movs	r2, r4
 800815c:	0029      	movs	r1, r5
 800815e:	0030      	movs	r0, r6
 8008160:	4b16      	ldr	r3, [pc, #88]	; (80081bc <_vfiprintf_r+0x270>)
 8008162:	f7fd fdbd 	bl	8005ce0 <_printf_float>
 8008166:	9004      	str	r0, [sp, #16]
 8008168:	9b04      	ldr	r3, [sp, #16]
 800816a:	3301      	adds	r3, #1
 800816c:	d1d1      	bne.n	8008112 <_vfiprintf_r+0x1c6>
 800816e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008170:	07db      	lsls	r3, r3, #31
 8008172:	d405      	bmi.n	8008180 <_vfiprintf_r+0x234>
 8008174:	89a3      	ldrh	r3, [r4, #12]
 8008176:	059b      	lsls	r3, r3, #22
 8008178:	d402      	bmi.n	8008180 <_vfiprintf_r+0x234>
 800817a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800817c:	f000 fad4 	bl	8008728 <__retarget_lock_release_recursive>
 8008180:	89a3      	ldrh	r3, [r4, #12]
 8008182:	065b      	lsls	r3, r3, #25
 8008184:	d500      	bpl.n	8008188 <_vfiprintf_r+0x23c>
 8008186:	e70a      	b.n	8007f9e <_vfiprintf_r+0x52>
 8008188:	980d      	ldr	r0, [sp, #52]	; 0x34
 800818a:	e70a      	b.n	8007fa2 <_vfiprintf_r+0x56>
 800818c:	ab07      	add	r3, sp, #28
 800818e:	9300      	str	r3, [sp, #0]
 8008190:	0022      	movs	r2, r4
 8008192:	0029      	movs	r1, r5
 8008194:	0030      	movs	r0, r6
 8008196:	4b09      	ldr	r3, [pc, #36]	; (80081bc <_vfiprintf_r+0x270>)
 8008198:	f7fe f860 	bl	800625c <_printf_i>
 800819c:	e7e3      	b.n	8008166 <_vfiprintf_r+0x21a>
 800819e:	46c0      	nop			; (mov r8, r8)
 80081a0:	080094e4 	.word	0x080094e4
 80081a4:	08009504 	.word	0x08009504
 80081a8:	080094c4 	.word	0x080094c4
 80081ac:	0800936c 	.word	0x0800936c
 80081b0:	08009372 	.word	0x08009372
 80081b4:	08009376 	.word	0x08009376
 80081b8:	08005ce1 	.word	0x08005ce1
 80081bc:	08007f27 	.word	0x08007f27

080081c0 <__swbuf_r>:
 80081c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081c2:	0005      	movs	r5, r0
 80081c4:	000e      	movs	r6, r1
 80081c6:	0014      	movs	r4, r2
 80081c8:	2800      	cmp	r0, #0
 80081ca:	d004      	beq.n	80081d6 <__swbuf_r+0x16>
 80081cc:	6983      	ldr	r3, [r0, #24]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d101      	bne.n	80081d6 <__swbuf_r+0x16>
 80081d2:	f000 fa07 	bl	80085e4 <__sinit>
 80081d6:	4b22      	ldr	r3, [pc, #136]	; (8008260 <__swbuf_r+0xa0>)
 80081d8:	429c      	cmp	r4, r3
 80081da:	d12e      	bne.n	800823a <__swbuf_r+0x7a>
 80081dc:	686c      	ldr	r4, [r5, #4]
 80081de:	69a3      	ldr	r3, [r4, #24]
 80081e0:	60a3      	str	r3, [r4, #8]
 80081e2:	89a3      	ldrh	r3, [r4, #12]
 80081e4:	071b      	lsls	r3, r3, #28
 80081e6:	d532      	bpl.n	800824e <__swbuf_r+0x8e>
 80081e8:	6923      	ldr	r3, [r4, #16]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d02f      	beq.n	800824e <__swbuf_r+0x8e>
 80081ee:	6823      	ldr	r3, [r4, #0]
 80081f0:	6922      	ldr	r2, [r4, #16]
 80081f2:	b2f7      	uxtb	r7, r6
 80081f4:	1a98      	subs	r0, r3, r2
 80081f6:	6963      	ldr	r3, [r4, #20]
 80081f8:	b2f6      	uxtb	r6, r6
 80081fa:	4283      	cmp	r3, r0
 80081fc:	dc05      	bgt.n	800820a <__swbuf_r+0x4a>
 80081fe:	0021      	movs	r1, r4
 8008200:	0028      	movs	r0, r5
 8008202:	f000 f94d 	bl	80084a0 <_fflush_r>
 8008206:	2800      	cmp	r0, #0
 8008208:	d127      	bne.n	800825a <__swbuf_r+0x9a>
 800820a:	68a3      	ldr	r3, [r4, #8]
 800820c:	3001      	adds	r0, #1
 800820e:	3b01      	subs	r3, #1
 8008210:	60a3      	str	r3, [r4, #8]
 8008212:	6823      	ldr	r3, [r4, #0]
 8008214:	1c5a      	adds	r2, r3, #1
 8008216:	6022      	str	r2, [r4, #0]
 8008218:	701f      	strb	r7, [r3, #0]
 800821a:	6963      	ldr	r3, [r4, #20]
 800821c:	4283      	cmp	r3, r0
 800821e:	d004      	beq.n	800822a <__swbuf_r+0x6a>
 8008220:	89a3      	ldrh	r3, [r4, #12]
 8008222:	07db      	lsls	r3, r3, #31
 8008224:	d507      	bpl.n	8008236 <__swbuf_r+0x76>
 8008226:	2e0a      	cmp	r6, #10
 8008228:	d105      	bne.n	8008236 <__swbuf_r+0x76>
 800822a:	0021      	movs	r1, r4
 800822c:	0028      	movs	r0, r5
 800822e:	f000 f937 	bl	80084a0 <_fflush_r>
 8008232:	2800      	cmp	r0, #0
 8008234:	d111      	bne.n	800825a <__swbuf_r+0x9a>
 8008236:	0030      	movs	r0, r6
 8008238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800823a:	4b0a      	ldr	r3, [pc, #40]	; (8008264 <__swbuf_r+0xa4>)
 800823c:	429c      	cmp	r4, r3
 800823e:	d101      	bne.n	8008244 <__swbuf_r+0x84>
 8008240:	68ac      	ldr	r4, [r5, #8]
 8008242:	e7cc      	b.n	80081de <__swbuf_r+0x1e>
 8008244:	4b08      	ldr	r3, [pc, #32]	; (8008268 <__swbuf_r+0xa8>)
 8008246:	429c      	cmp	r4, r3
 8008248:	d1c9      	bne.n	80081de <__swbuf_r+0x1e>
 800824a:	68ec      	ldr	r4, [r5, #12]
 800824c:	e7c7      	b.n	80081de <__swbuf_r+0x1e>
 800824e:	0021      	movs	r1, r4
 8008250:	0028      	movs	r0, r5
 8008252:	f000 f819 	bl	8008288 <__swsetup_r>
 8008256:	2800      	cmp	r0, #0
 8008258:	d0c9      	beq.n	80081ee <__swbuf_r+0x2e>
 800825a:	2601      	movs	r6, #1
 800825c:	4276      	negs	r6, r6
 800825e:	e7ea      	b.n	8008236 <__swbuf_r+0x76>
 8008260:	080094e4 	.word	0x080094e4
 8008264:	08009504 	.word	0x08009504
 8008268:	080094c4 	.word	0x080094c4

0800826c <__ascii_wctomb>:
 800826c:	0003      	movs	r3, r0
 800826e:	1e08      	subs	r0, r1, #0
 8008270:	d005      	beq.n	800827e <__ascii_wctomb+0x12>
 8008272:	2aff      	cmp	r2, #255	; 0xff
 8008274:	d904      	bls.n	8008280 <__ascii_wctomb+0x14>
 8008276:	228a      	movs	r2, #138	; 0x8a
 8008278:	2001      	movs	r0, #1
 800827a:	601a      	str	r2, [r3, #0]
 800827c:	4240      	negs	r0, r0
 800827e:	4770      	bx	lr
 8008280:	2001      	movs	r0, #1
 8008282:	700a      	strb	r2, [r1, #0]
 8008284:	e7fb      	b.n	800827e <__ascii_wctomb+0x12>
	...

08008288 <__swsetup_r>:
 8008288:	4b37      	ldr	r3, [pc, #220]	; (8008368 <__swsetup_r+0xe0>)
 800828a:	b570      	push	{r4, r5, r6, lr}
 800828c:	681d      	ldr	r5, [r3, #0]
 800828e:	0006      	movs	r6, r0
 8008290:	000c      	movs	r4, r1
 8008292:	2d00      	cmp	r5, #0
 8008294:	d005      	beq.n	80082a2 <__swsetup_r+0x1a>
 8008296:	69ab      	ldr	r3, [r5, #24]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d102      	bne.n	80082a2 <__swsetup_r+0x1a>
 800829c:	0028      	movs	r0, r5
 800829e:	f000 f9a1 	bl	80085e4 <__sinit>
 80082a2:	4b32      	ldr	r3, [pc, #200]	; (800836c <__swsetup_r+0xe4>)
 80082a4:	429c      	cmp	r4, r3
 80082a6:	d10f      	bne.n	80082c8 <__swsetup_r+0x40>
 80082a8:	686c      	ldr	r4, [r5, #4]
 80082aa:	230c      	movs	r3, #12
 80082ac:	5ee2      	ldrsh	r2, [r4, r3]
 80082ae:	b293      	uxth	r3, r2
 80082b0:	0711      	lsls	r1, r2, #28
 80082b2:	d42d      	bmi.n	8008310 <__swsetup_r+0x88>
 80082b4:	06d9      	lsls	r1, r3, #27
 80082b6:	d411      	bmi.n	80082dc <__swsetup_r+0x54>
 80082b8:	2309      	movs	r3, #9
 80082ba:	2001      	movs	r0, #1
 80082bc:	6033      	str	r3, [r6, #0]
 80082be:	3337      	adds	r3, #55	; 0x37
 80082c0:	4313      	orrs	r3, r2
 80082c2:	81a3      	strh	r3, [r4, #12]
 80082c4:	4240      	negs	r0, r0
 80082c6:	bd70      	pop	{r4, r5, r6, pc}
 80082c8:	4b29      	ldr	r3, [pc, #164]	; (8008370 <__swsetup_r+0xe8>)
 80082ca:	429c      	cmp	r4, r3
 80082cc:	d101      	bne.n	80082d2 <__swsetup_r+0x4a>
 80082ce:	68ac      	ldr	r4, [r5, #8]
 80082d0:	e7eb      	b.n	80082aa <__swsetup_r+0x22>
 80082d2:	4b28      	ldr	r3, [pc, #160]	; (8008374 <__swsetup_r+0xec>)
 80082d4:	429c      	cmp	r4, r3
 80082d6:	d1e8      	bne.n	80082aa <__swsetup_r+0x22>
 80082d8:	68ec      	ldr	r4, [r5, #12]
 80082da:	e7e6      	b.n	80082aa <__swsetup_r+0x22>
 80082dc:	075b      	lsls	r3, r3, #29
 80082de:	d513      	bpl.n	8008308 <__swsetup_r+0x80>
 80082e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082e2:	2900      	cmp	r1, #0
 80082e4:	d008      	beq.n	80082f8 <__swsetup_r+0x70>
 80082e6:	0023      	movs	r3, r4
 80082e8:	3344      	adds	r3, #68	; 0x44
 80082ea:	4299      	cmp	r1, r3
 80082ec:	d002      	beq.n	80082f4 <__swsetup_r+0x6c>
 80082ee:	0030      	movs	r0, r6
 80082f0:	f7ff fb5e 	bl	80079b0 <_free_r>
 80082f4:	2300      	movs	r3, #0
 80082f6:	6363      	str	r3, [r4, #52]	; 0x34
 80082f8:	2224      	movs	r2, #36	; 0x24
 80082fa:	89a3      	ldrh	r3, [r4, #12]
 80082fc:	4393      	bics	r3, r2
 80082fe:	81a3      	strh	r3, [r4, #12]
 8008300:	2300      	movs	r3, #0
 8008302:	6063      	str	r3, [r4, #4]
 8008304:	6923      	ldr	r3, [r4, #16]
 8008306:	6023      	str	r3, [r4, #0]
 8008308:	2308      	movs	r3, #8
 800830a:	89a2      	ldrh	r2, [r4, #12]
 800830c:	4313      	orrs	r3, r2
 800830e:	81a3      	strh	r3, [r4, #12]
 8008310:	6923      	ldr	r3, [r4, #16]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d10b      	bne.n	800832e <__swsetup_r+0xa6>
 8008316:	21a0      	movs	r1, #160	; 0xa0
 8008318:	2280      	movs	r2, #128	; 0x80
 800831a:	89a3      	ldrh	r3, [r4, #12]
 800831c:	0089      	lsls	r1, r1, #2
 800831e:	0092      	lsls	r2, r2, #2
 8008320:	400b      	ands	r3, r1
 8008322:	4293      	cmp	r3, r2
 8008324:	d003      	beq.n	800832e <__swsetup_r+0xa6>
 8008326:	0021      	movs	r1, r4
 8008328:	0030      	movs	r0, r6
 800832a:	f000 fa27 	bl	800877c <__smakebuf_r>
 800832e:	220c      	movs	r2, #12
 8008330:	5ea3      	ldrsh	r3, [r4, r2]
 8008332:	2001      	movs	r0, #1
 8008334:	001a      	movs	r2, r3
 8008336:	b299      	uxth	r1, r3
 8008338:	4002      	ands	r2, r0
 800833a:	4203      	tst	r3, r0
 800833c:	d00f      	beq.n	800835e <__swsetup_r+0xd6>
 800833e:	2200      	movs	r2, #0
 8008340:	60a2      	str	r2, [r4, #8]
 8008342:	6962      	ldr	r2, [r4, #20]
 8008344:	4252      	negs	r2, r2
 8008346:	61a2      	str	r2, [r4, #24]
 8008348:	2000      	movs	r0, #0
 800834a:	6922      	ldr	r2, [r4, #16]
 800834c:	4282      	cmp	r2, r0
 800834e:	d1ba      	bne.n	80082c6 <__swsetup_r+0x3e>
 8008350:	060a      	lsls	r2, r1, #24
 8008352:	d5b8      	bpl.n	80082c6 <__swsetup_r+0x3e>
 8008354:	2240      	movs	r2, #64	; 0x40
 8008356:	4313      	orrs	r3, r2
 8008358:	81a3      	strh	r3, [r4, #12]
 800835a:	3801      	subs	r0, #1
 800835c:	e7b3      	b.n	80082c6 <__swsetup_r+0x3e>
 800835e:	0788      	lsls	r0, r1, #30
 8008360:	d400      	bmi.n	8008364 <__swsetup_r+0xdc>
 8008362:	6962      	ldr	r2, [r4, #20]
 8008364:	60a2      	str	r2, [r4, #8]
 8008366:	e7ef      	b.n	8008348 <__swsetup_r+0xc0>
 8008368:	20000434 	.word	0x20000434
 800836c:	080094e4 	.word	0x080094e4
 8008370:	08009504 	.word	0x08009504
 8008374:	080094c4 	.word	0x080094c4

08008378 <abort>:
 8008378:	2006      	movs	r0, #6
 800837a:	b510      	push	{r4, lr}
 800837c:	f000 fa74 	bl	8008868 <raise>
 8008380:	2001      	movs	r0, #1
 8008382:	f7fb faad 	bl	80038e0 <_exit>
	...

08008388 <__sflush_r>:
 8008388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800838a:	898b      	ldrh	r3, [r1, #12]
 800838c:	0005      	movs	r5, r0
 800838e:	000c      	movs	r4, r1
 8008390:	071a      	lsls	r2, r3, #28
 8008392:	d45f      	bmi.n	8008454 <__sflush_r+0xcc>
 8008394:	684a      	ldr	r2, [r1, #4]
 8008396:	2a00      	cmp	r2, #0
 8008398:	dc04      	bgt.n	80083a4 <__sflush_r+0x1c>
 800839a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800839c:	2a00      	cmp	r2, #0
 800839e:	dc01      	bgt.n	80083a4 <__sflush_r+0x1c>
 80083a0:	2000      	movs	r0, #0
 80083a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80083a4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80083a6:	2f00      	cmp	r7, #0
 80083a8:	d0fa      	beq.n	80083a0 <__sflush_r+0x18>
 80083aa:	2200      	movs	r2, #0
 80083ac:	2180      	movs	r1, #128	; 0x80
 80083ae:	682e      	ldr	r6, [r5, #0]
 80083b0:	602a      	str	r2, [r5, #0]
 80083b2:	001a      	movs	r2, r3
 80083b4:	0149      	lsls	r1, r1, #5
 80083b6:	400a      	ands	r2, r1
 80083b8:	420b      	tst	r3, r1
 80083ba:	d034      	beq.n	8008426 <__sflush_r+0x9e>
 80083bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80083be:	89a3      	ldrh	r3, [r4, #12]
 80083c0:	075b      	lsls	r3, r3, #29
 80083c2:	d506      	bpl.n	80083d2 <__sflush_r+0x4a>
 80083c4:	6863      	ldr	r3, [r4, #4]
 80083c6:	1ac0      	subs	r0, r0, r3
 80083c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d001      	beq.n	80083d2 <__sflush_r+0x4a>
 80083ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80083d0:	1ac0      	subs	r0, r0, r3
 80083d2:	0002      	movs	r2, r0
 80083d4:	6a21      	ldr	r1, [r4, #32]
 80083d6:	2300      	movs	r3, #0
 80083d8:	0028      	movs	r0, r5
 80083da:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80083dc:	47b8      	blx	r7
 80083de:	89a1      	ldrh	r1, [r4, #12]
 80083e0:	1c43      	adds	r3, r0, #1
 80083e2:	d106      	bne.n	80083f2 <__sflush_r+0x6a>
 80083e4:	682b      	ldr	r3, [r5, #0]
 80083e6:	2b1d      	cmp	r3, #29
 80083e8:	d831      	bhi.n	800844e <__sflush_r+0xc6>
 80083ea:	4a2c      	ldr	r2, [pc, #176]	; (800849c <__sflush_r+0x114>)
 80083ec:	40da      	lsrs	r2, r3
 80083ee:	07d3      	lsls	r3, r2, #31
 80083f0:	d52d      	bpl.n	800844e <__sflush_r+0xc6>
 80083f2:	2300      	movs	r3, #0
 80083f4:	6063      	str	r3, [r4, #4]
 80083f6:	6923      	ldr	r3, [r4, #16]
 80083f8:	6023      	str	r3, [r4, #0]
 80083fa:	04cb      	lsls	r3, r1, #19
 80083fc:	d505      	bpl.n	800840a <__sflush_r+0x82>
 80083fe:	1c43      	adds	r3, r0, #1
 8008400:	d102      	bne.n	8008408 <__sflush_r+0x80>
 8008402:	682b      	ldr	r3, [r5, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d100      	bne.n	800840a <__sflush_r+0x82>
 8008408:	6560      	str	r0, [r4, #84]	; 0x54
 800840a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800840c:	602e      	str	r6, [r5, #0]
 800840e:	2900      	cmp	r1, #0
 8008410:	d0c6      	beq.n	80083a0 <__sflush_r+0x18>
 8008412:	0023      	movs	r3, r4
 8008414:	3344      	adds	r3, #68	; 0x44
 8008416:	4299      	cmp	r1, r3
 8008418:	d002      	beq.n	8008420 <__sflush_r+0x98>
 800841a:	0028      	movs	r0, r5
 800841c:	f7ff fac8 	bl	80079b0 <_free_r>
 8008420:	2000      	movs	r0, #0
 8008422:	6360      	str	r0, [r4, #52]	; 0x34
 8008424:	e7bd      	b.n	80083a2 <__sflush_r+0x1a>
 8008426:	2301      	movs	r3, #1
 8008428:	0028      	movs	r0, r5
 800842a:	6a21      	ldr	r1, [r4, #32]
 800842c:	47b8      	blx	r7
 800842e:	1c43      	adds	r3, r0, #1
 8008430:	d1c5      	bne.n	80083be <__sflush_r+0x36>
 8008432:	682b      	ldr	r3, [r5, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d0c2      	beq.n	80083be <__sflush_r+0x36>
 8008438:	2b1d      	cmp	r3, #29
 800843a:	d001      	beq.n	8008440 <__sflush_r+0xb8>
 800843c:	2b16      	cmp	r3, #22
 800843e:	d101      	bne.n	8008444 <__sflush_r+0xbc>
 8008440:	602e      	str	r6, [r5, #0]
 8008442:	e7ad      	b.n	80083a0 <__sflush_r+0x18>
 8008444:	2340      	movs	r3, #64	; 0x40
 8008446:	89a2      	ldrh	r2, [r4, #12]
 8008448:	4313      	orrs	r3, r2
 800844a:	81a3      	strh	r3, [r4, #12]
 800844c:	e7a9      	b.n	80083a2 <__sflush_r+0x1a>
 800844e:	2340      	movs	r3, #64	; 0x40
 8008450:	430b      	orrs	r3, r1
 8008452:	e7fa      	b.n	800844a <__sflush_r+0xc2>
 8008454:	690f      	ldr	r7, [r1, #16]
 8008456:	2f00      	cmp	r7, #0
 8008458:	d0a2      	beq.n	80083a0 <__sflush_r+0x18>
 800845a:	680a      	ldr	r2, [r1, #0]
 800845c:	600f      	str	r7, [r1, #0]
 800845e:	1bd2      	subs	r2, r2, r7
 8008460:	9201      	str	r2, [sp, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	079b      	lsls	r3, r3, #30
 8008466:	d100      	bne.n	800846a <__sflush_r+0xe2>
 8008468:	694a      	ldr	r2, [r1, #20]
 800846a:	60a2      	str	r2, [r4, #8]
 800846c:	9b01      	ldr	r3, [sp, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	dc00      	bgt.n	8008474 <__sflush_r+0xec>
 8008472:	e795      	b.n	80083a0 <__sflush_r+0x18>
 8008474:	003a      	movs	r2, r7
 8008476:	0028      	movs	r0, r5
 8008478:	9b01      	ldr	r3, [sp, #4]
 800847a:	6a21      	ldr	r1, [r4, #32]
 800847c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800847e:	47b0      	blx	r6
 8008480:	2800      	cmp	r0, #0
 8008482:	dc06      	bgt.n	8008492 <__sflush_r+0x10a>
 8008484:	2340      	movs	r3, #64	; 0x40
 8008486:	2001      	movs	r0, #1
 8008488:	89a2      	ldrh	r2, [r4, #12]
 800848a:	4240      	negs	r0, r0
 800848c:	4313      	orrs	r3, r2
 800848e:	81a3      	strh	r3, [r4, #12]
 8008490:	e787      	b.n	80083a2 <__sflush_r+0x1a>
 8008492:	9b01      	ldr	r3, [sp, #4]
 8008494:	183f      	adds	r7, r7, r0
 8008496:	1a1b      	subs	r3, r3, r0
 8008498:	9301      	str	r3, [sp, #4]
 800849a:	e7e7      	b.n	800846c <__sflush_r+0xe4>
 800849c:	20400001 	.word	0x20400001

080084a0 <_fflush_r>:
 80084a0:	690b      	ldr	r3, [r1, #16]
 80084a2:	b570      	push	{r4, r5, r6, lr}
 80084a4:	0005      	movs	r5, r0
 80084a6:	000c      	movs	r4, r1
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d102      	bne.n	80084b2 <_fflush_r+0x12>
 80084ac:	2500      	movs	r5, #0
 80084ae:	0028      	movs	r0, r5
 80084b0:	bd70      	pop	{r4, r5, r6, pc}
 80084b2:	2800      	cmp	r0, #0
 80084b4:	d004      	beq.n	80084c0 <_fflush_r+0x20>
 80084b6:	6983      	ldr	r3, [r0, #24]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d101      	bne.n	80084c0 <_fflush_r+0x20>
 80084bc:	f000 f892 	bl	80085e4 <__sinit>
 80084c0:	4b14      	ldr	r3, [pc, #80]	; (8008514 <_fflush_r+0x74>)
 80084c2:	429c      	cmp	r4, r3
 80084c4:	d11b      	bne.n	80084fe <_fflush_r+0x5e>
 80084c6:	686c      	ldr	r4, [r5, #4]
 80084c8:	220c      	movs	r2, #12
 80084ca:	5ea3      	ldrsh	r3, [r4, r2]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d0ed      	beq.n	80084ac <_fflush_r+0xc>
 80084d0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80084d2:	07d2      	lsls	r2, r2, #31
 80084d4:	d404      	bmi.n	80084e0 <_fflush_r+0x40>
 80084d6:	059b      	lsls	r3, r3, #22
 80084d8:	d402      	bmi.n	80084e0 <_fflush_r+0x40>
 80084da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084dc:	f000 f923 	bl	8008726 <__retarget_lock_acquire_recursive>
 80084e0:	0028      	movs	r0, r5
 80084e2:	0021      	movs	r1, r4
 80084e4:	f7ff ff50 	bl	8008388 <__sflush_r>
 80084e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084ea:	0005      	movs	r5, r0
 80084ec:	07db      	lsls	r3, r3, #31
 80084ee:	d4de      	bmi.n	80084ae <_fflush_r+0xe>
 80084f0:	89a3      	ldrh	r3, [r4, #12]
 80084f2:	059b      	lsls	r3, r3, #22
 80084f4:	d4db      	bmi.n	80084ae <_fflush_r+0xe>
 80084f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084f8:	f000 f916 	bl	8008728 <__retarget_lock_release_recursive>
 80084fc:	e7d7      	b.n	80084ae <_fflush_r+0xe>
 80084fe:	4b06      	ldr	r3, [pc, #24]	; (8008518 <_fflush_r+0x78>)
 8008500:	429c      	cmp	r4, r3
 8008502:	d101      	bne.n	8008508 <_fflush_r+0x68>
 8008504:	68ac      	ldr	r4, [r5, #8]
 8008506:	e7df      	b.n	80084c8 <_fflush_r+0x28>
 8008508:	4b04      	ldr	r3, [pc, #16]	; (800851c <_fflush_r+0x7c>)
 800850a:	429c      	cmp	r4, r3
 800850c:	d1dc      	bne.n	80084c8 <_fflush_r+0x28>
 800850e:	68ec      	ldr	r4, [r5, #12]
 8008510:	e7da      	b.n	80084c8 <_fflush_r+0x28>
 8008512:	46c0      	nop			; (mov r8, r8)
 8008514:	080094e4 	.word	0x080094e4
 8008518:	08009504 	.word	0x08009504
 800851c:	080094c4 	.word	0x080094c4

08008520 <std>:
 8008520:	2300      	movs	r3, #0
 8008522:	b510      	push	{r4, lr}
 8008524:	0004      	movs	r4, r0
 8008526:	6003      	str	r3, [r0, #0]
 8008528:	6043      	str	r3, [r0, #4]
 800852a:	6083      	str	r3, [r0, #8]
 800852c:	8181      	strh	r1, [r0, #12]
 800852e:	6643      	str	r3, [r0, #100]	; 0x64
 8008530:	0019      	movs	r1, r3
 8008532:	81c2      	strh	r2, [r0, #14]
 8008534:	6103      	str	r3, [r0, #16]
 8008536:	6143      	str	r3, [r0, #20]
 8008538:	6183      	str	r3, [r0, #24]
 800853a:	2208      	movs	r2, #8
 800853c:	305c      	adds	r0, #92	; 0x5c
 800853e:	f7fd fb1d 	bl	8005b7c <memset>
 8008542:	4b05      	ldr	r3, [pc, #20]	; (8008558 <std+0x38>)
 8008544:	6263      	str	r3, [r4, #36]	; 0x24
 8008546:	4b05      	ldr	r3, [pc, #20]	; (800855c <std+0x3c>)
 8008548:	6224      	str	r4, [r4, #32]
 800854a:	62a3      	str	r3, [r4, #40]	; 0x28
 800854c:	4b04      	ldr	r3, [pc, #16]	; (8008560 <std+0x40>)
 800854e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008550:	4b04      	ldr	r3, [pc, #16]	; (8008564 <std+0x44>)
 8008552:	6323      	str	r3, [r4, #48]	; 0x30
 8008554:	bd10      	pop	{r4, pc}
 8008556:	46c0      	nop			; (mov r8, r8)
 8008558:	080088a9 	.word	0x080088a9
 800855c:	080088d1 	.word	0x080088d1
 8008560:	08008909 	.word	0x08008909
 8008564:	08008935 	.word	0x08008935

08008568 <_cleanup_r>:
 8008568:	b510      	push	{r4, lr}
 800856a:	4902      	ldr	r1, [pc, #8]	; (8008574 <_cleanup_r+0xc>)
 800856c:	f000 f8ba 	bl	80086e4 <_fwalk_reent>
 8008570:	bd10      	pop	{r4, pc}
 8008572:	46c0      	nop			; (mov r8, r8)
 8008574:	080084a1 	.word	0x080084a1

08008578 <__sfmoreglue>:
 8008578:	b570      	push	{r4, r5, r6, lr}
 800857a:	2568      	movs	r5, #104	; 0x68
 800857c:	1e4a      	subs	r2, r1, #1
 800857e:	4355      	muls	r5, r2
 8008580:	000e      	movs	r6, r1
 8008582:	0029      	movs	r1, r5
 8008584:	3174      	adds	r1, #116	; 0x74
 8008586:	f7ff fa5d 	bl	8007a44 <_malloc_r>
 800858a:	1e04      	subs	r4, r0, #0
 800858c:	d008      	beq.n	80085a0 <__sfmoreglue+0x28>
 800858e:	2100      	movs	r1, #0
 8008590:	002a      	movs	r2, r5
 8008592:	6001      	str	r1, [r0, #0]
 8008594:	6046      	str	r6, [r0, #4]
 8008596:	300c      	adds	r0, #12
 8008598:	60a0      	str	r0, [r4, #8]
 800859a:	3268      	adds	r2, #104	; 0x68
 800859c:	f7fd faee 	bl	8005b7c <memset>
 80085a0:	0020      	movs	r0, r4
 80085a2:	bd70      	pop	{r4, r5, r6, pc}

080085a4 <__sfp_lock_acquire>:
 80085a4:	b510      	push	{r4, lr}
 80085a6:	4802      	ldr	r0, [pc, #8]	; (80085b0 <__sfp_lock_acquire+0xc>)
 80085a8:	f000 f8bd 	bl	8008726 <__retarget_lock_acquire_recursive>
 80085ac:	bd10      	pop	{r4, pc}
 80085ae:	46c0      	nop			; (mov r8, r8)
 80085b0:	20000724 	.word	0x20000724

080085b4 <__sfp_lock_release>:
 80085b4:	b510      	push	{r4, lr}
 80085b6:	4802      	ldr	r0, [pc, #8]	; (80085c0 <__sfp_lock_release+0xc>)
 80085b8:	f000 f8b6 	bl	8008728 <__retarget_lock_release_recursive>
 80085bc:	bd10      	pop	{r4, pc}
 80085be:	46c0      	nop			; (mov r8, r8)
 80085c0:	20000724 	.word	0x20000724

080085c4 <__sinit_lock_acquire>:
 80085c4:	b510      	push	{r4, lr}
 80085c6:	4802      	ldr	r0, [pc, #8]	; (80085d0 <__sinit_lock_acquire+0xc>)
 80085c8:	f000 f8ad 	bl	8008726 <__retarget_lock_acquire_recursive>
 80085cc:	bd10      	pop	{r4, pc}
 80085ce:	46c0      	nop			; (mov r8, r8)
 80085d0:	2000071f 	.word	0x2000071f

080085d4 <__sinit_lock_release>:
 80085d4:	b510      	push	{r4, lr}
 80085d6:	4802      	ldr	r0, [pc, #8]	; (80085e0 <__sinit_lock_release+0xc>)
 80085d8:	f000 f8a6 	bl	8008728 <__retarget_lock_release_recursive>
 80085dc:	bd10      	pop	{r4, pc}
 80085de:	46c0      	nop			; (mov r8, r8)
 80085e0:	2000071f 	.word	0x2000071f

080085e4 <__sinit>:
 80085e4:	b513      	push	{r0, r1, r4, lr}
 80085e6:	0004      	movs	r4, r0
 80085e8:	f7ff ffec 	bl	80085c4 <__sinit_lock_acquire>
 80085ec:	69a3      	ldr	r3, [r4, #24]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d002      	beq.n	80085f8 <__sinit+0x14>
 80085f2:	f7ff ffef 	bl	80085d4 <__sinit_lock_release>
 80085f6:	bd13      	pop	{r0, r1, r4, pc}
 80085f8:	64a3      	str	r3, [r4, #72]	; 0x48
 80085fa:	64e3      	str	r3, [r4, #76]	; 0x4c
 80085fc:	6523      	str	r3, [r4, #80]	; 0x50
 80085fe:	4b13      	ldr	r3, [pc, #76]	; (800864c <__sinit+0x68>)
 8008600:	4a13      	ldr	r2, [pc, #76]	; (8008650 <__sinit+0x6c>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	62a2      	str	r2, [r4, #40]	; 0x28
 8008606:	9301      	str	r3, [sp, #4]
 8008608:	42a3      	cmp	r3, r4
 800860a:	d101      	bne.n	8008610 <__sinit+0x2c>
 800860c:	2301      	movs	r3, #1
 800860e:	61a3      	str	r3, [r4, #24]
 8008610:	0020      	movs	r0, r4
 8008612:	f000 f81f 	bl	8008654 <__sfp>
 8008616:	6060      	str	r0, [r4, #4]
 8008618:	0020      	movs	r0, r4
 800861a:	f000 f81b 	bl	8008654 <__sfp>
 800861e:	60a0      	str	r0, [r4, #8]
 8008620:	0020      	movs	r0, r4
 8008622:	f000 f817 	bl	8008654 <__sfp>
 8008626:	2200      	movs	r2, #0
 8008628:	2104      	movs	r1, #4
 800862a:	60e0      	str	r0, [r4, #12]
 800862c:	6860      	ldr	r0, [r4, #4]
 800862e:	f7ff ff77 	bl	8008520 <std>
 8008632:	2201      	movs	r2, #1
 8008634:	2109      	movs	r1, #9
 8008636:	68a0      	ldr	r0, [r4, #8]
 8008638:	f7ff ff72 	bl	8008520 <std>
 800863c:	2202      	movs	r2, #2
 800863e:	2112      	movs	r1, #18
 8008640:	68e0      	ldr	r0, [r4, #12]
 8008642:	f7ff ff6d 	bl	8008520 <std>
 8008646:	2301      	movs	r3, #1
 8008648:	61a3      	str	r3, [r4, #24]
 800864a:	e7d2      	b.n	80085f2 <__sinit+0xe>
 800864c:	08009144 	.word	0x08009144
 8008650:	08008569 	.word	0x08008569

08008654 <__sfp>:
 8008654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008656:	0007      	movs	r7, r0
 8008658:	f7ff ffa4 	bl	80085a4 <__sfp_lock_acquire>
 800865c:	4b1f      	ldr	r3, [pc, #124]	; (80086dc <__sfp+0x88>)
 800865e:	681e      	ldr	r6, [r3, #0]
 8008660:	69b3      	ldr	r3, [r6, #24]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d102      	bne.n	800866c <__sfp+0x18>
 8008666:	0030      	movs	r0, r6
 8008668:	f7ff ffbc 	bl	80085e4 <__sinit>
 800866c:	3648      	adds	r6, #72	; 0x48
 800866e:	68b4      	ldr	r4, [r6, #8]
 8008670:	6873      	ldr	r3, [r6, #4]
 8008672:	3b01      	subs	r3, #1
 8008674:	d504      	bpl.n	8008680 <__sfp+0x2c>
 8008676:	6833      	ldr	r3, [r6, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d022      	beq.n	80086c2 <__sfp+0x6e>
 800867c:	6836      	ldr	r6, [r6, #0]
 800867e:	e7f6      	b.n	800866e <__sfp+0x1a>
 8008680:	220c      	movs	r2, #12
 8008682:	5ea5      	ldrsh	r5, [r4, r2]
 8008684:	2d00      	cmp	r5, #0
 8008686:	d11a      	bne.n	80086be <__sfp+0x6a>
 8008688:	0020      	movs	r0, r4
 800868a:	4b15      	ldr	r3, [pc, #84]	; (80086e0 <__sfp+0x8c>)
 800868c:	3058      	adds	r0, #88	; 0x58
 800868e:	60e3      	str	r3, [r4, #12]
 8008690:	6665      	str	r5, [r4, #100]	; 0x64
 8008692:	f000 f847 	bl	8008724 <__retarget_lock_init_recursive>
 8008696:	f7ff ff8d 	bl	80085b4 <__sfp_lock_release>
 800869a:	0020      	movs	r0, r4
 800869c:	2208      	movs	r2, #8
 800869e:	0029      	movs	r1, r5
 80086a0:	6025      	str	r5, [r4, #0]
 80086a2:	60a5      	str	r5, [r4, #8]
 80086a4:	6065      	str	r5, [r4, #4]
 80086a6:	6125      	str	r5, [r4, #16]
 80086a8:	6165      	str	r5, [r4, #20]
 80086aa:	61a5      	str	r5, [r4, #24]
 80086ac:	305c      	adds	r0, #92	; 0x5c
 80086ae:	f7fd fa65 	bl	8005b7c <memset>
 80086b2:	6365      	str	r5, [r4, #52]	; 0x34
 80086b4:	63a5      	str	r5, [r4, #56]	; 0x38
 80086b6:	64a5      	str	r5, [r4, #72]	; 0x48
 80086b8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80086ba:	0020      	movs	r0, r4
 80086bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086be:	3468      	adds	r4, #104	; 0x68
 80086c0:	e7d7      	b.n	8008672 <__sfp+0x1e>
 80086c2:	2104      	movs	r1, #4
 80086c4:	0038      	movs	r0, r7
 80086c6:	f7ff ff57 	bl	8008578 <__sfmoreglue>
 80086ca:	1e04      	subs	r4, r0, #0
 80086cc:	6030      	str	r0, [r6, #0]
 80086ce:	d1d5      	bne.n	800867c <__sfp+0x28>
 80086d0:	f7ff ff70 	bl	80085b4 <__sfp_lock_release>
 80086d4:	230c      	movs	r3, #12
 80086d6:	603b      	str	r3, [r7, #0]
 80086d8:	e7ef      	b.n	80086ba <__sfp+0x66>
 80086da:	46c0      	nop			; (mov r8, r8)
 80086dc:	08009144 	.word	0x08009144
 80086e0:	ffff0001 	.word	0xffff0001

080086e4 <_fwalk_reent>:
 80086e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086e6:	0004      	movs	r4, r0
 80086e8:	0006      	movs	r6, r0
 80086ea:	2700      	movs	r7, #0
 80086ec:	9101      	str	r1, [sp, #4]
 80086ee:	3448      	adds	r4, #72	; 0x48
 80086f0:	6863      	ldr	r3, [r4, #4]
 80086f2:	68a5      	ldr	r5, [r4, #8]
 80086f4:	9300      	str	r3, [sp, #0]
 80086f6:	9b00      	ldr	r3, [sp, #0]
 80086f8:	3b01      	subs	r3, #1
 80086fa:	9300      	str	r3, [sp, #0]
 80086fc:	d504      	bpl.n	8008708 <_fwalk_reent+0x24>
 80086fe:	6824      	ldr	r4, [r4, #0]
 8008700:	2c00      	cmp	r4, #0
 8008702:	d1f5      	bne.n	80086f0 <_fwalk_reent+0xc>
 8008704:	0038      	movs	r0, r7
 8008706:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008708:	89ab      	ldrh	r3, [r5, #12]
 800870a:	2b01      	cmp	r3, #1
 800870c:	d908      	bls.n	8008720 <_fwalk_reent+0x3c>
 800870e:	220e      	movs	r2, #14
 8008710:	5eab      	ldrsh	r3, [r5, r2]
 8008712:	3301      	adds	r3, #1
 8008714:	d004      	beq.n	8008720 <_fwalk_reent+0x3c>
 8008716:	0029      	movs	r1, r5
 8008718:	0030      	movs	r0, r6
 800871a:	9b01      	ldr	r3, [sp, #4]
 800871c:	4798      	blx	r3
 800871e:	4307      	orrs	r7, r0
 8008720:	3568      	adds	r5, #104	; 0x68
 8008722:	e7e8      	b.n	80086f6 <_fwalk_reent+0x12>

08008724 <__retarget_lock_init_recursive>:
 8008724:	4770      	bx	lr

08008726 <__retarget_lock_acquire_recursive>:
 8008726:	4770      	bx	lr

08008728 <__retarget_lock_release_recursive>:
 8008728:	4770      	bx	lr
	...

0800872c <__swhatbuf_r>:
 800872c:	b570      	push	{r4, r5, r6, lr}
 800872e:	000e      	movs	r6, r1
 8008730:	001d      	movs	r5, r3
 8008732:	230e      	movs	r3, #14
 8008734:	5ec9      	ldrsh	r1, [r1, r3]
 8008736:	0014      	movs	r4, r2
 8008738:	b096      	sub	sp, #88	; 0x58
 800873a:	2900      	cmp	r1, #0
 800873c:	da07      	bge.n	800874e <__swhatbuf_r+0x22>
 800873e:	2300      	movs	r3, #0
 8008740:	602b      	str	r3, [r5, #0]
 8008742:	89b3      	ldrh	r3, [r6, #12]
 8008744:	061b      	lsls	r3, r3, #24
 8008746:	d411      	bmi.n	800876c <__swhatbuf_r+0x40>
 8008748:	2380      	movs	r3, #128	; 0x80
 800874a:	00db      	lsls	r3, r3, #3
 800874c:	e00f      	b.n	800876e <__swhatbuf_r+0x42>
 800874e:	466a      	mov	r2, sp
 8008750:	f000 f91c 	bl	800898c <_fstat_r>
 8008754:	2800      	cmp	r0, #0
 8008756:	dbf2      	blt.n	800873e <__swhatbuf_r+0x12>
 8008758:	23f0      	movs	r3, #240	; 0xf0
 800875a:	9901      	ldr	r1, [sp, #4]
 800875c:	021b      	lsls	r3, r3, #8
 800875e:	4019      	ands	r1, r3
 8008760:	4b05      	ldr	r3, [pc, #20]	; (8008778 <__swhatbuf_r+0x4c>)
 8008762:	18c9      	adds	r1, r1, r3
 8008764:	424b      	negs	r3, r1
 8008766:	4159      	adcs	r1, r3
 8008768:	6029      	str	r1, [r5, #0]
 800876a:	e7ed      	b.n	8008748 <__swhatbuf_r+0x1c>
 800876c:	2340      	movs	r3, #64	; 0x40
 800876e:	2000      	movs	r0, #0
 8008770:	6023      	str	r3, [r4, #0]
 8008772:	b016      	add	sp, #88	; 0x58
 8008774:	bd70      	pop	{r4, r5, r6, pc}
 8008776:	46c0      	nop			; (mov r8, r8)
 8008778:	ffffe000 	.word	0xffffe000

0800877c <__smakebuf_r>:
 800877c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800877e:	2602      	movs	r6, #2
 8008780:	898b      	ldrh	r3, [r1, #12]
 8008782:	0005      	movs	r5, r0
 8008784:	000c      	movs	r4, r1
 8008786:	4233      	tst	r3, r6
 8008788:	d006      	beq.n	8008798 <__smakebuf_r+0x1c>
 800878a:	0023      	movs	r3, r4
 800878c:	3347      	adds	r3, #71	; 0x47
 800878e:	6023      	str	r3, [r4, #0]
 8008790:	6123      	str	r3, [r4, #16]
 8008792:	2301      	movs	r3, #1
 8008794:	6163      	str	r3, [r4, #20]
 8008796:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008798:	466a      	mov	r2, sp
 800879a:	ab01      	add	r3, sp, #4
 800879c:	f7ff ffc6 	bl	800872c <__swhatbuf_r>
 80087a0:	9900      	ldr	r1, [sp, #0]
 80087a2:	0007      	movs	r7, r0
 80087a4:	0028      	movs	r0, r5
 80087a6:	f7ff f94d 	bl	8007a44 <_malloc_r>
 80087aa:	2800      	cmp	r0, #0
 80087ac:	d108      	bne.n	80087c0 <__smakebuf_r+0x44>
 80087ae:	220c      	movs	r2, #12
 80087b0:	5ea3      	ldrsh	r3, [r4, r2]
 80087b2:	059a      	lsls	r2, r3, #22
 80087b4:	d4ef      	bmi.n	8008796 <__smakebuf_r+0x1a>
 80087b6:	2203      	movs	r2, #3
 80087b8:	4393      	bics	r3, r2
 80087ba:	431e      	orrs	r6, r3
 80087bc:	81a6      	strh	r6, [r4, #12]
 80087be:	e7e4      	b.n	800878a <__smakebuf_r+0xe>
 80087c0:	4b0f      	ldr	r3, [pc, #60]	; (8008800 <__smakebuf_r+0x84>)
 80087c2:	62ab      	str	r3, [r5, #40]	; 0x28
 80087c4:	2380      	movs	r3, #128	; 0x80
 80087c6:	89a2      	ldrh	r2, [r4, #12]
 80087c8:	6020      	str	r0, [r4, #0]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	81a3      	strh	r3, [r4, #12]
 80087ce:	9b00      	ldr	r3, [sp, #0]
 80087d0:	6120      	str	r0, [r4, #16]
 80087d2:	6163      	str	r3, [r4, #20]
 80087d4:	9b01      	ldr	r3, [sp, #4]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00d      	beq.n	80087f6 <__smakebuf_r+0x7a>
 80087da:	0028      	movs	r0, r5
 80087dc:	230e      	movs	r3, #14
 80087de:	5ee1      	ldrsh	r1, [r4, r3]
 80087e0:	f000 f8e6 	bl	80089b0 <_isatty_r>
 80087e4:	2800      	cmp	r0, #0
 80087e6:	d006      	beq.n	80087f6 <__smakebuf_r+0x7a>
 80087e8:	2203      	movs	r2, #3
 80087ea:	89a3      	ldrh	r3, [r4, #12]
 80087ec:	4393      	bics	r3, r2
 80087ee:	001a      	movs	r2, r3
 80087f0:	2301      	movs	r3, #1
 80087f2:	4313      	orrs	r3, r2
 80087f4:	81a3      	strh	r3, [r4, #12]
 80087f6:	89a0      	ldrh	r0, [r4, #12]
 80087f8:	4307      	orrs	r7, r0
 80087fa:	81a7      	strh	r7, [r4, #12]
 80087fc:	e7cb      	b.n	8008796 <__smakebuf_r+0x1a>
 80087fe:	46c0      	nop			; (mov r8, r8)
 8008800:	08008569 	.word	0x08008569

08008804 <_malloc_usable_size_r>:
 8008804:	1f0b      	subs	r3, r1, #4
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	1f18      	subs	r0, r3, #4
 800880a:	2b00      	cmp	r3, #0
 800880c:	da01      	bge.n	8008812 <_malloc_usable_size_r+0xe>
 800880e:	580b      	ldr	r3, [r1, r0]
 8008810:	18c0      	adds	r0, r0, r3
 8008812:	4770      	bx	lr

08008814 <_raise_r>:
 8008814:	b570      	push	{r4, r5, r6, lr}
 8008816:	0004      	movs	r4, r0
 8008818:	000d      	movs	r5, r1
 800881a:	291f      	cmp	r1, #31
 800881c:	d904      	bls.n	8008828 <_raise_r+0x14>
 800881e:	2316      	movs	r3, #22
 8008820:	6003      	str	r3, [r0, #0]
 8008822:	2001      	movs	r0, #1
 8008824:	4240      	negs	r0, r0
 8008826:	bd70      	pop	{r4, r5, r6, pc}
 8008828:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800882a:	2b00      	cmp	r3, #0
 800882c:	d004      	beq.n	8008838 <_raise_r+0x24>
 800882e:	008a      	lsls	r2, r1, #2
 8008830:	189b      	adds	r3, r3, r2
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	2a00      	cmp	r2, #0
 8008836:	d108      	bne.n	800884a <_raise_r+0x36>
 8008838:	0020      	movs	r0, r4
 800883a:	f000 f831 	bl	80088a0 <_getpid_r>
 800883e:	002a      	movs	r2, r5
 8008840:	0001      	movs	r1, r0
 8008842:	0020      	movs	r0, r4
 8008844:	f000 f81a 	bl	800887c <_kill_r>
 8008848:	e7ed      	b.n	8008826 <_raise_r+0x12>
 800884a:	2000      	movs	r0, #0
 800884c:	2a01      	cmp	r2, #1
 800884e:	d0ea      	beq.n	8008826 <_raise_r+0x12>
 8008850:	1c51      	adds	r1, r2, #1
 8008852:	d103      	bne.n	800885c <_raise_r+0x48>
 8008854:	2316      	movs	r3, #22
 8008856:	3001      	adds	r0, #1
 8008858:	6023      	str	r3, [r4, #0]
 800885a:	e7e4      	b.n	8008826 <_raise_r+0x12>
 800885c:	2400      	movs	r4, #0
 800885e:	0028      	movs	r0, r5
 8008860:	601c      	str	r4, [r3, #0]
 8008862:	4790      	blx	r2
 8008864:	0020      	movs	r0, r4
 8008866:	e7de      	b.n	8008826 <_raise_r+0x12>

08008868 <raise>:
 8008868:	b510      	push	{r4, lr}
 800886a:	4b03      	ldr	r3, [pc, #12]	; (8008878 <raise+0x10>)
 800886c:	0001      	movs	r1, r0
 800886e:	6818      	ldr	r0, [r3, #0]
 8008870:	f7ff ffd0 	bl	8008814 <_raise_r>
 8008874:	bd10      	pop	{r4, pc}
 8008876:	46c0      	nop			; (mov r8, r8)
 8008878:	20000434 	.word	0x20000434

0800887c <_kill_r>:
 800887c:	2300      	movs	r3, #0
 800887e:	b570      	push	{r4, r5, r6, lr}
 8008880:	4d06      	ldr	r5, [pc, #24]	; (800889c <_kill_r+0x20>)
 8008882:	0004      	movs	r4, r0
 8008884:	0008      	movs	r0, r1
 8008886:	0011      	movs	r1, r2
 8008888:	602b      	str	r3, [r5, #0]
 800888a:	f7fb f819 	bl	80038c0 <_kill>
 800888e:	1c43      	adds	r3, r0, #1
 8008890:	d103      	bne.n	800889a <_kill_r+0x1e>
 8008892:	682b      	ldr	r3, [r5, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d000      	beq.n	800889a <_kill_r+0x1e>
 8008898:	6023      	str	r3, [r4, #0]
 800889a:	bd70      	pop	{r4, r5, r6, pc}
 800889c:	20000718 	.word	0x20000718

080088a0 <_getpid_r>:
 80088a0:	b510      	push	{r4, lr}
 80088a2:	f7fb f807 	bl	80038b4 <_getpid>
 80088a6:	bd10      	pop	{r4, pc}

080088a8 <__sread>:
 80088a8:	b570      	push	{r4, r5, r6, lr}
 80088aa:	000c      	movs	r4, r1
 80088ac:	250e      	movs	r5, #14
 80088ae:	5f49      	ldrsh	r1, [r1, r5]
 80088b0:	f000 f8a4 	bl	80089fc <_read_r>
 80088b4:	2800      	cmp	r0, #0
 80088b6:	db03      	blt.n	80088c0 <__sread+0x18>
 80088b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80088ba:	181b      	adds	r3, r3, r0
 80088bc:	6563      	str	r3, [r4, #84]	; 0x54
 80088be:	bd70      	pop	{r4, r5, r6, pc}
 80088c0:	89a3      	ldrh	r3, [r4, #12]
 80088c2:	4a02      	ldr	r2, [pc, #8]	; (80088cc <__sread+0x24>)
 80088c4:	4013      	ands	r3, r2
 80088c6:	81a3      	strh	r3, [r4, #12]
 80088c8:	e7f9      	b.n	80088be <__sread+0x16>
 80088ca:	46c0      	nop			; (mov r8, r8)
 80088cc:	ffffefff 	.word	0xffffefff

080088d0 <__swrite>:
 80088d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d2:	001f      	movs	r7, r3
 80088d4:	898b      	ldrh	r3, [r1, #12]
 80088d6:	0005      	movs	r5, r0
 80088d8:	000c      	movs	r4, r1
 80088da:	0016      	movs	r6, r2
 80088dc:	05db      	lsls	r3, r3, #23
 80088de:	d505      	bpl.n	80088ec <__swrite+0x1c>
 80088e0:	230e      	movs	r3, #14
 80088e2:	5ec9      	ldrsh	r1, [r1, r3]
 80088e4:	2200      	movs	r2, #0
 80088e6:	2302      	movs	r3, #2
 80088e8:	f000 f874 	bl	80089d4 <_lseek_r>
 80088ec:	89a3      	ldrh	r3, [r4, #12]
 80088ee:	4a05      	ldr	r2, [pc, #20]	; (8008904 <__swrite+0x34>)
 80088f0:	0028      	movs	r0, r5
 80088f2:	4013      	ands	r3, r2
 80088f4:	81a3      	strh	r3, [r4, #12]
 80088f6:	0032      	movs	r2, r6
 80088f8:	230e      	movs	r3, #14
 80088fa:	5ee1      	ldrsh	r1, [r4, r3]
 80088fc:	003b      	movs	r3, r7
 80088fe:	f000 f81f 	bl	8008940 <_write_r>
 8008902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008904:	ffffefff 	.word	0xffffefff

08008908 <__sseek>:
 8008908:	b570      	push	{r4, r5, r6, lr}
 800890a:	000c      	movs	r4, r1
 800890c:	250e      	movs	r5, #14
 800890e:	5f49      	ldrsh	r1, [r1, r5]
 8008910:	f000 f860 	bl	80089d4 <_lseek_r>
 8008914:	89a3      	ldrh	r3, [r4, #12]
 8008916:	1c42      	adds	r2, r0, #1
 8008918:	d103      	bne.n	8008922 <__sseek+0x1a>
 800891a:	4a05      	ldr	r2, [pc, #20]	; (8008930 <__sseek+0x28>)
 800891c:	4013      	ands	r3, r2
 800891e:	81a3      	strh	r3, [r4, #12]
 8008920:	bd70      	pop	{r4, r5, r6, pc}
 8008922:	2280      	movs	r2, #128	; 0x80
 8008924:	0152      	lsls	r2, r2, #5
 8008926:	4313      	orrs	r3, r2
 8008928:	81a3      	strh	r3, [r4, #12]
 800892a:	6560      	str	r0, [r4, #84]	; 0x54
 800892c:	e7f8      	b.n	8008920 <__sseek+0x18>
 800892e:	46c0      	nop			; (mov r8, r8)
 8008930:	ffffefff 	.word	0xffffefff

08008934 <__sclose>:
 8008934:	b510      	push	{r4, lr}
 8008936:	230e      	movs	r3, #14
 8008938:	5ec9      	ldrsh	r1, [r1, r3]
 800893a:	f000 f815 	bl	8008968 <_close_r>
 800893e:	bd10      	pop	{r4, pc}

08008940 <_write_r>:
 8008940:	b570      	push	{r4, r5, r6, lr}
 8008942:	0004      	movs	r4, r0
 8008944:	0008      	movs	r0, r1
 8008946:	0011      	movs	r1, r2
 8008948:	001a      	movs	r2, r3
 800894a:	2300      	movs	r3, #0
 800894c:	4d05      	ldr	r5, [pc, #20]	; (8008964 <_write_r+0x24>)
 800894e:	602b      	str	r3, [r5, #0]
 8008950:	f7fa ffef 	bl	8003932 <_write>
 8008954:	1c43      	adds	r3, r0, #1
 8008956:	d103      	bne.n	8008960 <_write_r+0x20>
 8008958:	682b      	ldr	r3, [r5, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d000      	beq.n	8008960 <_write_r+0x20>
 800895e:	6023      	str	r3, [r4, #0]
 8008960:	bd70      	pop	{r4, r5, r6, pc}
 8008962:	46c0      	nop			; (mov r8, r8)
 8008964:	20000718 	.word	0x20000718

08008968 <_close_r>:
 8008968:	2300      	movs	r3, #0
 800896a:	b570      	push	{r4, r5, r6, lr}
 800896c:	4d06      	ldr	r5, [pc, #24]	; (8008988 <_close_r+0x20>)
 800896e:	0004      	movs	r4, r0
 8008970:	0008      	movs	r0, r1
 8008972:	602b      	str	r3, [r5, #0]
 8008974:	f7fa fff9 	bl	800396a <_close>
 8008978:	1c43      	adds	r3, r0, #1
 800897a:	d103      	bne.n	8008984 <_close_r+0x1c>
 800897c:	682b      	ldr	r3, [r5, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d000      	beq.n	8008984 <_close_r+0x1c>
 8008982:	6023      	str	r3, [r4, #0]
 8008984:	bd70      	pop	{r4, r5, r6, pc}
 8008986:	46c0      	nop			; (mov r8, r8)
 8008988:	20000718 	.word	0x20000718

0800898c <_fstat_r>:
 800898c:	2300      	movs	r3, #0
 800898e:	b570      	push	{r4, r5, r6, lr}
 8008990:	4d06      	ldr	r5, [pc, #24]	; (80089ac <_fstat_r+0x20>)
 8008992:	0004      	movs	r4, r0
 8008994:	0008      	movs	r0, r1
 8008996:	0011      	movs	r1, r2
 8008998:	602b      	str	r3, [r5, #0]
 800899a:	f7fa fff0 	bl	800397e <_fstat>
 800899e:	1c43      	adds	r3, r0, #1
 80089a0:	d103      	bne.n	80089aa <_fstat_r+0x1e>
 80089a2:	682b      	ldr	r3, [r5, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d000      	beq.n	80089aa <_fstat_r+0x1e>
 80089a8:	6023      	str	r3, [r4, #0]
 80089aa:	bd70      	pop	{r4, r5, r6, pc}
 80089ac:	20000718 	.word	0x20000718

080089b0 <_isatty_r>:
 80089b0:	2300      	movs	r3, #0
 80089b2:	b570      	push	{r4, r5, r6, lr}
 80089b4:	4d06      	ldr	r5, [pc, #24]	; (80089d0 <_isatty_r+0x20>)
 80089b6:	0004      	movs	r4, r0
 80089b8:	0008      	movs	r0, r1
 80089ba:	602b      	str	r3, [r5, #0]
 80089bc:	f7fa ffed 	bl	800399a <_isatty>
 80089c0:	1c43      	adds	r3, r0, #1
 80089c2:	d103      	bne.n	80089cc <_isatty_r+0x1c>
 80089c4:	682b      	ldr	r3, [r5, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d000      	beq.n	80089cc <_isatty_r+0x1c>
 80089ca:	6023      	str	r3, [r4, #0]
 80089cc:	bd70      	pop	{r4, r5, r6, pc}
 80089ce:	46c0      	nop			; (mov r8, r8)
 80089d0:	20000718 	.word	0x20000718

080089d4 <_lseek_r>:
 80089d4:	b570      	push	{r4, r5, r6, lr}
 80089d6:	0004      	movs	r4, r0
 80089d8:	0008      	movs	r0, r1
 80089da:	0011      	movs	r1, r2
 80089dc:	001a      	movs	r2, r3
 80089de:	2300      	movs	r3, #0
 80089e0:	4d05      	ldr	r5, [pc, #20]	; (80089f8 <_lseek_r+0x24>)
 80089e2:	602b      	str	r3, [r5, #0]
 80089e4:	f7fa ffe2 	bl	80039ac <_lseek>
 80089e8:	1c43      	adds	r3, r0, #1
 80089ea:	d103      	bne.n	80089f4 <_lseek_r+0x20>
 80089ec:	682b      	ldr	r3, [r5, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d000      	beq.n	80089f4 <_lseek_r+0x20>
 80089f2:	6023      	str	r3, [r4, #0]
 80089f4:	bd70      	pop	{r4, r5, r6, pc}
 80089f6:	46c0      	nop			; (mov r8, r8)
 80089f8:	20000718 	.word	0x20000718

080089fc <_read_r>:
 80089fc:	b570      	push	{r4, r5, r6, lr}
 80089fe:	0004      	movs	r4, r0
 8008a00:	0008      	movs	r0, r1
 8008a02:	0011      	movs	r1, r2
 8008a04:	001a      	movs	r2, r3
 8008a06:	2300      	movs	r3, #0
 8008a08:	4d05      	ldr	r5, [pc, #20]	; (8008a20 <_read_r+0x24>)
 8008a0a:	602b      	str	r3, [r5, #0]
 8008a0c:	f7fa ff74 	bl	80038f8 <_read>
 8008a10:	1c43      	adds	r3, r0, #1
 8008a12:	d103      	bne.n	8008a1c <_read_r+0x20>
 8008a14:	682b      	ldr	r3, [r5, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d000      	beq.n	8008a1c <_read_r+0x20>
 8008a1a:	6023      	str	r3, [r4, #0]
 8008a1c:	bd70      	pop	{r4, r5, r6, pc}
 8008a1e:	46c0      	nop			; (mov r8, r8)
 8008a20:	20000718 	.word	0x20000718

08008a24 <_init>:
 8008a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a26:	46c0      	nop			; (mov r8, r8)
 8008a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a2a:	bc08      	pop	{r3}
 8008a2c:	469e      	mov	lr, r3
 8008a2e:	4770      	bx	lr

08008a30 <_fini>:
 8008a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a32:	46c0      	nop			; (mov r8, r8)
 8008a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a36:	bc08      	pop	{r3}
 8008a38:	469e      	mov	lr, r3
 8008a3a:	4770      	bx	lr
